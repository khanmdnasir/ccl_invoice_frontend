{"version":3,"sources":["components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutColor.tsx","components/ThemeCustomizer/index.tsx","layouts/RightSidebar/index.tsx"],"names":["LayoutTypes","changeLayoutType","layoutType","layoutConstants","className","Form","Check","Input","type","onChange","e","target","value","name","LAYOUT_VERTICAL","id","checked","Label","htmlFor","LAYOUT_HORIZONTAL","LAYOUT_DETACHED","LAYOUT_TWO_COLUMN","LayoutColor","changeLayoutColorScheme","layoutColor","LAYOUT_COLOR_LIGHT","LAYOUT_COLOR_DARK","ThemeCustomizer","dispatch","useDispatch","useSelector","state","Layout","changeLayout","changeLayoutColor","reset","toggleSidebarUserInfo","toggleLeftSidebarUserInfo","Fragment","role","onClick","RightSideBar","props","rightBarNodeRef","useRef","isOpenRightSideBar","handleOtherClick","useCallback","current","contains","hideRightSidebar","useEffect","document","addEventListener","removeEventListener","ref","style","maxHeight","zIndex","timeout","scrollbarMaxSize","Tab","Container","defaultActiveKey","Nav","variant","Item","as","Link","eventKey","Content","Pane"],"mappings":"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","file":"static/js/5.2a8923fa.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LayoutTypesProps {\n    changeLayoutType: (value: any) => void;\n    layoutType: string;\n    layoutConstants: typeof layoutConstants.LayoutTypes;\n}\n\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Layout</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_VERTICAL}\n                    id=\"vertical-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\n                />\n                <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_HORIZONTAL}\n                    id=\"horizontal-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\n                />\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_DETACHED}\n                    id=\"detached-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_DETACHED}\n                />\n                <Form.Check.Label htmlFor=\"detached-layout\">Detached Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_TWO_COLUMN}\n                    id=\"two-column-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_TWO_COLUMN}\n                />\n                <Form.Check.Label htmlFor=\"two-column-layout\">Two Column Layout</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutTypes;\n","import React from 'react';\nimport { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ninterface LayoutColorProps {\n    changeLayoutColorScheme: (value: any) => void;\n    layoutColor: string;\n    layoutConstants: typeof layoutConstants.LayoutColor;\n}\n\nconst LayoutColor = ({ changeLayoutColorScheme, layoutColor, layoutConstants }: LayoutColorProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Color Scheme</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"layout-color\"\n                    id=\"light-mode-check\"\n                    value={layoutConstants.LAYOUT_COLOR_LIGHT}\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"light-mode-check\">Light Mode</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"layout-color\"\n                    id=\"dark-mode-check\"\n                    value={layoutConstants.LAYOUT_COLOR_DARK}\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_DARK}\n                />\n                <Form.Check.Label htmlFor=\"dark-mode-check\">Dark Mode</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutColor;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// actions\nimport {\n    changeLayout,\n    changeLayoutColor,\n    toggleSidebarUserInfo,\n    \n} from '../../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\n// constants\nimport * as layoutConstants from '../../constants/layout';\n\n\n\n// components\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\n\n\n\nconst ThemeCustomizer = () => {\n    const dispatch = useDispatch<AppDispatch>();\n    \n\n    const {\n        layoutColor,\n        layoutType,\n    } = useSelector((state: RootState) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutType: state.Layout.layoutType,\n    }));\n\n\n\n\n  \n\n\n\n    /**\n     * On layout change\n     */\n    const changeLayoutType = (value: any) => {\n        var layout = value;\n        switch (layout) {\n            case 'horizontal':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n                break;\n            case 'detached':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_DETACHED));\n                break;\n            case 'vertical':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n                break;\n            default:\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN));\n                break;\n        }\n    };\n\n    /**\n     * Change the layout color\n     */\n    const changeLayoutColorScheme = (value: any) => {\n        var mode = value;\n        switch (mode) {\n            case 'dark':\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n                break;\n            default:\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n                break;\n        }\n    };\n\n   \n\n    \n\n  \n\n\n\n   \n\n    /*\n     * Toggle the leftsidebar use info\n     */\n    const toggleLeftSidebarUserInfo = (value: any) => {\n        var checked = value;\n        dispatch(toggleSidebarUserInfo(checked));\n    };\n\n\n\n    /**\n     * Reset everything\n     */\n    const reset = () => {\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_TWO_COLUMN);\n        changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n       \n        toggleLeftSidebarUserInfo(false);\n        \n        \n    };\n\n    return (\n        <React.Fragment>\n            <h6 className=\"fw-medium px-3 m-0 py-2 font-13 text-uppercase bg-light\">\n                <span className=\"d-block py-1\">Theme Settings</span>\n            </h6>\n            <div className=\"p-3\">\n                <div className=\"alert alert-warning\" role=\"alert\">\n                    <strong>Customize </strong> the overall color scheme, sidebar menu, etc.\n                </div>\n\n                {/* Layouts */}\n                <LayoutTypes\n                    changeLayoutType={changeLayoutType}\n                    layoutType={layoutType}\n                    layoutConstants={layoutConstants.LayoutTypes}\n                />\n\n                <LayoutColor\n                    changeLayoutColorScheme={changeLayoutColorScheme}\n                    layoutColor={layoutColor}\n                    layoutConstants={layoutConstants.LayoutColor}\n                />\n\n                \n\n                \n\n                \n\n                <div className=\"d-grid mt-4\">\n                    <button className=\"btn btn-primary\" id=\"resetBtn\" onClick={() => reset()}>\n                        Reset to Default\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default ThemeCustomizer;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { Nav, Tab } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SimpleBar from 'simplebar-react';\n\n// actions\nimport { hideRightSidebar } from '../../redux/actions';\n\n// store\nimport { AppDispatch, RootState } from '../../redux/store';\n\n\nimport ThemeCustomizer from '../../components/ThemeCustomizer/';\n\n\n\ninterface RightSideBarProps {\n    hideRightSidebar?: () => void;\n    title?: string;\n    children?: any;\n}\n\nconst RightSideBar = (props: RightSideBarProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n    const rightBarNodeRef: any = useRef(null);\n\n    const { isOpenRightSideBar } = useSelector((state: RootState) => ({\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    /**\n     * Handle the click anywhere in doc\n     */\n    const handleOtherClick = useCallback(\n        (e: any) => {\n            if (isOpenRightSideBar) {\n                if (rightBarNodeRef && rightBarNodeRef.current && rightBarNodeRef.current.contains(e.target)) {\n                    return;\n                } else {\n                    dispatch(hideRightSidebar());\n                }\n            }\n        },\n        [rightBarNodeRef, dispatch, isOpenRightSideBar]\n    );\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleOtherClick, false);\n        return () => {\n            document.removeEventListener('mousedown', handleOtherClick, false);\n        };\n    }, [handleOtherClick]);\n\n    return (\n        <React.Fragment>\n            <div className=\"right-bar\" ref={rightBarNodeRef}>\n                <SimpleBar style={{ maxHeight: '100%', zIndex: 10000 }} timeout={500} scrollbarMaxSize={320}>\n                    <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"themecustomizer\">\n                        <Nav variant=\"tabs\" className=\"nav-bordered nav-justified\">\n                            \n                            <Nav.Item as=\"li\">\n                                <Nav.Link eventKey=\"themecustomizer\" className=\"py-2 cursor-pointer\">\n                                    <i className=\"mdi mdi-cog-outline d-block font-22 my-1\"></i>\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n\n                        <Tab.Content className=\"p-0\">\n                            <Tab.Pane eventKey=\"themecustomizer\">\n                                <ThemeCustomizer />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Tab.Container>\n                </SimpleBar>\n            </div>\n            <div className=\"rightbar-overlay\"></div>\n        </React.Fragment>\n    );\n};\n\nexport default RightSideBar;\n"],"sourceRoot":""}