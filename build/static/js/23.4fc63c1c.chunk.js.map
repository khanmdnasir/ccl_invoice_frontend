{"version":3,"sources":["hooks/useQuery.ts","pages/auth/Login.tsx"],"names":["useQuery","URLSearchParams","useLocation","search","BottomLink","t","useTranslation","className","to","Login","dispatch","useDispatch","next","get","useEffect","resetAuth","useSelector","state","loading","Auth","user","error","userLoggedIn","schemaResolver","yupResolver","yup","shape","email","required","password","AuthLayout","bottomLinks","Alert","variant","onSubmit","formData","loginUser","resolver","label","type","name","placeholder","containerClass","Button","disabled"],"mappings":"gNAMeA,EAJE,WACb,OAAO,IAAIC,gBAAgBC,cAAcC,S,qCCyBvCC,EAAa,WACf,IAAQC,EAAMC,cAAND,EAER,OACI,wBAAQE,UAAU,oBAAlB,SACI,oBAAGA,UAAU,aAAb,UACKF,EAAE,0BAA2B,IAC9B,cAAC,IAAD,CAAMG,GAAI,iBAAkBD,UAAU,kBAAtC,SACI,4BAAIF,EAAE,qBAgGXI,UAvFD,WACV,IAAQJ,EAAMC,cAAND,EACFK,EAAWC,cAGXC,EADQZ,IACKa,IAAI,QAEvBC,qBAAU,WACNJ,EAASK,iBACV,CAACL,IAEJ,MAA+CM,aAAY,SAACC,GAAD,MAAuB,CAC9EC,QAASD,EAAME,KAAKD,QACpBE,KAAMH,EAAME,KAAKC,KACjBC,MAAOJ,EAAME,KAAKE,MAClBC,aAAcL,EAAME,KAAKG,iBAJrBJ,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,aAAcF,EAA/B,EAA+BA,KAAMC,EAArC,EAAqCA,MAU/BE,EAAiBC,YACnBC,MAAaC,MAAM,CACfC,MAAOF,MAAaG,SAASvB,EAAE,uBAC/BwB,SAAUJ,MAAaG,SAASvB,EAAE,6BAW1C,OACI,qCACKiB,GAAgBF,EAAO,cAAC,IAAD,CAAUZ,GAAII,GAAc,MAAmB,KAEvE,eAACkB,EAAA,EAAD,CAAYC,YAAa,cAAC,EAAD,IAAzB,UACI,oBAAIxB,UAAU,OAAd,SAAsBF,EAAE,aACxB,mBAAGE,UAAU,kBAAb,SAAgCF,EAAE,8DAEjCgB,GACG,cAACW,EAAA,EAAD,CAAOC,QAAQ,SAAS1B,UAAU,OAAlC,SACKc,IAIT,eAAC,IAAD,CACIa,SAnBC,SAACC,GACdzB,EAAS0B,YAAUD,EAAQ,MAAWA,EAAQ,YAmBlCE,SAAUd,EAFd,UAII,cAAC,IAAD,CACIe,MAAOjC,EAAE,SACTkC,KAAK,OACLC,KAAK,QACLC,YAAapC,EAAE,oBACfqC,eAAgB,SAEpB,cAAC,IAAD,CACIJ,MAAOjC,EAAE,YACTkC,KAAK,WACLC,KAAK,WACLC,YAAapC,EAAE,uBACfqC,eAAgB,OALpB,SAOI,cAAC,IAAD,CAAMlC,GAAG,wBAAwBD,UAAU,uBAA3C,SACI,gCAAQF,EAAE,+BAIlB,cAAC,IAAD,CAAWiC,MAAM,cAAcC,KAAK,WAAWC,KAAK,WAAWE,eAAgB,SAE/E,qBAAKnC,UAAU,0BAAf,SACI,cAACoC,EAAA,EAAD,CAAQV,QAAQ,UAAUM,KAAK,SAASK,SAAU1B,EAAlD,SACKb,EAAE","file":"static/js/23.4fc63c1c.chunk.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nconst useQuery = (): URLSearchParams => {\n    return new URLSearchParams(useLocation().search);\n};\n\nexport default useQuery;\n","import React, { useEffect } from 'react';\nimport { Button, Alert } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\n// actions\nimport { resetAuth, loginUser } from '../../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\nimport { useQuery } from '../../hooks';\n\n// components\nimport { VerticalForm, FormInput } from '../../components';\n\nimport AuthLayout from './AuthLayout';\n\ninterface UserData {\n    email: string;\n    password: string;\n}\n\n/* bottom link */\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <footer className=\"footer footer-alt\">\n            <p className=\"text-muted\">\n                {t(\"Don't have an account?\")}{' '}\n                <Link to={'/auth/register'} className=\"text-muted ms-1\">\n                    <b>{t('Sign Up')}</b>\n                </Link>\n            </p>\n        </footer>\n    );\n};\n\n\n\nconst Login = () => {\n    const { t } = useTranslation();\n    const dispatch = useDispatch<AppDispatch>();\n\n    const query = useQuery();\n    const next = query.get('next');\n\n    useEffect(() => {\n        dispatch(resetAuth());\n    }, [dispatch]);\n\n    const { loading, userLoggedIn, user, error } = useSelector((state: RootState) => ({\n        loading: state.Auth.loading,\n        user: state.Auth.user,\n        error: state.Auth.error,\n        userLoggedIn: state.Auth.userLoggedIn,\n    }));\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            email: yup.string().required(t('Please enter Email')),\n            password: yup.string().required(t('Please enter Password')),\n        })\n    );\n\n    /*\n     * handle form submission\n     */\n    const onSubmit = (formData: UserData) => {\n        dispatch(loginUser(formData['email'], formData['password']));\n    };\n\n    return (\n        <>\n            {userLoggedIn || user ? <Redirect to={next ? next : '/'}></Redirect> : null}\n\n            <AuthLayout bottomLinks={<BottomLink />}>\n                <h4 className=\"mt-0\">{t('Sign In')}</h4>\n                <p className=\"text-muted mb-4\">{t('Enter your email address and password to access account.')}</p>\n\n                {error && (\n                    <Alert variant=\"danger\" className=\"my-2\">\n                        {error}\n                    </Alert>\n                )}\n\n                <VerticalForm\n                    onSubmit={onSubmit}\n                    resolver={schemaResolver}\n                >\n                    <FormInput\n                        label={t('Email')}\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder={t('Enter your Email')}\n                        containerClass={'mb-3'}\n                    />\n                    <FormInput\n                        label={t('Password')}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder={t('Enter your password')}\n                        containerClass={'mb-3'}\n                    >\n                        <Link to=\"/auth/forget-password\" className=\"text-muted float-end\">\n                            <small>{t('Forgot your password?')}</small>\n                        </Link>\n                    </FormInput>\n\n                    <FormInput label=\"Remember me\" type=\"checkbox\" name=\"checkbox\" containerClass={'mb-3'} />\n\n                    <div className=\"d-grid mb-0 text-center\">\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                            {t('Log In')}\n                        </Button>\n                    </div>\n\n                    \n                </VerticalForm>\n            </AuthLayout>\n        </>\n    );\n};\n\nexport default Login;\n"],"sourceRoot":""}