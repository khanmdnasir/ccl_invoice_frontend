{"version":3,"sources":["redux/currency/types.ts","redux/chart-account/types.ts","redux/layout/actions.ts","redux/user/actions.ts","redux/roles/actions.ts","redux/contact/actions.ts","redux/service/actions.ts","redux/invoice/actions.ts","redux/repeating-invoice/actions.ts","redux/chart-account/actions.ts","pages/auth/AuthLayout.tsx","helpers/api/apiCore.ts","config.ts","redux/auth/constants.ts","utils/array.ts","utils/layout.ts","assets/images/ccl.jpg","redux/contact/types.ts","redux/layout/constants.ts","components/PageTitle.tsx","constants/layout.ts","redux/auth/actions.ts","constants/index.ts","redux/service/types.ts","components/Pagination.tsx","components/Table.tsx","i18n.ts","layouts/Default.tsx","layouts/Vertical.tsx","layouts/Detached.tsx","layouts/Horizontal/index.tsx","layouts/TwoColumn/index.tsx","pages/Form/ContactForm.tsx","pages/app/Contact.jsx","pages/app/invoice.jsx","pages/app/ContactDetails.jsx","pages/app/user-management/ChangePassword.tsx","pages/Form/RoleForm.jsx","pages/auth/PasswordReset.tsx","pages/auth/PasswordResetSuccess.tsx","routes/PrivateRoute.tsx","routes/Root.tsx","pages/app/service.jsx","pages/Form/ServiceForm.jsx","pages/Form/InvoiceForm.jsx","pages/app/InvoiceDetails.jsx","pages/app/RepeatingInvoiceDetails.jsx","pages/Form/RepeatingInvoiceForm.jsx","pages/app/RepeatingInvoice.jsx","pages/app/PublicInvoice.jsx","routes/index.tsx","routes/Routes.tsx","App.tsx","reportWebVitals.ts","redux/auth/reducers.ts","redux/layout/reducers.ts","redux/user/reducers.ts","redux/roles/reducers.ts","redux/contact/reducers.ts","redux/location/reducers.ts","redux/service/reducers.ts","redux/invoice/reducers.ts","redux/repeating-invoice/reducers.ts","redux/currency/reducers.ts","redux/chart-account/reducers.ts","redux/reducers.ts","helpers/api/auth.ts","helpers/api/user.ts","helpers/api/role.ts","helpers/api/contact.ts","helpers/api/location.ts","helpers/api/service.ts","helpers/api/invoice.ts","helpers/api/repeating_invoice.ts","helpers/api/currency.ts","helpers/api/chart_account.ts","redux/auth/saga.ts","redux/layout/saga.ts","redux/user/saga.ts","redux/roles/saga.ts","redux/contact/saga.ts","redux/location/saga.ts","redux/service/saga.ts","redux/invoice/saga.ts","redux/repeating-invoice/saga.ts","redux/currency/saga.ts","redux/chart-account/saga.ts","redux/sagas.ts","redux/store.ts","index.tsx","redux/user/types.ts","redux/roles/types.ts","redux/location/types.ts","redux/invoice/types.ts","redux/repeating-invoice/types.ts","components/VerticalForm.tsx","components/FormInput.tsx","components/CustomPagination.jsx","redux/location/actions.ts"],"names":["GET_CURRENCY_REQUESTED","GET_CURRENCY_SUCCESS","GET_CURRENCY_FAILED","GET_CHARTACCOUNT_REQUESTED","GET_CHARTACCOUNT_SUCCESS","GET_CHARTACCOUNT_FAILED","changeLayout","layout","type","LayoutActionTypes","CHANGE_LAYOUT","payload","changeLayoutColor","color","CHANGE_LAYOUT_COLOR","changeSidebarType","sidebarType","CHANGE_SIDEBAR_TYPE","toggleSidebarUserInfo","showSidebarUserInfo","TOGGLE_SIDEBAR_USER_INFO","changeTopbarTheme","topbarTheme","CHANGE_TOPBAR_THEME","showRightSidebar","SHOW_RIGHT_SIDEBAR","hideRightSidebar","HIDE_RIGHT_SIDEBAR","getUser","limit","page","addUser","formData","getRoles","getUserRole","getContact","getContactInvoice","id","getContactInvoiceSetting","getContactDetails","updateContactInvoiceSetting","data","getAllContact","addContact","getContactService","contact_id","getInvoice","getInvoiceDetails","getRepeatingInvoice","getRepeatingInvoiceDetails","getChartAccount","AuthLayout","helpText","bottomLinks","children","t","isCombineForm","useTranslation","useEffect","document","body","classList","remove","add","className","Body","to","src","CCL_Logo","alt","height","axios","defaults","headers","post","baseURL","config","API_URL","interceptors","response","use","error","message","code","status","statusText","userInfo","JSON","parse","localStorage","getItem","AUTH_TOKEN_KEY","refreshToken","refresh","tokenParts","atob","split","now","Math","ceil","Date","console","log","exp","then","newUpdateUserInfo","access","setItem","stringify","common","window","location","href","catch","err","removeItem","Promise","reject","setAuthorization","token","getUserFromCookie","APICore","get","url","params","queryString","Object","keys","map","key","join","getFile","responseType","getMultiple","urls","reqs","push","all","create","updatePatch","patch","update","put","delete","createWithFile","FormData","k","append","updateWithFile","isUserAuthenticated","getLoggedInUser","setLoggedInUser","user","process","AuthActionTypes","splitArray","array","chunkSize","Array","length","fill","_","index","begin","slice","getLayoutConfigs","layoutWidth","leftSideBarType","SideBarTypes","LEFT_SIDEBAR_TYPE_DEFAULT","LayoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","LEFT_SIDEBAR_TYPE_CONDENSED","changeBodyAttribute","attribute","value","setAttribute","GET_CONTACT_REQUESTED","GET_CONTACT_SUCCESS","GET_CONTACT_FAILED","GET_CONTACT_DETAILS_REQUESTED","GET_CONTACT_DETAILS_SUCCESS","GET_CONTACT_DETAILS_FAILED","GET_CONTACT_INVOICE_REQUESTED","GET_CONTACT_INVOICE_SUCCESS","GET_CONTACT_INVOICE_FAILED","GET_CONTACT_INVOICE_SETTING_REQUESTED","GET_CONTACT_INVOICE_SETTING_SUCCESS","GET_CONTACT_INVOICE_SETTING_FAILED","UPDATE_CONTACT_INVOICE_SETTING_REQUESTED","UPDATE_CONTACT_INVOICE_SETTING_SUCCESS","UPDATE_CONTACT_INVOICE_SETTING_FAILED","GET_ALLCONTACT_REQUESTED","GET_ALLCONTACT_SUCCESS","GET_ALLCONTACT_FAILED","ADD_CONTACT_REQUESTED","ADD_CONTACT_SUCCESS","ADD_CONTACT_FAILED","DELETE_CONTACT_REQUESTED","DELETE_CONTACT_SUCCESS","DELETE_CONTACT_FAILED","PageTitle","props","Item","item","active","label","path","LayoutTypes","LayoutColor","MenuPositions","SideBarTheme","TopbarTheme","authApiResponseSuccess","actionType","API_RESPONSE_SUCCESS","authApiResponseError","API_RESPONSE_ERROR","loginUser","email","password","LOGIN_USER","logoutUser","LOGOUT_USER","signupUser","first_name","last_name","phone","SIGNUP_USER","resetAuth","RESET","UpdateProfile","UPDATE_PROFILE","UpdateProfileImage","profile_image","UPDATE_PROFILE_IMAGE","GET_SERVICE_REQUESTED","GET_SERVICE_SUCCESS","GET_SERVICE_FAILED","GET_CONTACTSERVICE_REQUESTED","GET_CONTACTSERVICE_SUCCESS","GET_CONTACTSERVICE_FAILED","ADD_SERVICE_REQUESTED","ADD_SERVICE_SUCCESS","ADD_SERVICE_FAILED","Pagination","tableProps","sizePerPageList","useState","pageCount","setPageCount","state","pageIndex","setPageIndex","filterPages","useCallback","visiblePages","totalPages","filter","getVisiblePages","total","changePage","setVisiblePages","gotoPage","activePage","pageSize","onChange","e","setPageSize","Number","target","text","pageOptions","min","classNames","disabled","onClick","Fragment","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","searchBoxClass","count","setValue","useAsyncDebounce","undefined","placeholder","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","current","htmlFor","Table","isSearchable","isSortable","pagination","isSelectable","isExpandable","otherProps","useGlobalFilter","useSortBy","useExpanded","usePagination","useRowSelect","dataTable","useTable","columns","initialState","hasOwnProperty","hooks","visibleColumns","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","rows","getTableProps","headerGroups","headerGroup","getHeaderGroupProps","column","getHeaderProps","sort","getSortByToggleProps","sorting_desc","isSortedDesc","sorting_asc","sortable","render","getTableBodyProps","i","prepareRow","getRowProps","cells","cell","getCellProps","resources","es","translation","i18n","detector","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","DefaultLayout","layoutColor","useSelector","Layout","fallback","Topbar","React","lazy","LeftSidebar","Footer","RightSidebar","loading","VerticalLayout","dispatch","useDispatch","menuPosition","leftSideBarTheme","showTwoToneIcons","isOpenRightSideBar","isMenuOpened","setIsMenuOpened","LAYOUT_VERTICAL","updateDimensions","innerWidth","addEventListener","removeEventListener","isCondensed","openLeftMenuCallBack","prevState","hideLogo","Container","fluid","DetachedLayout","LAYOUT_DETACHED","navCssClasses","topbarDark","Navbar","HorizontalLayout","LAYOUT_HORIZONTAL","TwoColumnLayout","LAYOUT_TWO_COLUMN","TOPBAR_THEME_LIGHT","ContactForm","show","onHide","onSubmit","contact","countries","cities","Location","city","schemaResolver","yupResolver","yup","shape","name","required","client_id","contact_type","typeError","contact_person","methods","useForm","defaultValues","country","billing_address","resolver","handleSubmit","register","reset","control","errors","formState","getCity","Modal","centered","closeButton","Title","Form","Row","Col","labelClassName","containerClass","defaultValue","Group","Label","Select","isInvalid","selected","Control","Feedback","Button","variant","api","ReactExport","ExcelFile","ExcelSheet","ExcelColumn","accessor","withSwal","swal","user_role","Role","setShow","onCloseModal","pathname","original","includes","pointerEvents","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","res","dismiss","success","Contact","previous","next","current_page","total_page","alertShow","setAlertShow","getCountry","breadCrumbItems","Card","Alert","onClose","dismissible","sm","display","flexDirection","alignItems","width","tableClass","visitPage","previous_number","next_number","ActionColumn","sendEmail","discount","toFixed","draftsOptions","waitingsOptions","approvesOptions","paidsOptions","dropDown","handleShow","Invoice","filteredIncoices","setFilteredInvoices","invoices","setActivePage","onClickEvent","Tab","Nav","as","Link","eventKey","invoicesColumns","servicesColumns","ContactDetails","useLocation","contactId","setContactId","invoiceSetting","setInvoiceSetting","invoice_list","invoice_list_pagination_data","contact_details","invoice_setting","invoice_setting_error","invoice_setting_success","services","Service","contact_services","parseInt","mystyle","invoiceSettingChange","checked","invoiceReminderSettingChange","reminder_settings","inputDate","setInputDate","md","xl","marginBottom","InputGroup","Text","Checkbox","auto_approve","auto_invoice_send","reminder_service","marginLeft","is_include_public_link","is_include_pdf_link","Check","reminder_type","marginTop","minimum_invoice_amount","days","day","newDays","indexOf","splice","deleteDay","cursor","size","controlId","daySubmit","newData","finalSubmit","ChangePassword","history","useHistory","old_password","setOldPassword","new_password","setNewPassword","confirm_password","setConfirmPassword","setError","fontWeight","textAlign","border","justifyContent","preventDefault","RoleForm","role","permission","setPermission","role_name","setRoleName","role_permission","setRolePermission","permissionsId","permissions","findIndex","x","handleChange","marginRight","BottomLink","PasswordReset","qString","search","getFullYear","PasswordResetSuccess","PrivateRoute","Component","component","roles","from","loggedInUser","Root","setContact","ServiceForm","oldItems","setOldItems","deletedItems","service_type","contact_mode","payment_terms","tax_rate","unit_price","items","setItems","newItems","setNewItems","contacts","all_contact","cloading","rloading","setRloading","setSuccess","ContactChange","forEach","onNewItemsChange","onOldItemsChange","allItems","setTimeout","goBack","onUpdate","striped","bordered","hover","backgroundColor","InvoiceForm","accounts","ChartAccount","chloading","invoice_details","invoiceNo","setInvoiceNo","invoiceId","setInvoiceId","date","setDate","due_date","setDueDate","reference","setReference","currency","tax_type","setTaxType","sub_total","setSubTotal","setDiscount","total_tax","setTotalTax","setStatus","total_amount","setTotalAmount","taxGroup","setTaxGroup","description","qty","account_id","tax_amount","parseFloat","groupOfTax","total_discount","total_subTotal","total_taxAmount","item_tax_amount","toString","totalAmount","invoice_no","formatDate","format","formatDueDate","onContactChange","account_name","readOnly","maxHeight","padding","fontSize","entries","InvoiceDetails","invoiceDetails","RepeatingInvoiceDetails","repeating_invoice_details","RepeatingInvoice","repeat_date","RepeatingInvoiceForm","setRepeatDate","tempData","max","repeating_invoices","defaultActiveKey","PublicInvoice","setInvoiceDetails","unique_id","URLSearchParams","xs","idx","Login","Logout","Confirm","ForgetPassword","Register","Dashboard","MyProfile","Users","SearchResults","Error404Alt","Error500Two","rootRoute","exact","route","Route","dashboardRoutes","AppRoutes","extrapagesRoutes","authRoutes","flattenRoutes","routes","flatRoutes","authProtectedRoutes","publicRoutes","authProtectedFlattenRoutes","publicProtectedFlattenRoutes","Routes","layoutCls","layoutType","getLayout","r","Default","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INIT_STATE","Auth","action","userLoggedIn","userSignUp","userLogout","registerError","passwordReset","passwordChange","resetPasswordSuccess","LAYOUT_COLOR_LIGHT","MENU_POSITION_FIXED","LEFT_SIDEBAR_THEME_LIGHT","TOPBAR_THEME_DARK","CHANGE_LAYOUT_WIDTH","layoutConfig","CHANGE_MENU_POSITIONS","CHANGE_SIDEBAR_THEME","TOGGLE_TWO_TONE_ICONS","users","User","results","total_object","newContact","currencies","Currency","combineReducers","login","signup","updateProfile","updateProfileImage","getRole","baseUrl","deleteContact","getService","addService","getCurrency","logout","watchLoginUser","watchLogout","watchSignup","watchUpdateProfile","watchUpdateProfileImage","authSaga","call","loginApi","signupApi","updateProfileApi","profile","updateProfileImageApi","takeEvery","fork","watchShowRightSidebar","watchHideRightSidebar","LayoutSaga","manageBodyClass","cssClass","toggle","watchGetUser","watchAddUser","userSaga","getUserApi","groups","is_active","addUserApi","watchGetRole","watchGetUserRole","roleSaga","getRoleApi","getUserRoleApi","watchGetContact","watchGetContactInvoice","watchGetContactInvoiceSetting","watchUpdateContactInvoiceSetting","watchGetContactDetails","watchGetAllContact","watchAddContact","watchDeleteContact","contactSaga","getContactApi","getContactInvoiceApi","getContactInvoiceSettingApi","updateContactInvoiceSettingApi","getContactDetailsApi","getAllContactApi","addContactApi","deleteContactApi","watchGetCountry","watchGetCity","locationSaga","getCountryApi","getCityApi","watchGetService","watchGetContactService","watchAddService","serviceSaga","getServiceApi","getContactServiceApi","service","addServiceApi","watchGetInvoice","watchGetInvoiceDetails","invoiceSaga","getInvoiceApi","getInvoiceDetailsApi","watchGetRepeatingInvoice","watchGetRepeatingInvoiceDetails","repeatingInvoiceSaga","getRepeatingInvoiceApi","getRepeatingInvoiceDetailsApi","watchGetCurrency","currencySaga","getCurrencyApi","watchGetChartAccount","charAccountSaga","getChartAccountApi","rootSaga","layoutSaga","chartAccountSaga","sagaMiddleware","createSagaMiddleware","middlewares","ReactDOM","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","localstore","createStore","reducers","applyMiddleware","run","configureStore","getElementById","GET_USER_REQUESTED","GET_USER_SUCCESS","GET_USER_FAILED","ADD_USER_REQUESTED","ADD_USER_SUCCESS","ADD_USER_FAILED","GET_ROLE_REQUESTED","GET_ROLE_SUCCESS","GET_ROLE_FAILED","GET_USERROLE_REQUESTED","GET_USERROLE_SUCCESS","GET_USERROLE_FAILED","GET_COUNTRY_REQUESTED","GET_COUNTRY_SUCCESS","GET_COUNTRY_FAILED","GET_CITY_REQUESTED","GET_CITY_SUCCESS","GET_CITY_FAILED","GET_INVOICE_REQUESTED","GET_INVOICE_SUCCESS","GET_INVOICE_FAILED","GET_INVOICEDETAILS_REQUESTED","GET_INVOICEDETAILS_SUCCESS","GET_INVOICEDETAILS_FAILED","GET_REPEATINGINVOICE_REQUESTED","GET_REPEATINGINVOICE_SUCCESS","GET_REPEATINGINVOICE_FAILED","GET_REPEATINGINVOICEDETAILS_REQUESTED","GET_REPEATINGINVOICEDETAILS_SUCCESS","GET_REPEATINGINVOICEDETAILS_FAILED","VerticalForm","formClass","noValidate","isArray","child","createElement","PasswordInput","refCallback","showPassword","setShowPassword","autoComplete","FormInput","comp"],"mappings":"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","file":"static/js/main.4d6561de.chunk.js","sourcesContent":["export const GET_CURRENCY_REQUESTED ='GET_CURRENCY_REQUESTED'\nexport const GET_CURRENCY_SUCCESS ='GET_CURRENCY_SUCCESS'\nexport const GET_CURRENCY_FAILED ='GET_CURRENCY_FAILED'\n\n\n\n\n\n\n\n","export const GET_CHARTACCOUNT_REQUESTED ='GET_CHARTACCOUNT_REQUESTED'\nexport const GET_CHARTACCOUNT_SUCCESS ='GET_CHARTACCOUNT_SUCCESS'\nexport const GET_CHARTACCOUNT_FAILED ='GET_CHARTACCOUNT_FAILED'\n\n\n\n\n\n\n\n","// constants\nimport { LayoutActionTypes } from './constants';\n\nexport interface LayoutActionType<TPayload> {\n    type:\n        | LayoutActionTypes.CHANGE_LAYOUT\n        | LayoutActionTypes.CHANGE_LAYOUT_COLOR\n        | LayoutActionTypes.CHANGE_LAYOUT_WIDTH\n        | LayoutActionTypes.CHANGE_MENU_POSITIONS\n        | LayoutActionTypes.CHANGE_SIDEBAR_THEME\n        | LayoutActionTypes.CHANGE_SIDEBAR_TYPE\n        | LayoutActionTypes.TOGGLE_SIDEBAR_USER_INFO\n        | LayoutActionTypes.CHANGE_TOPBAR_THEME\n        | LayoutActionTypes.TOGGLE_TWO_TONE_ICONS\n        | LayoutActionTypes.SHOW_RIGHT_SIDEBAR\n        | LayoutActionTypes.HIDE_RIGHT_SIDEBAR;\n    payload?: TPayload;\n}\n\nexport const changeLayout = (layout: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_LAYOUT,\n    payload: layout,\n});\n\nexport const changeLayoutColor = (color: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_LAYOUT_COLOR,\n    payload: color,\n});\n\nexport const changeLayoutWidth = (width: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_LAYOUT_WIDTH,\n    payload: width,\n});\n\nexport const changeMenuPositions = (position: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_MENU_POSITIONS,\n    payload: position,\n});\n\nexport const changeSidebarTheme = (sidebarTheme: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_SIDEBAR_THEME,\n    payload: sidebarTheme,\n});\n\nexport const changeSidebarType = (sidebarType: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_SIDEBAR_TYPE,\n    payload: sidebarType,\n});\n\nexport const toggleSidebarUserInfo = (showSidebarUserInfo: boolean): LayoutActionType<boolean> => ({\n    type: LayoutActionTypes.TOGGLE_SIDEBAR_USER_INFO,\n    payload: showSidebarUserInfo,\n});\n\nexport const changeTopbarTheme = (topbarTheme: string): LayoutActionType<string> => ({\n    type: LayoutActionTypes.CHANGE_TOPBAR_THEME,\n    payload: topbarTheme,\n});\n\nexport const toggleTwoToneIcons = (showTwoToneIcons: boolean): LayoutActionType<boolean> => ({\n    type: LayoutActionTypes.TOGGLE_TWO_TONE_ICONS,\n    payload: showTwoToneIcons,\n});\n\nexport const showRightSidebar = (): LayoutActionType<null> => ({\n    type: LayoutActionTypes.SHOW_RIGHT_SIDEBAR,\n});\n\nexport const hideRightSidebar = (): LayoutActionType<null> => ({\n    type: LayoutActionTypes.HIDE_RIGHT_SIDEBAR,\n});\n","import * as type from './types';\n\n\ninterface UserData {\n    id: number;\n    first_name: string;\n    last_name: string;\n    email: string;\n    password: string;\n    phone: string;\n    role: number;\n    is_active: boolean;\n}\n\nexport const getUser = (limit:number,page:number) => ({\n    type: type.GET_USER_REQUESTED,\n    payload: {limit,page},\n});\n\nexport const addUser = (formData: UserData) => ({\n    type: type.ADD_USER_REQUESTED,\n    payload: formData,\n});\n\n\n","import * as type from './types';\n\nexport const getRoles = (limit:number,page:number) => ({\n    type: type.GET_ROLE_REQUESTED,\n    payload: {limit,page},\n}); \n\nexport const getUserRole = () => ({\n    type: type.GET_USERROLE_REQUESTED,\n    payload: {},\n}); \n\n","import * as type from './types';\n\n\ninterface ContactForm {\n    name: string;\n    client_id: string;\n    contact_type: string;\n    contact_person: string;\n    phone: string;\n    email: string;\n    city: string;\n    country: string;\n    billing_address: string;\n}\n\nexport const getContact = (limit:number,page:number) => ({\n    type: type.GET_CONTACT_REQUESTED,\n    payload: {limit,page},\n});\n\nexport const getContactInvoice = (id:any, limit:any, page:any) => ({\n    type: type.GET_CONTACT_INVOICE_REQUESTED,\n    payload: {id, limit, page},\n});\n\nexport const getContactInvoiceSetting = (id:number) => ({\n    type: type.GET_CONTACT_INVOICE_SETTING_REQUESTED,\n    payload: id,\n});\n\nexport const getContactDetails = (id:number) =>{ \n    return ({\n    type: type.GET_CONTACT_DETAILS_REQUESTED,\n    payload: id,\n});}\n\n\nexport const updateContactInvoiceSetting = (data: any) => ({\n    type: type.UPDATE_CONTACT_INVOICE_SETTING_REQUESTED,\n    payload: data,\n});\n\n\nexport const getAllContact = () => ({\n    type: type.GET_ALLCONTACT_REQUESTED,\n    payload: {},\n});\n\nexport const addContact = (formData: ContactForm) => ({\n    type: type.ADD_CONTACT_REQUESTED,\n    payload: formData,\n});\n\nexport const deleteContact = (id: number) => ({\n    type: type.DELETE_CONTACT_REQUESTED,\n    payload: id,\n});","import * as type from './types';\n\n\ninterface ServiceForm {\n    service: any[];\n}\n\nexport const getService = (limit:number,page:number) => ({\n    type: type.GET_SERVICE_REQUESTED,\n    payload: {limit,page},\n});\n\nexport const getContactService = (contact_id:number) => ({\n    type: type.GET_CONTACTSERVICE_REQUESTED,\n    payload: {contact_id},\n});\n\nexport const addService = (service: ServiceForm) => ({\n    type: type.ADD_SERVICE_REQUESTED,\n    payload: service,\n});\n\n","import * as type from './types';\n\n\nexport const getInvoice = (limit:number,page:number) => ({\n    type: type.GET_INVOICE_REQUESTED,\n    payload: {limit,page},\n});\n\nexport const getInvoiceDetails = (id:number) => ({\n    type: type.GET_INVOICEDETAILS_REQUESTED,\n    payload: id,\n});\n\n\n\n\n","import * as type from './types';\n\n\nexport const getRepeatingInvoice = (limit:number,page:number) => ({\n    type: type.GET_REPEATINGINVOICE_REQUESTED,\n    payload: {limit,page},\n});\n\nexport const getRepeatingInvoiceDetails = (id:number) => ({\n    type: type.GET_REPEATINGINVOICEDETAILS_REQUESTED,\n    payload: id,\n});\n\n\n\n\n","import * as type from './types';\n\n\nexport const getChartAccount = () => ({\n    type: type.GET_CHARTACCOUNT_REQUESTED,\n    payload: {},\n});\n\n\n\n\n\n\n","import React, { useEffect } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\n\nimport CCL_Logo from '../../assets/images/ccl.jpg';\n\n\n\ninterface AccountLayoutProps {\n    helpText?: string;\n    bottomLinks?: any;\n    isCombineForm?: boolean;\n    children?: any;\n}\n\nconst AuthLayout = ({ helpText, bottomLinks, children, isCombineForm }: AccountLayoutProps) => {\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (document.body) document.body.classList.remove('authentication-bg', 'authentication-bg-pattern');\n        if (document.body) document.body.classList.add('auth-fluid-pages', 'pb-0');\n\n        return () => {\n            if (document.body) document.body.classList.remove('auth-fluid-pages', 'pb-0');\n        };\n    }, []);\n\n    return (\n        <>\n            <div className=\"auth-fluid\">\n                {/* Auth fluid left content */}\n                <div className=\"auth-fluid-form-box\">\n                    <div className=\"align-items-center d-flex h-100\">\n                        <Card.Body>\n                            {/* logo */}\n                            <div className=\"auth-brand text-center text-lg-start\">\n                                <div className=\"auth-logo\">\n                                    <Link to=\"/\" className=\"logo logo-dark text-center outline-none\">\n                                        <span className=\"logo-lg\">\n                                            <img src={CCL_Logo} alt=\"\" height=\"90\" />\n                                        </span>\n                                    </Link>\n\n                                    <Link to=\"/\" className=\"logo logo-light text-center\">\n                                        <span className=\"logo-lg\">\n                                            <img src={CCL_Logo} alt=\"\" height=\"90\" />\n                                        </span>\n                                    </Link>\n                                </div>\n                            </div>\n\n                            {children}\n\n                            {/* footer links */}\n                            {bottomLinks}\n                        </Card.Body>\n                    </div>\n                </div>\n\n                {/* Auth fluid right content */}\n                <div className=\"auth-fluid-right text-center\">\n                    <div className=\"auth-user-testimonial\">\n                        <h2 className=\"mb-3 text-white\">{t('I love the color!')}</h2>\n                        <p className=\"lead\">\n                            <i className=\"mdi mdi-format-quote-open\"></i>{' '}\n                            {t(\n                                \"I've been using your theme from the previous developer for our web app, once I knew new version is out, I immediately bought with no hesitation. Great themes, good documentation with lots of customization available and sample app that really fit our need.\"\n                            )}{' '}\n                            <i className=\"mdi mdi-format-quote-close\"></i>\n                        </p>\n                        <h5 className=\"text-white\">{t('- Fadlisaad (Ubold Admin User)')}</h5>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default AuthLayout;\n","import axios from 'axios';\n\nimport config from '../../config';\n\n// content type\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.baseURL = config.API_URL;\n\n// intercepting to capture errors\n\naxios.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // Any status codes that falls outside the range of 2xx cause this function to trigger\n        let message;\n\n        if (\n\t\t\terror.response.data.code === 'token_not_valid' &&\n\t\t\terror.response.status === 401 &&\n\t\t\terror.response.statusText === 'Unauthorized'\n\t\t) {\n\t\t\tconst userInfo = JSON.parse(localStorage.getItem(AUTH_TOKEN_KEY) || '');\n                        \n            const refreshToken = userInfo.refresh\n\t\t\tif (refreshToken) {\n\t\t\t\tconst tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n\t\t\t\t// exp date in token is expressed in seconds, while now() returns milliseconds:\n\t\t\t\tconst now = Math.ceil(Date.now() / 1000);\n\t\t\t\tconsole.log(tokenParts.exp);\n\n\t\t\t\tif (tokenParts.exp > now) {\n\t\t\t\t\treturn axios\n\t\t\t\t\t\t.post('/api/token/refresh/', { refresh: refreshToken })\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tconst newUpdateUserInfo = {\n                                ...userInfo,\n                                \"access\": response.data.access\n                            }\n                            localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(newUpdateUserInfo));\n                            \n\t\t\t\t\t\t\taxios.defaults.headers.common['Authorization'] = 'Bearer ' + response.data.access;\n                            window.location.href = '/';\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Refresh token is expired', tokenParts.exp, now);\n                    localStorage.removeItem(AUTH_TOKEN_KEY)\n\t\t\t\t\twindow.location.href = '/auth/login/';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('Refresh token not available.');\n\t\t\t\twindow.location.href = '/auth/login/';\n\t\t\t}\n\t\t}\n        else if (error && error.response && error.response.status === 404) {\n            // window.location.href = '/not-found';\n        } else if (error && error.response && error.response.status === 403) {\n            window.location.href = '/access-denied';\n        } else {\n            switch (error.response.status) {\n                case 401:\n                    message = 'Invalid credentials';\n                    break;\n                case 403:\n                    message = 'Access Forbidden';\n                    break;\n                case 404:\n                    message = 'Sorry! the data you are looking for could not be found';\n                    break;\n                default: {\n                    message =\n                        error.response && error.response.data ? error.response.data['message'] : error.message || error;\n                }\n            }\n            return Promise.reject(message);\n        }\n    }\n);\n\nconst AUTH_TOKEN_KEY = 'ccl_user';\n\n\n/**\n * Sets the default authorization\n * @param {*} token\n */\nconst setAuthorization = (token: string | null) => {\n    if (token) axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    else delete axios.defaults.headers.common['Authorization'];\n};\n\nconst getUserFromCookie = () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    return token ? (typeof token == 'object' ? token : JSON.parse(token)) : null;\n};\nclass APICore {\n    /**\n     * Fetches data from given url\n     */\n    get = (url: string, params: any) => {\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, params);\n        } else {\n            response = axios.get(`${url}`);\n        }\n        return response;\n    };\n\n    getFile = (url: string, params: any) => {\n        let response;\n        if (params) {\n            var queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n            response = axios.get(`${url}?${queryString}`, { responseType: 'blob' });\n        } else {\n            response = axios.get(`${url}`, { responseType: 'blob' });\n        }\n        return response;\n    };\n\n    getMultiple = (urls: string, params: any) => {\n        const reqs = [];\n        let queryString = '';\n        if (params) {\n            queryString = params\n                ? Object.keys(params)\n                      .map((key) => key + '=' + params[key])\n                      .join('&')\n                : '';\n        }\n\n        for (const url of urls) {\n            reqs.push(axios.get(`${url}?${queryString}`));\n        }\n        return axios.all(reqs);\n    };\n\n    /**\n     * post given data to url\n     */\n    create = (url: string, data: any) => {\n        return axios.post(url, data);\n    };\n\n    /**\n     * Updates patch data\n     */\n    updatePatch = (url: string, data: any) => {\n        return axios.patch(url, data);\n    };\n\n    /**\n     * Updates data\n     */\n    update = (url: string, data: any) => {\n        return axios.put(url, data);\n    };\n\n    /**\n     * Deletes data\n     */\n    delete = (url: string) => {\n        return axios.delete(url);\n    };\n\n    /**\n     * post given data to url with file\n     */\n    createWithFile = (url: string, data: any) => {\n        const formData = new FormData();\n        for (const k in data) {\n            formData.append(k, data[k]);\n        }\n\n        const config = {\n            headers: {\n                ...axios.defaults.headers,\n                'content-type': 'multipart/form-data',\n            },\n        };\n        return axios.post(url, formData, config);\n    };\n\n    /**\n     * post given data to url with file\n     */\n    updateWithFile = (url: string, data: any) => {\n        const formData = new FormData();\n        for (const k in data) {\n            formData.append(k, data[k]);\n        }\n\n        const config = {\n            headers: {\n                ...axios.defaults.headers,\n                'content-type': 'multipart/form-data',\n            },\n        };\n        return axios.patch(url, formData, config);\n    };\n\n    isUserAuthenticated = () => {\n        const token = this.getLoggedInUser();\n\n        if (token) {\n            return true;\n        }else{\n            return false\n        }\n       \n    };\n\n    setLoggedInUser = (user: any) => {\n        if (user){\n            localStorage.setItem(AUTH_TOKEN_KEY, JSON.stringify(user));\n        } \n        else {\n            localStorage.removeItem(AUTH_TOKEN_KEY);\n        }\n    };\n    /**\n     * Returns the logged in user\n     */\n    getLoggedInUser = () => {\n        return getUserFromCookie();\n    };\n\n    // setUserInSession = (modifiedUser: any) => {\n    //     let userInfo = localStorage.getItem(AUTH_TOKEN_KEY);\n    //     if (userInfo) {\n    //         const { access, user } = JSON.parse(userInfo);\n    //         this.setLoggedInUser({ access, ...user, ...modifiedUser });\n    //     }\n    // };\n}\n\n/*\nCheck if token available in session\n*/\nlet user = getUserFromCookie();\nif (user) {\n    const { access } = user;\n    if (access) {\n        setAuthorization(access);\n    }\n}\n\nexport { APICore, setAuthorization };\n","const config = {\n    API_URL: process.env.REACT_APP_API_URL,\n};\n\nexport default config;\n","export enum AuthActionTypes {\n    API_RESPONSE_SUCCESS = '@@auth/API_RESPONSE_SUCCESS',\n    API_RESPONSE_ERROR = '@@auth/API_RESPONSE_ERROR',\n\n    LOGIN_USER = '@@auth/LOGIN_USER',\n    LOGOUT_USER = '@@auth/LOGOUT_USER',\n    SIGNUP_USER = '@@auth/SIGNUP_USER',\n\n\n    RESET = '@@auth/RESET',\n    UPDATE_PROFILE = '@@auth/UPDATE_PROFILE',\n    UPDATE_PROFILE_IMAGE = '@@auth/UPDATE_PROFILE_IMAGE',\n}\n","const groupByFields = (array: Array<any>, f: any): Array<any> => {\n    /*\n    params description :\n        f : function which returnf the array of fields \n        e.g. :  (item) => {\n            return [itemField1, itemField2];\n        }\n        array : array of data to group e.g. : [{...}, {...}]       \n    */\n    var groups: { [key: string]: any[] } = {};\n    array.forEach((o) => {\n        var group = JSON.stringify(f(o));\n        groups[group] = groups[group] || [];\n        groups[group].push(o);\n    });\n\n    return Object.keys(groups).map((group) => {\n        return groups[group];\n    });\n};\n\n/**\n * split array into chunks\n * @param array - array to split\n * @param chunkSize - chunk size\n * @returns\n */\nconst splitArray = (array: Array<any>, chunkSize: number) => {\n    const chunks = Array(Math.ceil(array.length / chunkSize))\n        .fill(1)\n        .map((_, index) => index * chunkSize)\n        .map((begin) => array.slice(begin, begin + chunkSize));\n    return chunks;\n};\n\nexport { groupByFields, splitArray };\n","// app constants\nimport { SideBarTypes, LayoutWidth } from '../constants';\n\ninterface ConfigTypes {\n    leftSideBarType:\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT;\n}\n\nconst getLayoutConfigs = (layoutWidth: string | boolean | null) => {\n    // add property to change in particular layoutWidth\n    let config: ConfigTypes = {\n        leftSideBarType: SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT,\n    };\n\n    switch (layoutWidth) {\n        case LayoutWidth.LAYOUT_WIDTH_FLUID:\n            config.leftSideBarType = SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT;\n            break;\n        case LayoutWidth.LAYOUT_WIDTH_BOXED:\n            config.leftSideBarType = SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED;\n            break;\n        default:\n            return config;\n    }\n    return config;\n};\n\n/**\n * Changes the body attribute\n */\nconst changeBodyAttribute = (attribute: string, value: string): void => {\n    if (document.body) document.body.setAttribute(attribute, value);\n};\n\nexport { getLayoutConfigs, changeBodyAttribute };\n","export default __webpack_public_path__ + \"static/media/ccl.e18742bc.jpg\";","export const GET_CONTACT_REQUESTED ='GET_CONTACT_REQUESTED'\nexport const GET_CONTACT_SUCCESS ='GET_CONTACT_SUCCESS'\nexport const GET_CONTACT_FAILED ='GET_CONTACT_FAILED'\n\nexport const GET_CONTACT_DETAILS_REQUESTED ='GET_CONTACT_DETAILS_REQUESTED'\nexport const GET_CONTACT_DETAILS_SUCCESS ='GET_CONTACT_DETAILS_SUCCESS'\nexport const GET_CONTACT_DETAILS_FAILED ='GET_CONTACT_DETAILS_FAILED'\n\nexport const GET_CONTACT_INVOICE_REQUESTED ='GET_CONTACT_INVOICE_REQUESTED'\nexport const GET_CONTACT_INVOICE_SUCCESS ='GET_CONTACT_INVOICE_SUCCESS'\nexport const GET_CONTACT_INVOICE_FAILED ='GET_CONTACT_INVOICE_FAILED'\n\nexport const GET_CONTACT_INVOICE_SETTING_REQUESTED ='GET_CONTACT_INVOICE_SETTING_REQUESTED'\nexport const GET_CONTACT_INVOICE_SETTING_SUCCESS ='GET_CONTACT_INVOICE_SETTING_SUCCESS'\nexport const GET_CONTACT_INVOICE_SETTING_FAILED ='GET_CONTACT_INVOICE_SETTING_FAILED'\n\nexport const UPDATE_CONTACT_INVOICE_SETTING_REQUESTED ='UPDATE_CONTACT_INVOICE_SETTING_REQUESTED'\nexport const UPDATE_CONTACT_INVOICE_SETTING_SUCCESS ='UPDATE_CONTACT_INVOICE_SETTING_SUCCESS'\nexport const UPDATE_CONTACT_INVOICE_SETTING_FAILED ='UPDATE_CONTACT_INVOICE_SETTING_FAILED'\n\nexport const GET_ALLCONTACT_REQUESTED ='GET_ALLCONTACT_REQUESTED'\nexport const GET_ALLCONTACT_SUCCESS ='GET_ALLCONTACT_SUCCESS'\nexport const GET_ALLCONTACT_FAILED ='GET_ALLCONTACT_FAILED'\n\nexport const ADD_CONTACT_REQUESTED ='ADD_CONTACT_REQUESTED'\nexport const ADD_CONTACT_SUCCESS ='ADD_CONTACT_SUCCESS'\nexport const ADD_CONTACT_FAILED ='ADD_CONTACT_FAILED'\n\nexport const DELETE_CONTACT_REQUESTED ='DELETE_CONTACT_REQUESTED'\nexport const DELETE_CONTACT_SUCCESS ='DELETE_CONTACT_SUCCESS'\nexport const DELETE_CONTACT_FAILED ='DELETE_CONTACT_FAILED'\n\n\n\n","// constants\nimport {\n    LayoutTypes,\n    LayoutColor,\n    LayoutWidth,\n    MenuPositions,\n    SideBarTheme,\n    SideBarTypes,\n    TopbarTheme,\n} from '../../constants/layout';\n\nenum LayoutActionTypes {\n    CHANGE_LAYOUT = '@@layout/CHANGE_LAYOUT',\n    CHANGE_LAYOUT_COLOR = '@@layout/CHANGE_LAYOUT_COLOR',\n    CHANGE_LAYOUT_WIDTH = '@@layout/CHANGE_LAYOUT_WIDTH',\n    CHANGE_MENU_POSITIONS = '@@layout/CHANGE_MENU_POSITIONS',\n    CHANGE_SIDEBAR_THEME = '@@layout/CHANGE_SIDEBAR_THEME',\n    CHANGE_SIDEBAR_TYPE = '@@layout/CHANGE_SIDEBAR_TYPE',\n    TOGGLE_SIDEBAR_USER_INFO = '@@layout/TOGGLE_SIDEBAR_USER_INFO',\n    CHANGE_TOPBAR_THEME = '@@layout/CHANGE_TOPBAR_THEME',\n\n    TOGGLE_TWO_TONE_ICONS = '@@layout/TOGGLE_TWO_TONE_ICONS',\n    SHOW_RIGHT_SIDEBAR = '@@layout/SHOW_RIGHT_SIDEBAR',\n    HIDE_RIGHT_SIDEBAR = '@@layout/HIDE_RIGHT_SIDEBAR',\n}\n\nexport interface LayoutStateTypes {\n    layoutType:\n        | LayoutTypes.LAYOUT_VERTICAL\n        | LayoutTypes.LAYOUT_TWO_COLUMN\n        | LayoutTypes.LAYOUT_DETACHED\n        | LayoutTypes.LAYOUT_HORIZONTAL;\n    layoutColor: LayoutColor.LAYOUT_COLOR_LIGHT | LayoutColor.LAYOUT_COLOR_DARK;\n    layoutWidth: LayoutWidth.LAYOUT_WIDTH_FLUID | LayoutWidth.LAYOUT_WIDTH_BOXED;\n    menuPosition: MenuPositions.MENU_POSITION_FIXED | MenuPositions.MENU_POSITION_SCROLLABLE;\n    leftSideBarTheme:\n        | SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT\n        | SideBarTheme.LEFT_SIDEBAR_THEME_DARK\n        | SideBarTheme.LEFT_SIDEBAR_THEME_BRAND\n        | SideBarTheme.LEFT_SIDEBAR_THEME_GRADIENT;\n    leftSideBarType:\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED\n        | SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT;\n    showTwoToneIcons: boolean;\n    showSidebarUserInfo: boolean;\n    topbarTheme: TopbarTheme.TOPBAR_THEME_LIGHT | TopbarTheme.TOPBAR_THEME_DARK;\n    isOpenRightSideBar: boolean;\n}\n\nexport { LayoutActionTypes };\n","import React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\ninterface BreadcrumbItems {\n    label: string;\n    path: string;\n    active?: boolean;\n}\n\ninterface PageTitleProps {\n    breadCrumbItems: Array<BreadcrumbItems>;\n    title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb className=\"m-0\">\n                            <Breadcrumb.Item href=\"/\">CCL</Breadcrumb.Item>\n\n                            {(props['breadCrumbItems'] || []).map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index}>\n                                        <Link to={item.path}>\n                                            {item.label}\n                                        </Link>\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props['title']}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","/* Layout types and other constants */\n\nexport enum LayoutTypes {\n    LAYOUT_VERTICAL = 'vertical',\n    LAYOUT_HORIZONTAL = 'horizontal',\n    LAYOUT_DETACHED = 'detached',\n    LAYOUT_TWO_COLUMN = 'two-column',\n}\n\nexport enum LayoutColor {\n    LAYOUT_COLOR_LIGHT = 'light',\n    LAYOUT_COLOR_DARK = 'dark',\n}\n\nexport enum LayoutWidth {\n    LAYOUT_WIDTH_FLUID = 'fluid',\n    LAYOUT_WIDTH_BOXED = 'boxed',\n}\n\nexport enum MenuPositions {\n    MENU_POSITION_FIXED = 'fixed',\n    MENU_POSITION_SCROLLABLE = 'scrollable',\n}\n\nexport enum SideBarTheme {\n    LEFT_SIDEBAR_THEME_LIGHT = 'light',\n    LEFT_SIDEBAR_THEME_DARK = 'dark',\n    LEFT_SIDEBAR_THEME_BRAND = 'brand',\n    LEFT_SIDEBAR_THEME_GRADIENT = 'gradient',\n}\n\nexport enum SideBarTypes {\n    LEFT_SIDEBAR_TYPE_DEFAULT = 'default',\n    LEFT_SIDEBAR_TYPE_CONDENSED = 'condensed',\n    LEFT_SIDEBAR_TYPE_COMPACT = 'compact',\n}\n\nexport enum TopbarTheme {\n    TOPBAR_THEME_LIGHT = 'light',\n    TOPBAR_THEME_DARK = 'dark',\n}\n","// constants\nimport { AuthActionTypes } from './constants';\n\nexport interface AuthActionType {\n    type:\n        | AuthActionTypes.API_RESPONSE_SUCCESS\n        | AuthActionTypes.API_RESPONSE_ERROR\n        | AuthActionTypes.LOGIN_USER\n        | AuthActionTypes.LOGOUT_USER\n        | AuthActionTypes.RESET\n        | AuthActionTypes.SIGNUP_USER\n        | AuthActionTypes.UPDATE_PROFILE\n        | AuthActionTypes.UPDATE_PROFILE_IMAGE\n    payload: {} | string;\n}\n\ninterface UserData {\n    id: number;\n    email: string;\n    phone: string;\n    password: string;\n    first_name: string;\n    last_name: string;\n    profile_image: File;\n    role: string;\n    token: string;\n}\n\n// common success\nexport const authApiResponseSuccess = (actionType: string, data: UserData | {}): AuthActionType => ({\n    type: AuthActionTypes.API_RESPONSE_SUCCESS,\n    payload: { actionType, data },\n});\n// common error\nexport const authApiResponseError = (actionType: string, error: string): AuthActionType => ({\n    type: AuthActionTypes.API_RESPONSE_ERROR,\n    payload: { actionType, error },\n});\n\nexport const loginUser = (email: string, password: string): AuthActionType => ({\n    type: AuthActionTypes.LOGIN_USER,\n    payload: { email, password },\n});\n\nexport const logoutUser = (): AuthActionType => ({\n    type: AuthActionTypes.LOGOUT_USER,\n    payload: {},\n});\n\nexport const signupUser = (first_name: string, last_name: string, email: string,phone: string, password: string): AuthActionType => ({\n    type: AuthActionTypes.SIGNUP_USER,\n    payload: { first_name,last_name, email,phone, password },\n});\n\n\n\nexport const resetAuth = (): AuthActionType => ({\n    type: AuthActionTypes.RESET,\n    payload: {},\n});\n\nexport const UpdateProfile = (formData:UserData): AuthActionType => ({\n    type: AuthActionTypes.UPDATE_PROFILE,\n    payload: formData,\n});\n\nexport const UpdateProfileImage = (profile_image:File): AuthActionType => ({\n    type: AuthActionTypes.UPDATE_PROFILE_IMAGE,\n    payload: profile_image,\n});\n","export * from './layout';\n","export const GET_SERVICE_REQUESTED ='GET_SERVICE_REQUESTED'\nexport const GET_SERVICE_SUCCESS ='GET_SERVICE_SUCCESS'\nexport const GET_SERVICE_FAILED ='GET_SERVICE_FAILED'\n\nexport const GET_CONTACTSERVICE_REQUESTED ='GET_CONTACTSERVICE_REQUESTED'\nexport const GET_CONTACTSERVICE_SUCCESS ='GET_CONTACTSERVICE_SUCCESS'\nexport const GET_CONTACTSERVICE_FAILED ='GET_CONTACTSERVICE_FAILED'\n\nexport const ADD_SERVICE_REQUESTED ='ADD_SERVICE_REQUESTED'\nexport const ADD_SERVICE_SUCCESS ='ADD_SERVICE_SUCCESS'\nexport const ADD_SERVICE_FAILED ='ADD_SERVICE_FAILED'\n\n\n\n\n\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\ninterface PaginationProps {\n    tableProps: any;\n    sizePerPageList: {\n        text: string;\n        value: number;\n    }[];\n}\n\nconst Pagination = ({ tableProps, sizePerPageList }: PaginationProps) => {\n    /**\n     * pagination count , index\n     */\n    const [pageCount, setPageCount] = useState<number>(tableProps.pageCount);\n    const [pageIndex, setPageIndex] = useState<number>(tableProps.state.pageIndex);\n\n    useEffect(() => {\n        setPageCount(tableProps.pageCount);\n        setPageIndex(tableProps.state.pageIndex);\n    }, [tableProps.pageCount, tableProps.state.pageIndex]);\n\n    /**\n     * get filter pages\n     */\n    const filterPages = useCallback(\n        (visiblePages: any, totalPages: number) => {\n            return visiblePages.filter((page: any) => page <= pageCount);\n        },\n        [pageCount]\n    );\n\n    /**\n     * handle visible pages\n     */\n    const getVisiblePages = useCallback(\n        (page: number | null, total: number) => {\n            if (total < 7) {\n                return filterPages([1, 2, 3, 4, 5, 6], total);\n            } else {\n                if (page! % 5 >= 0 && page! > 4 && page! + 2 < total) {\n                    return [1, page! - 1, page!, page! + 1, total];\n                } else if (page! % 5 >= 0 && page! > 4 && page! + 2 >= total) {\n                    return [1, total - 3, total - 2, total - 1, total];\n                } else {\n                    return [1, 2, 3, 4, 5, total];\n                }\n            }\n        },\n        [filterPages]\n    );\n\n    /**\n     * handle page change\n     * @param page - current page\n     * @returns\n     */\n    const changePage = (page: number) => {\n        const activePage = pageIndex + 1;\n\n        if (page === activePage) {\n            return;\n        }\n\n        const visiblePages = getVisiblePages(page, pageCount);\n        setVisiblePages(filterPages(visiblePages, pageCount));\n\n        tableProps.gotoPage(page - 1);\n    };\n\n    useEffect(() => {\n        const visiblePages = getVisiblePages(null, pageCount);\n        setVisiblePages(visiblePages);\n    }, [pageCount, getVisiblePages]);\n\n    const [visiblePages, setVisiblePages] = useState<number[]>(getVisiblePages(null, pageCount));\n    const activePage: number = pageIndex + 1;\n\n    return (\n        <>\n            <div className=\"d-lg-flex align-items-center text-center pb-1\">\n                {sizePerPageList.length > 0 && (\n                    <div className=\"d-inline-block me-3\">\n                        <label className=\"me-1\">Display :</label>\n                        <select\n                            value={tableProps.state.pageSize}\n                            onChange={(e: any) => {\n                                tableProps.setPageSize(Number(e.target.value));\n                            }}\n                            className=\"form-select d-inline-block w-auto\"\n                        >\n                            {(sizePerPageList || []).map((pageSize, index) => {\n                                return (\n                                    <option key={index} value={pageSize.value}>\n                                        {pageSize.text}\n                                    </option>\n                                );\n                            })}\n                        </select>\n                    </div>\n                )}\n\n                <span className=\"me-3\">\n                    Page{' '}\n                    <strong>\n                        {pageIndex + 1} of {tableProps.pageOptions.length}\n                    </strong>{' '}\n                </span>\n\n                <span className=\"d-inline-block align-items-center text-sm-start text-center my-sm-0 my-2\">\n                    <label className=\"form-label\">Go to page : </label>\n                    <input\n                        type=\"number\"\n                        value={pageIndex + 1}\n                        min=\"1\"\n                        onChange={(e: any) => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                            tableProps.gotoPage(page);\n                            setPageIndex(tableProps.state.pageIndex);\n                        }}\n                        className=\"form-control w-25 ms-1 d-inline-block\"\n                    />\n                </span>\n\n                <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n                    <li\n                        key=\"prevpage\"\n                        className={classNames('page-item', 'paginate_button', 'previous', {\n                            disabled: activePage === 1,\n                        })}\n                        onClick={() => {\n                            if (activePage === 1) return;\n                            changePage(activePage - 1);\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-left\"></i>\n                        </Link>\n                    </li>\n                    {(visiblePages || []).map((page, index, array) => {\n                        return array[index - 1] + 1 < page ? (\n                            <React.Fragment key={page}>\n                                <li className=\"page-item disabled d-none d-xl-inline-block\">\n                                    <Link to=\"#\" className=\"page-link\">\n                                        ...\n                                    </Link>\n                                </li>\n                                <li\n                                    className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                        active: activePage === page,\n                                    })}\n                                    onClick={(e: any) => changePage(page)}\n                                >\n                                    <Link to=\"#\" className=\"page-link\">\n                                        {page}\n                                    </Link>\n                                </li>\n                            </React.Fragment>\n                        ) : (\n                            <li\n                                key={page}\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                    active: activePage === page,\n                                })}\n                                onClick={(e: any) => changePage(page)}\n                            >\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                    <li\n                        key=\"nextpage\"\n                        className={classNames('page-item', 'paginate_button', 'next', {\n                            disabled: activePage === tableProps.pageCount,\n                        })}\n                        onClick={() => {\n                            if (activePage === tableProps.pageCount) return;\n                            changePage(activePage + 1);\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-right\"></i>\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default Pagination;\n","import React, { useRef, useEffect, forwardRef, useState } from 'react';\nimport {\n    useTable,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    useGlobalFilter,\n    useAsyncDebounce,\n    useExpanded,\n} from 'react-table';\nimport classNames from 'classnames';\n\n\n// components\nimport Pagination from './Pagination';\n\ninterface GlobalFilterProps {\n    preGlobalFilteredRows: any;\n    globalFilter: any;\n    setGlobalFilter: any;\n    searchBoxClass: any;\n}\n\n// Define a default UI for filtering\nconst GlobalFilter = ({ preGlobalFilteredRows, globalFilter, setGlobalFilter, searchBoxClass }: GlobalFilterProps) => {\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = useState<any>(globalFilter);\n    const onChange = useAsyncDebounce((value) => {\n        setGlobalFilter(value || undefined);\n    }, 200);\n\n    return (\n        <div className={classNames(searchBoxClass)}>\n            <span className=\"d-flex align-items-center justify-content-end\">\n                Search :{' '}\n                <input\n                    type=\"search\"\n                    value={value || ''}\n                    onChange={(e: any) => {\n                        setValue(e.target.value);\n                        onChange(e.target.value);\n                    }}\n                    placeholder={`${count} records...`}\n                    className=\"form-control w-auto ms-1\"\n                />\n            </span>\n        </div>\n    );\n};\n\ninterface IndeterminateCheckboxProps {\n    indeterminate: any;\n    children?: React.ReactNode;\n}\n\nconst IndeterminateCheckbox = forwardRef<HTMLInputElement, IndeterminateCheckboxProps>(\n    ({ indeterminate, ...rest }, ref) => {\n        const defaultRef = useRef();\n        const resolvedRef: any = ref || defaultRef;\n\n        useEffect(() => {\n            resolvedRef.current.indeterminate = indeterminate;\n        }, [resolvedRef, indeterminate]);\n\n        return (\n            <>\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" ref={resolvedRef} {...rest} />\n                    <label htmlFor=\"form-check-input\" className=\"form-check-label\"></label>\n                </div>\n            </>\n        );\n    }\n);\n\ninterface TableProps {\n    isSearchable?: boolean;\n    isSortable?: boolean;\n    pagination?: boolean;\n    isSelectable?: boolean;\n    isExpandable?: boolean;\n    sizePerPageList?: {\n        text: string;\n        value: number;\n    }[];\n    columns: {\n        Header: string; \n        accessor: string;\n        sort?: boolean;\n        Cell?: any;\n        className?: string;\n    }[];\n    data: any[];\n    pageSize?: any;\n    searchBoxClass?: string;\n    tableClass?: string;\n    theadClass?: string;\n    \n}\n\nconst Table = (props: TableProps) => {\n\n     \n\n    const isSearchable = props['isSearchable'] || false;\n    const isSortable = props['isSortable'] || false;\n    const pagination = props['pagination'] || false;\n    const isSelectable = props['isSelectable'] || false;\n    const isExpandable = props['isExpandable'] || false;\n    const sizePerPageList = props['sizePerPageList'] || [];\n\n    let otherProps: any = {};\n\n    if (isSearchable) {\n        otherProps['useGlobalFilter'] = useGlobalFilter;\n    }\n    if (isSortable) {\n        otherProps['useSortBy'] = useSortBy;\n    }\n    if (isExpandable) {\n        otherProps['useExpanded'] = useExpanded;\n    }\n    if (pagination) {\n        otherProps['usePagination'] = usePagination;\n    }\n    if (isSelectable) {\n        otherProps['useRowSelect'] = useRowSelect;\n    }\n\n    const dataTable = useTable(\n        {\n            columns: props['columns'],\n            data: props['data'],\n            initialState: { pageSize: props['pageSize'] || 10 },\n        },\n        otherProps.hasOwnProperty('useGlobalFilter') && otherProps['useGlobalFilter'],\n        otherProps.hasOwnProperty('useSortBy') && otherProps['useSortBy'],\n        otherProps.hasOwnProperty('useExpanded') && otherProps['useExpanded'],\n        otherProps.hasOwnProperty('usePagination') && otherProps['usePagination'],\n        otherProps.hasOwnProperty('useRowSelect') && otherProps['useRowSelect'],\n        (hooks) => {\n            isSelectable &&\n                hooks.visibleColumns.push((columns: any) => [\n                    // Let's make a column for selection\n                    {\n                        id: 'selection',\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllPageRowsSelectedProps }: any) => (\n                            <div>\n                                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }: any) => (\n                            <div>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        ),\n                    },\n                    ...columns,\n                ]);\n\n            isExpandable &&\n                hooks.visibleColumns.push((columns: any) => [\n                    // Let's make a column for selection\n                    {\n                        // Build our expander column\n                        id: 'expander', // Make sure it has an ID\n                        Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }: any) => (\n                            <span {...getToggleAllRowsExpandedProps()}>{isAllRowsExpanded ? '-' : '+'}</span>\n                        ),\n                        Cell: ({ row }) =>\n                            // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n                            // to build the toggle for expanding a row\n                            row.canExpand ? (\n                                <span\n                                    {...row.getToggleRowExpandedProps({\n                                        style: {\n                                            // We can even use the row.depth property\n                                            // and paddingLeft to indicate the depth\n                                            // of the row\n                                            paddingLeft: `${row.depth * 2}rem`,\n                                        },\n                                    })}\n                                >\n                                    {row.isExpanded ? '-' : '+'}\n                                </span>\n                            ) : null,\n                    },\n                    ...columns,\n                ]);\n        }\n    );\n\n    let rows = pagination ? dataTable.page : dataTable.rows;\n\n    return (\n        <>\n            <div>\n                {isSearchable && (\n                    <GlobalFilter\n                        preGlobalFilteredRows={dataTable.preGlobalFilteredRows}\n                        globalFilter={dataTable.state.globalFilter}\n                        setGlobalFilter={dataTable.setGlobalFilter}\n                        searchBoxClass={props['searchBoxClass']}\n                    />\n                )}\n            </div>\n            \n\n            <div className=\"table-responsive\">\n                <table\n                    {...dataTable.getTableProps()}\n                    className={classNames('table table-centered react-table', props['tableClass'])}\n                >\n                    <thead className={props['theadClass']}>\n                        {(dataTable.headerGroups || []).map((headerGroup: any) => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {(headerGroup.headers || []).map((column: any) => (\n                                    <th\n                                        {...column.getHeaderProps(column.sort && column.getSortByToggleProps())}\n                                        className={classNames({\n                                            sorting_desc: column.isSortedDesc === true,\n                                            sorting_asc: column.isSortedDesc === false,\n                                            sortable: column.sort === true,\n                                        })}\n                                    >\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...dataTable.getTableBodyProps()}>\n                        {(rows || []).map((row: any, i: number) => {\n                            dataTable.prepareRow(row);\n                            return (\n                                <tr {...row.getRowProps()}>\n                                    {(row.cells || []).map((cell: any) => {\n                                        return (\n                                            <td\n                                                {...cell.getCellProps([\n                                                    {\n                                                        className: cell.column.className,\n                                                    },\n                                                ])}\n                                            >\n                                                {cell.render('Cell')}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n            {pagination && <Pagination tableProps={dataTable} sizePerPageList={sizePerPageList} />}\n\n            \n        </>\n    );\n};\n\nexport default Table;\n","import i18n from 'i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nimport translationEs from './locales/es/translation.json';\n\n//translations\nconst resources = {\n    es: {\n        translation: translationEs,\n    },\n};\n\ni18n.use(detector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        lng: 'en',\n        fallbackLng: 'en', // use en if detected lng is not available\n\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false, // react already safes from xss\n        },\n    });\n\nexport default i18n;\n","import React, { useEffect, Suspense } from 'react';\nimport { useSelector } from 'react-redux';\n\n// store\nimport { RootState } from '../redux/store';\n\n// utils\nimport { changeBodyAttribute } from '../utils';\n\nconst loading = () => <div className=\"\"></div>;\n\ninterface DefaultLayoutProps {\n    layout: {\n        layoutType: string;\n        layoutWidth: string;\n        leftSideBarTheme: string;\n        leftSideBarType: string;\n        showRightSidebar: boolean;\n    };\n    children?: any;\n}\n\nconst DefaultLayout = (props: DefaultLayoutProps) => {\n    const { layoutColor } = useSelector((state: RootState) => ({\n        layoutColor: state.Layout.layoutColor,\n    }));\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-color', layoutColor);\n    }, [layoutColor]);\n\n    useEffect(() => {\n        if (document.body) document.body.classList.add('authentication-bg', 'authentication-bg-pattern');\n\n        return () => {\n            if (document.body) document.body.classList.remove('authentication-bg', 'authentication-bg-pattern');\n        };\n    }, []);\n\n    // get the child view which we would like to render\n    const children = props['children'] || null;\n\n    return (\n        <>\n            <Suspense fallback={loading()}>{children}</Suspense>\n        </>\n    );\n};\nexport default DefaultLayout;\n","import React, { Suspense, useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container } from 'react-bootstrap';\n\n// actions\nimport { changeSidebarType } from '../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../redux/store';\n\n// constants\nimport { LayoutTypes, SideBarTypes } from '../constants';\n\n// utils\nimport { changeBodyAttribute } from '../utils';\n\n// code splitting and lazy loading\n// https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52\nconst Topbar = React.lazy(() => import('./Topbar'));\nconst LeftSidebar = React.lazy(() => import('./LeftSidebar'));\nconst Footer = React.lazy(() => import('./Footer'));\nconst RightSidebar = React.lazy(() => import('./RightSidebar/'));\n\nconst loading = () => <div className=\"\"></div>;\n\ninterface VerticalLayoutProps {\n    children?: any;\n}\n\nconst VerticalLayout = ({ children }: VerticalLayoutProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n\n    const {\n        layoutColor,\n        layoutWidth,\n        menuPosition,\n        leftSideBarTheme,\n        leftSideBarType,\n        showSidebarUserInfo,\n        showTwoToneIcons,\n        topbarTheme,\n        isOpenRightSideBar,\n    } = useSelector((state: RootState) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutWidth: state.Layout.layoutWidth,\n        menuPosition: state.Layout.menuPosition,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n        showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n        showTwoToneIcons: state.Layout.showTwoToneIcons,\n        topbarTheme: state.Layout.topbarTheme,\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    const [isMenuOpened, setIsMenuOpened] = useState<boolean>(false);\n\n    /*\n    layout defaults\n    */\n    useEffect(() => {\n        changeBodyAttribute('data-layout-mode', LayoutTypes.LAYOUT_VERTICAL);\n    }, []);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-color', layoutColor);\n    }, [layoutColor]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-width', layoutWidth);\n    }, [dispatch, layoutWidth]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-menu-position', menuPosition);\n    }, [menuPosition]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-color', leftSideBarTheme);\n    }, [leftSideBarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-size', leftSideBarType);\n    }, [leftSideBarType]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-topbar-color', topbarTheme);\n    }, [topbarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-sidebar-icon', showTwoToneIcons ? 'twotones' : '');\n    }, [showTwoToneIcons]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-sidebar-user', showSidebarUserInfo);\n    }, [showSidebarUserInfo]);\n\n    /**\n     * Open the menu when having mobile screen\n     */\n    const openMenu = () => {\n        setIsMenuOpened((prevState) => !prevState);\n\n        if (document.body) {\n            if (isMenuOpened) {\n                document.body.classList.remove('sidebar-enable');\n            } else {\n                document.body.classList.add('sidebar-enable');\n            }\n        }\n    };\n\n    const updateDimensions = useCallback(() => {\n        // activate the condensed sidebar if smaller devices like ipad or tablet\n        if (window.innerWidth > 768 && window.innerWidth <= 1028) {\n            dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n        } else if (window.innerWidth > 1028) {\n            dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n        }\n    }, [dispatch]);\n\n    useEffect(() => {\n        window.addEventListener('resize', updateDimensions);\n\n        return () => {\n            window.removeEventListener('resize', updateDimensions);\n        };\n    }, [dispatch, updateDimensions]);\n\n    const isCondensed: boolean = leftSideBarType === SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED;\n\n    return (\n        <>\n            <div id=\"wrapper\">\n                <Suspense fallback={loading()}>\n                    <Topbar openLeftMenuCallBack={openMenu} hideLogo={false} />\n                </Suspense>\n                <Suspense fallback={loading()}>\n                    <LeftSidebar isCondensed={isCondensed} />\n                </Suspense>\n                <div className=\"content-page\">\n                    <div className=\"content\">\n                        <Container fluid>\n                            <Suspense fallback={loading()}>{children}</Suspense>\n                        </Container>\n                    </div>\n\n                    <Suspense fallback={loading()}>\n                        <Footer />\n                    </Suspense>\n                </div>\n            </div>\n            {isOpenRightSideBar && (\n                <Suspense fallback={loading()}>\n                    <RightSidebar />\n                </Suspense>\n            )}\n        </>\n    );\n};\nexport default VerticalLayout;\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container } from 'react-bootstrap';\n\n// actions\nimport { toggleSidebarUserInfo } from '../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../redux/store';\n\n// constants\nimport { LayoutTypes, SideBarTypes } from '../constants';\n\n// utils\nimport { changeBodyAttribute } from '../utils';\n\n// code splitting and lazy loading\n// https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52\nconst Topbar = React.lazy(() => import('./Topbar'));\nconst LeftSidebar = React.lazy(() => import('./LeftSidebar'));\nconst Footer = React.lazy(() => import('./Footer'));\nconst RightSidebar = React.lazy(() => import('./RightSidebar'));\n\nconst loading = () => <div className=\"text-center\"></div>;\n\ninterface VerticalLayoutProps {\n    children?: any;\n}\n\nconst DetachedLayout = ({ children }: VerticalLayoutProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n    const [isMenuOpened, setIsMenuOpened] = useState<boolean>(false);\n\n    const {\n        layoutColor,\n        layoutWidth,\n        menuPosition,\n        leftSideBarTheme,\n        leftSideBarType,\n        topbarTheme,\n        showSidebarUserInfo,\n        isOpenRightSideBar,\n    } = useSelector((state: RootState) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutWidth: state.Layout.layoutWidth,\n        menuPosition: state.Layout.menuPosition,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n        topbarTheme: state.Layout.topbarTheme,\n        showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    /*\n    layout defaults\n    */\n    useEffect(() => {\n        changeBodyAttribute('data-layout-mode', LayoutTypes.LAYOUT_DETACHED);\n        dispatch(toggleSidebarUserInfo(true));\n    }, [dispatch]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-color', layoutColor);\n    }, [layoutColor]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-width', layoutWidth);\n    }, [dispatch, layoutWidth]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-menu-position', menuPosition);\n    }, [menuPosition]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-color', leftSideBarTheme);\n    }, [leftSideBarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-size', leftSideBarType);\n    }, [leftSideBarType]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-topbar-color', topbarTheme);\n    }, [topbarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-sidebar-user', showSidebarUserInfo);\n    }, [showSidebarUserInfo]);\n\n    /**\n     * Open the menu when having mobile screen\n     */\n    const openMenu = () => {\n        setIsMenuOpened((prevState) => !prevState);\n        if (document.body) {\n            if (isMenuOpened) {\n                document.body.classList.add('sidebar-enable');\n            } else {\n                document.body.classList.remove('sidebar-enable');\n            }\n        }\n    };\n\n    const isCondensed = leftSideBarType === SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED;\n\n    return (\n        <>\n            <div id=\"wrapper\">\n                <Suspense fallback={loading()}>\n                    <Topbar\n                        openLeftMenuCallBack={openMenu}\n                        navCssClasses=\"topnav-navbar topnav-navbar-dark\"\n                        topbarDark={true}\n                    />\n                </Suspense>\n                <Suspense fallback={loading()}>\n                    <LeftSidebar isCondensed={isCondensed} />\n                </Suspense>\n\n                <div className=\"content-page\">\n                    <div className=\"content\">\n                        <Container fluid>\n                            <Suspense fallback={loading()}>{children}</Suspense>\n                        </Container>\n                    </div>\n\n                    <Suspense fallback={loading()}>\n                        <Footer />\n                    </Suspense>\n                </div>\n            </div>\n            {isOpenRightSideBar && (\n                <Suspense fallback={loading()}>\n                    <RightSidebar />\n                </Suspense>\n            )}\n        </>\n    );\n};\n\nexport default DetachedLayout;\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\n// constants\nimport { LayoutTypes } from '../../constants/layout';\n\n// utils\nimport { changeBodyAttribute } from '../../utils';\n\n// code splitting and lazy loading\n// https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52\nconst Topbar = React.lazy(() => import('../Topbar'));\nconst Navbar = React.lazy(() => import('./Navbar'));\nconst Footer = React.lazy(() => import('../Footer'));\nconst RightSidebar = React.lazy(() => import('../RightSidebar'));\n\nconst loading = () => <div className=\"text-center\"></div>;\n\ninterface HorizontalLayoutProps {\n    children?: any;\n}\n\nconst HorizontalLayout = ({ children }: HorizontalLayoutProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n\n    const [isMenuOpened, setIsMenuOpened] = useState<boolean>(false);\n\n    const { layoutColor, layoutWidth, menuPosition, topbarTheme, isOpenRightSideBar } = useSelector(\n        (state: RootState) => ({\n            layoutColor: state.Layout.layoutColor,\n            layoutWidth: state.Layout.layoutWidth,\n            menuPosition: state.Layout.menuPosition,\n            topbarTheme: state.Layout.topbarTheme,\n            isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n        })\n    );\n\n    /*\n    layout defaults\n    */\n    useEffect(() => {\n        changeBodyAttribute('data-layout-mode', LayoutTypes.LAYOUT_HORIZONTAL);\n    }, [dispatch]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-color', layoutColor);\n    }, [layoutColor]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-width', layoutWidth);\n    }, [layoutWidth]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-menu-position', menuPosition);\n    }, [menuPosition]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-topbar-color', topbarTheme);\n    }, [topbarTheme]);\n\n    /**\n     * Open the menu when having mobile screen\n     */\n    const openMenu = () => {\n        setIsMenuOpened(!isMenuOpened);\n        if (document.body) {\n            if (isMenuOpened) {\n                document.body.classList.remove('sidebar-enable');\n            } else {\n                document.body.classList.add('sidebar-enable');\n            }\n        }\n    };\n\n    return (\n        <>\n            <div id=\"wrapper\">\n                <Suspense fallback={loading()}>\n                    <Topbar openLeftMenuCallBack={openMenu} topbarDark={false} />\n                </Suspense>\n\n                <Suspense fallback={loading()}>\n                    <Navbar isMenuOpened={isMenuOpened} />\n                </Suspense>\n                <div className=\"content-page\">\n                    <div className=\"content\">\n                        <Container fluid>\n                            <Suspense fallback={loading()}>{children}</Suspense>\n                        </Container>\n                    </div>\n\n                    <Suspense fallback={loading()}>\n                        <Footer />\n                    </Suspense>\n\n                    {isOpenRightSideBar && (\n                        <Suspense fallback={loading()}>\n                            <RightSidebar />\n                        </Suspense>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default HorizontalLayout;\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container } from 'react-bootstrap';\n\n// actions\nimport { changeTopbarTheme } from '../../redux/actions';\n\n// store\nimport { RootState, AppDispatch } from '../../redux/store';\n\n// utils\nimport { changeBodyAttribute } from '../../utils';\n\n// constants\nimport { LayoutTypes, TopbarTheme } from '../../constants/layout';\n\n// code splitting and lazy loading\n// https://blog.logrocket.com/lazy-loading-components-in-react-16-6-6cea535c0b52\nconst Topbar = React.lazy(() => import('../Topbar'));\nconst LeftSidebar = React.lazy(() => import('./LeftSidebar'));\nconst Footer = React.lazy(() => import('../Footer'));\nconst RightSidebar = React.lazy(() => import('../RightSidebar'));\n\nconst loading = () => <div className=\"text-center\"></div>;\n\ninterface VerticalLayoutProps {\n    children?: any;\n}\n\nconst TwoColumnLayout = ({ children }: VerticalLayoutProps) => {\n    const dispatch = useDispatch<AppDispatch>();\n\n    const { layoutColor, layoutWidth, leftSideBarTheme, isOpenRightSideBar, topbarTheme, leftSideBarType } =\n        useSelector((state: RootState) => ({\n            layoutColor: state.Layout.layoutColor,\n            layoutWidth: state.Layout.layoutWidth,\n            menuPosition: state.Layout.menuPosition,\n            leftSideBarTheme: state.Layout.leftSideBarTheme,\n            leftSideBarType: state.Layout.leftSideBarType,\n            topbarTheme: state.Layout.topbarTheme,\n            isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n        }));\n\n    const [isMenuOpened, setIsMenuOpened] = useState<boolean>(false);\n\n    /*\n     * layout defaults\n     */\n    useEffect(() => {\n        changeBodyAttribute('data-layout-mode', LayoutTypes.LAYOUT_TWO_COLUMN);\n        dispatch(changeTopbarTheme(TopbarTheme.TOPBAR_THEME_LIGHT));\n    }, [dispatch]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-color', layoutColor);\n    }, [layoutColor]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-layout-width', layoutWidth);\n    }, [dispatch, layoutWidth]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-color', leftSideBarTheme);\n    }, [leftSideBarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-topbar-color', topbarTheme);\n    }, [topbarTheme]);\n\n    useEffect(() => {\n        changeBodyAttribute('data-leftbar-size', leftSideBarType);\n    }, [leftSideBarType]);\n\n    /**\n     * Open the menu when having mobile screen\n     */\n    const openMenu = () => {\n        setIsMenuOpened((prevState) => !prevState);\n        if (document.body) {\n            if (isMenuOpened) {\n                document.body.classList.add('sidebar-enable');\n            } else {\n                document.body.classList.remove('sidebar-enable');\n            }\n        }\n    };\n\n    return (\n        <>\n            <div id=\"wrapper\">\n                <Suspense fallback={loading()}>\n                    <Topbar openLeftMenuCallBack={openMenu} topbarDark={true} />\n                </Suspense>\n                <Suspense fallback={loading()}>\n                    <LeftSidebar />\n                </Suspense>\n\n                <div className=\"content-page\">\n                    <div className=\"content\">\n                        <Container fluid>\n                            <Suspense fallback={loading()}>{children}</Suspense>\n                        </Container>\n                    </div>\n\n                    <Suspense fallback={loading()}>\n                        <Footer />\n                    </Suspense>\n                </div>\n            </div>\n            {isOpenRightSideBar && (\n                <Suspense fallback={loading()}>\n                    <RightSidebar />\n                </Suspense>\n            )}\n        </>\n    );\n};\n\nexport default TwoColumnLayout;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button,Form,Row,Col } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { RootState, AppDispatch } from '../../redux/store';\n// components\nimport { FormInput } from '../../components';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { useDispatch,useSelector } from 'react-redux';\nimport { getCity } from '../../redux/location/actions';\n\nconst api = new APICore();\n\ninterface FormData {\n    name: string;\n    client_id: string;\n    contact_type: string;\n    contact_person: string;\n    phone: string;\n    email: string;\n    city: any;\n    country: any;\n    billing_address: string;\n}\n\ninterface AddContactProps {\n    show: boolean;\n    onHide: () => void;\n    contact: FormData;\n    countries: any;\n    onSubmit: (value: any) => void;\n}\n\nconst ContactForm = ({ show, onHide, onSubmit,contact,countries }: AddContactProps) => {\n    /*\n    form validation schema\n    */\n   \n    const dispatch = useDispatch<AppDispatch>();\n    const cities = useSelector((state:RootState) => state.Location.city);\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            name: yup.string().required('Please enter name'),\n            client_id: yup.string().required('Please enter client id'),\n            contact_type: yup.string().required('Please select contact type').typeError('Please select contact type'),\n            contact_person: yup.string().required('Please enter contact person'),\n            phone: yup.string().required('Please enter phone number').typeError('Please enter number'),\n                              \n        })\n    );\n\n    const methods = useForm<Partial<FormData>>({\n        defaultValues: {name:contact?.name,client_id:contact?.client_id,contact_person:contact?.contact_person,phone:contact?.phone,email:contact?.email,city:contact?.city?.id,country:contact?.country?.id,billing_address:contact?.billing_address},\n        resolver: schemaResolver,\n    });\n    const {\n        handleSubmit,\n        register,\n        reset,\n        setValue,\n        control,\n        formState: { errors },\n    } = methods;\n\n\n    useEffect(()=>{\n        if(contact?.country){\n            dispatch(getCity(contact?.country?.id))\n        }\n    },[contact])\n   \n    return (\n        <>\n            <Modal show={show} onHide={onHide} aria-labelledby=\"contained-modal-title-vcenter\" centered>\n                <Modal.Header className=\"bg-light\" onHide={onHide} closeButton>\n                    <Modal.Title className=\"m-0\">Add Contact</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"p-4\">\n                    <Form onSubmit={handleSubmit(onSubmit)}>\n                        <Row>\n                            <Col>\n                                \n                                <FormInput\n                                    label=\"Name\"\n                                    type=\"text\"\n                                    name=\"name\"\n                                    labelClassName='required'\n                                    placeholder=\"Enter Name\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n                                <FormInput\n                                    label=\"Client Id\"\n                                    type=\"text\"\n                                    name=\"client_id\"\n                                    labelClassName='required'\n                                    placeholder=\"Enter Client Id\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n                            \n                                <FormInput\n                                label=\"Contact Type\"\n                                type=\"select\"\n                                name=\"contact_type\"\n                                labelClassName='required'\n                                containerClass={'mb-3'} \n                                register={register}\n                                errors={errors}\n                                control={control}\n                                defaultValue={contact ? contact.contact_type : ''}\n                                >    \n                                    <option value=\"\" disabled>Select Contact Type ...</option>                         \n                                    <option value=\"individual\" >Individual</option>                         \n                                    <option value=\"corporate\" >Corporate</option>                                                 \n                                \n                                </FormInput>\n\n                                <FormInput\n                                    label=\"Contact Person\"\n                                    type=\"text\"\n                                    name=\"contact_person\"\n                                    labelClassName='required'\n                                    placeholder=\"Enter Contact Person\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n\n                                <FormInput\n                                    label=\"Phone\"\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    labelClassName='required'\n                                    placeholder=\"Enter Phone\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n                                \n                                \n                            </Col>\n                            <Col>\n                           \n                                <FormInput\n                                    label=\"Email\"\n                                    type=\"text\"\n                                    name=\"email\"\n                                    placeholder=\"Enter Email\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n                                <FormInput\n                                label=\"Country\"\n                                type=\"select\"\n                                name=\"country\"\n                                containerClass={'mb-3'} \n                                register={register}\n                                errors={errors}\n                                control={control} \n                                defaultValue={contact ? contact?.country?.id : ''}\n                                onChange={(e:any) => {dispatch(getCity(e.target.value));if(!e.target.value){setValue('city','')}}}\n                                >    \n                                    <option value=\"\">Select Country ...</option> \n                                    {countries?.map((item:any)=>{\n                                        return(\n                                            <option key={'co'+item.id} value={item.id} >{item.name}</option>\n                                        )\n                                    })}                                                 \n                                \n                                </FormInput>\n                                <Form.Group className='mb-3'>\n                                    <Form.Label >City</Form.Label>\n\n                                    <Form.Select\n                                        aria-label=\"Default select example\"\n                                        isInvalid={errors && errors['city'] ? true : false}\n                                        {...register('city')}\n                                        defaultValue={contact ? contact?.city?.id : ''}\n                                        \n                                    >\n                                        <option value=\"\">Select City ...</option>                         \n                                            {cities?.map((item:any)=>{\n                                                return(\n                                                    <option selected={contact?.city?.id===item.id} key={'ci'+item.id} value={item.id} >{item.name}</option>\n                                                )\n                                            })} \n                                    </Form.Select>\n\n                                    {errors && errors['city'] ? (\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors['city']['message']}\n                                        </Form.Control.Feedback>\n                                    ) : null}\n                                </Form.Group>\n                                {/* <FormInput\n                                label=\"City\"\n                                type=\"select\"\n                                name=\"city\"\n                                containerClass={'mb-3'} \n                                register={register}\n                                errors={errors}\n                                control={control} \n                                defaultValue={contact ? contact?.city?.id : ''}\n                                >    \n                                    <option value=\"\" disabled>Select City ...</option>                         \n                                    {cities?.map((item:any)=>{\n                                        return(\n                                            <option key={'ci'+item.id} value={item.id} >{item.name}</option>\n                                        )\n                                    })}                                                 \n                                \n                                </FormInput> */}\n                                \n                                <FormInput\n                                    label=\"Billing Address\"\n                                    type=\"textarea\"\n                                    name=\"billing_address\"\n                                    placeholder=\"Enter Billing Adress\"\n                                    containerClass={'mb-3'}\n                                    register={register}\n                                    errors={errors}\n                                    control={control}\n                                />\n                            </Col>\n                            \n                        </Row>\n                        \n                         \n                        <div className=\"text-end\">\n                            <Button variant=\"success\" type=\"submit\" className=\"waves-effect waves-light me-1\">\n                                Save\n                            </Button>\n                            <Button\n                                variant=\"danger\"\n                                type=\"button\"\n                                className=\"waves-effect waves-light\"\n                                onClick={onHide}\n                            >\n                                Cancel\n                            </Button>\n                        </div>\n                        \n                    </Form>\n                   \n                    \n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default ContactForm;\n","import React, { useEffect, useState } from 'react';\nimport { APICore } from '../../helpers/api/apiCore';\nimport ContactForm from '../Form/ContactForm';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { withSwal } from 'react-sweetalert2';\n\n// components\nimport Table from '../../components/Table';\nimport PageTitle from '../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact,deleteContact,getContact } from '../../redux/actions';\nimport ReactExport from \"react-export-excel\";\nimport Pagination from '../../components/CustomPagination';\nimport { getCountry } from '../../redux/location/actions';\n\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst api = new APICore();\n\n\n// action column render\nconst ActionColumn = withSwal(({ row, swal }) => {\n    /*\n     *   modal handeling\n     */\n    const dispatch = useDispatch();\n    const country = useSelector(state => state.Location.country);\n    const user_role = useSelector((state)=> state.Role.user_role);\n    const [show, setShow] = useState(false);\n    const onCloseModal = () => setShow(false);\n    const onOpenModal = () => setShow(true);\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (formData) => {\n        \n        api.updatePatch(`/api/contact/${row.original.id}/`,formData)\n        .then(res=>{\n            \n            if(res.data.success){\n                dispatch(getContact(10,1));\n            }else{\n                swal.fire({\n                    title: res.data.error,\n                }) \n                \n            }\n            \n        })\n        .catch(err => {\n            swal.fire({\n                title: err,\n            })\n        })\n        onCloseModal()\n    };\n\n    const onDelete = () => {\n        swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#28bb4b',\n                cancelButtonColor: '#f34e4e',\n                confirmButtonText: 'Yes, delete it!',\n            })\n            .then(function(result){\n                if(result.value){\n                    // dispatch(deleteContact(row.original.id))\n                    api.delete(`/api/contact/${row.original.id}/`)\n                .then(res=>{\n                    dispatch(getContact(10,1))\n                    swal.fire(\n                        'Deleted!',\n                        'Account has been deleted.',\n                        'success'\n                    );            \n                })\n                .catch(err => {\n                    swal.fire({\n                        title: err,\n                    }\n                    );\n                })\n                }else if(result.dismiss === 'cancel'){\n                    console.log('cancel')\n                }\n            })        \n    }\n\n    return (\n        <>\n            <Link to={{ pathname: '/app/contact_details', state: row.original.id }} className=\"action-icon\" >\n                <i className=\"mdi mdi-eye\"></i>\n            </Link>\n\n            { user_role.includes('change_contact') ?\n                <Link to=\"#\" className=\"action-icon\" onClick={()=>onOpenModal()}>\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link>:\n                <Link to=\"#\" className=\"action-icon\"  style={{pointerEvents: 'none'}}>\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link>\n            }\n            \n            { user_role.includes('delete_contact') ?\n                <Link to=\"#\" className=\"action-icon\" onClick={()=>onDelete()}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link>:\n                <Link to=\"#\" className=\"action-icon\" style={{pointerEvents: 'none'}}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link>\n            }\n            {\n                show?\n                <ContactForm show={show} onHide={onCloseModal} onSubmit={onSubmit} contact={row.original} countries={country}/>\n                :null\n            }\n        </>\n    );\n});\n\nconst columns = [\n    \n    {\n        Header: 'Name',\n        accessor: 'name',\n        sort: true,\n    },\n    {\n        Header: 'Client Id',\n        accessor: 'client_id',\n        sort: true,\n    },\n    {\n        Header: 'Contact Type',\n        accessor: 'contact_type',\n        sort: true,\n    },\n    {\n        Header: 'Contact Person',\n        accessor: 'contact_person',\n        sort: true,\n    },\n    {\n        Header: 'Phone',\n        accessor: 'phone',\n        sort: true,\n    },\n    {\n        Header: 'Email',\n        accessor: 'email',\n        sort: true,\n    },\n    {\n        Header: 'City',\n        accessor: 'city.name',\n        sort: true,\n    },\n    {\n        Header: 'country',\n        accessor: 'country.name',\n        sort: true,\n\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        Cell: ActionColumn,\n    },\n];\n\nconst Contact = () => {\n    const dispatch = useDispatch();\n    const contact = useSelector(state => state.Contact.contact);\n    const country = useSelector(state => state.Location.country);\n    const previous = useSelector(state => state.Contact.previous);\n    const next = useSelector(state => state.Contact.next);\n    const current_page = useSelector(state => state.Contact.current_page);\n    const total_page = useSelector(state => state.Contact.total_page);\n    const active = useSelector(state => state.Contact.active);\n    const user_role = useSelector((state)=> state.Role.user_role);\n    const loading = useSelector(state => state.Contact.loading);\n    const error = useSelector(state => state.Contact.error);\n    const success = useSelector(state => state.Contact.success);\n    const [pageSize,setPageSize] = useState(10);\n    const [alertShow, setAlertShow] = useState(true);\n    /*\n     *   modal handeling\n     */\n    const [show, setShow] = useState(false);\n    const onCloseModal = () => setShow(false);\n    const onOpenModal = () => setShow(true);\n\n    const visitPage = (page) => {\n        dispatch(getContact(pageSize,page));\n    };\n\n    const previous_number = () => {\n        dispatch(getContact(pageSize,previous));\n    };\n\n    const next_number = () => {\n        dispatch(getContact(pageSize,next));\n    };\n\n    /*\n    handle form submission\n    */\n    const onSubmit = (formData) => {\n        dispatch(addContact(formData));\n        onCloseModal();\n        \n    };\n\n\n    useEffect(()=>{ \n        dispatch(getContact(pageSize,1));\n        dispatch(getCountry());   \n    },[pageSize])\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Contact', path: '/app/contact', active: true },\n                ]}\n                title={'Contact'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {!loading && alertShow && error && (\n                            <Alert variant=\"danger\" className=\"my-2\" onClose={()=>setAlertShow(false)} dismissible>\n                                {error}\n                            </Alert>\n                        )}\n                            {!loading && alertShow && success !== null && (\n                                <Alert variant=\"success\" className=\"my-2\" onClose={() => setAlertShow(false)} dismissible>\n                                {success}\n                            </Alert>\n                        )}\n                            <Row className=\"mb-2\">\n                                <Col sm={4}>\n                                    <div style={{display: 'flex',flexDirection: 'row',alignItems: 'center'}}>\n                                        <span className='me-2'>Show:</span>\n                                        <Form.Select style={{width: '40%'}} onChange={(e)=>{setPageSize(e.target.value);dispatch(getContact(e.target.value,current_page))}}>\n                                            <option value='10'>10</option>\n                                            <option value='15'>20</option>\n                                            <option value='20'>30</option>\n                                        </Form.Select>\n                                    </div>\n                                </Col>\n\n                                <Col sm={8}>\n                                    <div className=\"text-sm-end mt-2 mt-sm-0\">\n                                        { user_role.includes('add_contact') ?\n                                            <Button className=\"btn btn-success mb-2 me-1\" onClick={onOpenModal}>\n                                            <i className=\"mdi mdi-plus-circle me-1\"></i> Add New\n                                            </Button>:\n                                            <>\n                                            </>\n                                        }\n                                        \n                                        {/* <ExcelFile element={<Button className=\"btn btn-light mb-2\">Export</Button>}>\n                                            <ExcelSheet data={users} name=\"Users\">\n                                                <ExcelColumn label=\"Name\" value=\"name\"/>\n                                                <ExcelColumn label=\"Phone\" value=\"phone\"/>\n                                                <ExcelColumn label=\"Email\" value=\"email\"/>\n                                                <ExcelColumn label=\"Role\" value={(col)=> col.groups[0].name}/>                                            \n                                            </ExcelSheet>\n                                        </ExcelFile> */}\n  \n                                    </div>\n                                </Col>\n                            </Row>\n                            \n                            {loading ? <p>Loading...</p>:\n                            <>\n                            {contact.length > 0 ?\n                            <>\n                            <Table\n                                columns={columns}\n                                data={contact}\n                                pageSize={pageSize}\n                                isSortable={true}\n                                pagination={false}\n                                isSearchable={true}\n                                tableClass=\"table-nowrap table-hover\"\n                                searchBoxClass=\"\"\n                            />\n                            <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={total_page} current_page={current_page} active={active}/>\n                            </>\n                            :\n                            'No user available!'}</>}\n                            \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add contact modal */}\n            \n            <ContactForm show={show} onHide={onCloseModal} onSubmit={onSubmit} countries={country}/>\n            \n            \n            \n        </>\n    );\n};\n\nexport default Contact;\n","import React, { useEffect, useState } from 'react';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { Row, Col, Card, Form, Alert, Tab, Nav } from 'react-bootstrap';\nimport { withSwal } from 'react-sweetalert2';\n\n// components\nimport Table from '../../components/Table';\nimport PageTitle from '../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getInvoice } from '../../redux/actions';\nimport Pagination from '../../components/CustomPagination';\n\n\n\n// const ExcelFile = ReactExport.ExcelFile;\n// const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n// const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst api = new APICore();\n\nconst refreshPage = () => {\n    window.location.reload();\n}\n\n// // action column render\nexport const ActionColumn = withSwal(({ row, swal }) => {\n    /*\n     *   modal handeling\n     */\n    const dispatch = useDispatch();\n    const user_role = useSelector((state) => state.Role.user_role);\n\n\n    /*\n    handle form submission\n    */\n\n    const onDelete = () => {\n        swal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Yes, delete it!',\n        })\n            .then(function (result) {\n                if (result.value) {\n                    // dispatch(deleteContact(row.original.id))\n                    api.delete(`/api/invoice/${row.original.id}/`)\n                        .then(res => {\n                            dispatch(getInvoice(10, 1));\n                            swal.fire(\n                                'Deleted!',\n                                'Invoice has been deleted.',\n                                'success'\n                            );\n                        })\n                        .catch(err => {\n                            swal.fire({\n                                title: err,\n                            }\n                            );\n                        })\n                } else if (result.dismiss === 'cancel') {\n\n                }\n            })\n    }\n\n    const sendEmail = () => {\n        const data = {\n            \"contact_id\":row.original?.contact_id?.id,\n            \"invoice_id\":row.original.id,\n        }\n        swal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Yes, Send email!',\n        })\n            .then(function (result) {\n                if (result.value) {\n                    // dispatch(deleteContact(row.original.id))\n                    api.create(`/api/send-email/`, data)\n                        .then(res => {\n                            // dispatch(getInvoice(10, 1));\n                            swal.fire(\n                                'Sent!',\n                                'Email has been Sent.',\n                                'success'\n                            );\n                        })\n                        .catch(err => {\n                            swal.fire({\n                                title: err,\n                            }\n                            );\n                        })\n                } else if (result.dismiss === 'cancel') {\n\n                }\n            })\n    }\n\n    // console.log('row', row.original)\n\n    return (\n        <>\n            <Link to={{ pathname: '/app/invoice_details', state: row.original.id }} className=\"action-icon\" >\n                <i className=\"mdi mdi-eye\"></i>\n            </Link>\n\n            {user_role.includes('change_invoice') ?\n                <Link to={{ pathname: '/app/invoice_form', state: row.original.id }} className=\"action-icon\" >\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link> :\n                <Link to=\"#\" className=\"action-icon\" style={{ pointerEvents: 'none' }}>\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link>\n            }\n\n            {user_role.includes('delete_invoice') ?\n                <Link to=\"#\" className=\"action-icon\" onClick={() => onDelete()}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link> :\n                <Link to=\"#\" className=\"action-icon\" style={{ pointerEvents: 'none' }}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link>\n            }\n\n            {row.original.status === \"approve\" ?\n                <Link to=\"#\" className=\"action-icon\" onClick={() => sendEmail()}>\n                    <i className=\"mdi mdi-email\"></i>\n                </Link> :\n                null\n            }\n\n\n\n        </>\n    );\n});\n\nexport const StatusColumn = withSwal(({ row, swal }) => {\n    /*\n     *   modal handeling\n     */\n    const dispatch = useDispatch();\n    const user_role = useSelector((state) => state.Role.user_role);\n\n    /*\n    handle form submission\n    */\n    const draftsOptions =\n        <>\n            <option selected={row.original.status === 'draft'} value='draft'>Draft</option>\n            <option selected={row.original.status === 'waiting'} value='waiting'>Waiting</option>\n            <option selected={row.original.status === 'approve'} value='approve'>Approved</option>\n        </>\n\n    const waitingsOptions =\n        <>\n            <option selected={row.original.status === 'waiting'} value='waiting'>Waiting</option>\n            <option selected={row.original.status === 'approve'} value='approve'>Approved</option>\n        </>\n\n    const approvesOptions =\n        <>\n            <option selected={row.original.status === 'approve'} value='approve'>Approved</option>\n            <option selected={row.original.status === 'paid'} value='paid'>Paid</option>\n        </>\n\n    const paidsOptions =\n        <>\n            <option disabled selected={row.original.status === 'paid'} value='paid'>Paid</option>\n        </>\n\n    var dropDown = (<div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n        <Form.Select style={{ width: '70%' }} onChange={(e) => handleShow(row, e)}>\n            {row.original.status === \"draft\" ? (draftsOptions) : null}\n            {row.original.status === \"waiting\" ? (waitingsOptions) : null}\n            {row.original.status === \"approve\" ? (approvesOptions) : null}\n            {row.original.status === \"paid\" ? (paidsOptions) : null}\n        </Form.Select>\n    </div>)\n\n    const handleShow = (row, e) => {\n        const value = e.target.value;\n        const data = {\n            \"status\": value\n        }\n        swal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Yes, change it!',\n        })\n            .then(function (result) {\n\n                if (result.value) {\n                    api.update(`/api/change-invoice-status/?id=${row.original.id}`, data)\n                        .then(res => {\n                            if (res) {\n                                swal.fire(\n                                    'Updated!',\n                                    'Invoice Status has been Updated.',\n                                    'success'\n                                );\n                            }\n                            else {\n                                swal.fire(\n                                    'Updated!',\n                                    'Invoice Status has not Updated.',\n                                    'warning'\n                                );\n                            }\n                            // setTimeout(() => {\n                            //     refreshPage();\n                            // }, 600);\n                            dispatch(getInvoice(10, 1));\n                        })\n                        .catch(err => {\n                            console.log('err', err)\n                            dispatch(getInvoice(10, 1));\n                            swal.fire({\n                                title: err,\n                            }\n                            );\n                        })\n                } else if (result.dismiss === 'cancel') {\n                    dispatch(getInvoice(10, 1));\n                }\n            })\n            .catch(err => {\n                console.log('swal fire err', err)\n            })\n    };\n\n    return (\n        <>\n            {dropDown}\n\n        </>\n    );\n});\n\n\nconst columns = [\n    {\n        Header: 'Invoice No',\n        accessor: 'invoice_no',\n        sort: true,\n    },\n    {\n        Header: 'Contact',\n        accessor: 'contact_id.name',\n        sort: true,\n    },\n    {\n        Header: 'Date',\n        accessor: 'date',\n        sort: true,\n    },\n    {\n        Header: 'Due Date',\n        accessor: 'due_date',\n        sort: true,\n    },\n    {\n        Header: 'Tax Type',\n        accessor: 'tax_type',\n        sort: true,\n    },\n    {\n        Header: 'Sub Total',\n        accessor: 'sub_total',\n        sort: true,\n    },\n    {\n        Header: 'Discount',\n        accessor: 'discount',\n        sort: true,\n        Cell: (row) => {\n            return <div>{(row.row.original.discount).toFixed(2)}</div>;\n        }\n    },\n    {\n        Header: 'Total Tax',\n        accessor: 'total_tax',\n        sort: true,\n    },\n    {\n        Header: 'Total Amount',\n        accessor: 'total_amount',\n        sort: true,\n    },\n    {\n        Header: 'Status',\n        accessor: 'status',\n        sort: true,\n        Cell: StatusColumn,\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        Cell: ActionColumn,\n    }\n\n];\n\n\nconst Invoice = () => {\n    const dispatch = useDispatch();\n    const [filteredIncoices, setFilteredInvoices] = useState([]);\n    const invoices = useSelector(state => state.Invoice.invoices);\n    const previous = useSelector(state => state.Invoice.previous);\n    const next = useSelector(state => state.Invoice.next);\n    const current_page = useSelector(state => state.Invoice.current_page);\n    const total_page = useSelector(state => state.Invoice.total_page);\n    const active = useSelector(state => state.Invoice.active);\n    const user_role = useSelector((state) => state.Role.user_role);\n    const loading = useSelector(state => state.Invoice.loading);\n    const error = useSelector(state => state.Invoice.error);\n    const [pageSize, setPageSize] = useState(10);\n    const [activePage, setActivePage] = useState('all');\n    /*\n     *   modal handeling\n     */\n\n    const visitPage = (page) => {\n        dispatch(getInvoice(pageSize, page));\n    };\n\n    const previous_number = () => {\n        dispatch(getInvoice(pageSize, previous));\n    };\n\n    const next_number = () => {\n        dispatch(getInvoice(pageSize, next));\n    };\n\n    /*\n    handle form submission\n    */\n\n    const onClickEvent = (value) => {\n        if (value === 'all') {\n            setActivePage('all');\n            setFilteredInvoices(invoices)\n        } else if (value === 'draft') {\n            setActivePage('draft');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'draft'))\n\n        } else if (value === 'approval') {\n            setActivePage('approval');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'waiting'))\n\n        } else if (value === 'approve') {\n            setActivePage('approve');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'approve'))\n\n        } else if (value === 'paid') {\n            setActivePage('paid');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'paid'))\n\n        }\n        // else if(value === 'repeating'){\n        //     setFilteredInvoices(invoices)\n        // }\n        else {\n            setFilteredInvoices(invoices)\n        }\n    }\n\n\n    useEffect(() => {\n        dispatch(getInvoice(pageSize, 1));\n    }, [pageSize])\n\n    useEffect(() => {\n        setFilteredInvoices(invoices);\n        setActivePage('all');\n    }, [invoices])\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Invoice', path: '/app/invoice', active: false },\n                ]}\n                title={`Invoice`}\n            />\n            <Tab.Container>\n                <Nav as=\"ul\" variant=\"tabs\">\n                    <Nav.Item as=\"li\" key='all'>\n                        <Nav.Link active={activePage === \"all\"} className=\"cursor-pointer\" href=\"#\" eventKey='all' onClick={() => onClickEvent('all')}>\n                            All\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='draft'>\n                        <Nav.Link active={activePage === \"draft\"} className=\"cursor-pointer\" href=\"#\" eventKey='draft' onClick={() => onClickEvent('draft')}>\n                            Draft\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='approval'>\n                        <Nav.Link active={activePage === \"approval\"} className=\"cursor-pointer\" href=\"#\" eventKey='approval' onClick={() => onClickEvent('approval')}>\n                            Awaiting Approval\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='approve'>\n                        <Nav.Link active={activePage === \"approve\"} className=\"cursor-pointer\" href=\"#\" eventKey='approve' onClick={() => onClickEvent('approve')}>\n                            Awaiting Payment\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='paid'>\n                        <Nav.Link active={activePage === \"paid\"} className=\"cursor-pointer\" href=\"#\" eventKey='paid' onClick={() => onClickEvent('paid')}>\n                            Paid\n                        </Nav.Link>\n                    </Nav.Item>\n                    {/* <Nav.Item as=\"li\" key='repeating'>\n                        <Nav.Link className=\"cursor-pointer\" href=\"#\" eventKey='repeating' onClick={()=>onClickEvent('repeating')}>\n                           Repeating\n                        </Nav.Link>\n                    </Nav.Item>                         */}\n                </Nav>\n\n                {/* <Tab.Content>\n                    <Tab.Pane eventKey='trading'  key='trading'>\n                        <Trading />\n                    </Tab.Pane>                        \n                    <Tab.Pane eventKey='transaction'  key='transaction'>\n                        <Transaction />\n                    </Tab.Pane>                        \n                    <Tab.Pane eventKey='dividend'  key='dividend'>\n                        <Dividend />\n                    </Tab.Pane>                        \n                    <Tab.Pane eventKey='dump_box'  key='dump_box'>\n                        <DumpBox />\n                    </Tab.Pane>                        \n                </Tab.Content> */}\n            </Tab.Container>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {!loading && error && (\n                                <Alert variant=\"danger\" className=\"my-2\">\n                                    {error}\n                                </Alert>\n                            )}\n                            <Row className=\"mb-2\">\n                                <Col sm={4}>\n                                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                        <span className='me-2'>Show:</span>\n                                        <Form.Select style={{ width: '40%' }} onChange={(e) => { setPageSize(e.target.value); getInvoice(pageSize, 1) }}>\n                                            <option value='10'>10</option>\n                                            <option value='15'>20</option>\n                                            <option value='20'>30</option>\n                                        </Form.Select>\n                                    </div>\n                                </Col>\n\n                                <Col sm={8}>\n                                    <div className=\"text-sm-end mt-2 mt-sm-0\">\n                                        {user_role.includes('add_invoice') ?\n                                            <Link className=\"btn btn-success mb-2 me-1\" to='/app/invoice_form'>\n                                                <i className=\"mdi mdi-plus-circle me-1\"></i> Add\n                                            </Link> :\n                                            <>\n                                            </>\n                                        }\n\n                                        {/* <ExcelFile element={<Button className=\"btn btn-light mb-2\">Export</Button>}>\n                                            <ExcelSheet data={users} name=\"Users\">\n                                                <ExcelColumn label=\"Name\" value=\"name\"/>\n                                                <ExcelColumn label=\"Phone\" value=\"phone\"/>\n                                                <ExcelColumn label=\"Email\" value=\"email\"/>\n                                                <ExcelColumn label=\"Role\" value={(col)=> col.groups[0].name}/>                                            \n                                            </ExcelSheet>\n                                        </ExcelFile> */}\n\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            {loading ? <p>Loading...</p> :\n                                <>\n                                    {filteredIncoices.length > 0 ?\n                                        <>\n                                            <Table\n                                                columns={columns}\n                                                data={filteredIncoices}\n                                                pageSize={pageSize}\n                                                isSortable={true}\n                                                pagination={false}\n                                                isSearchable={true}\n                                                tableClass=\"table-nowrap table-hover\"\n                                                searchBoxClass=\"\"\n                                            />\n                                            <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={total_page} current_page={current_page} active={active} />\n                                        </>\n                                        :\n                                        'No data available!'}</>}\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add contact modal */}\n\n\n\n\n\n        </>\n    );\n};\n\nexport default Invoice;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert, InputGroup, Modal } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Table from '../../components/Table';\nimport { useLocation } from 'react-router-dom';\nimport { ActionColumn } from './invoice'\nimport Pagination from '../../components/CustomPagination';\nimport classNames from 'classnames';\nimport FeatherIcon from 'feather-icons-react';\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getContactInvoice, getContactDetails, getContactInvoiceSetting, updateContactInvoiceSetting, getContactService } from '../../redux/actions';\n\n\nconst api = new APICore()\n\n\nconst invoicesColumns = [\n    {\n        Header: 'Invoice No',\n        accessor: 'invoice_no',\n        sort: true,\n    },\n    {\n        Header: 'Contact',\n        accessor: 'contact_id.name',\n        sort: true,\n    },\n    {\n        Header: 'Date',\n        accessor: 'date',\n        sort: true,\n    },\n    {\n        Header: 'Due Date',\n        accessor: 'due_date',\n        sort: true,\n    },\n    {\n        Header: 'Tax Type',\n        accessor: 'tax_type',\n        sort: true,\n    },\n    {\n        Header: 'Sub Total',\n        accessor: 'sub_total',\n        sort: true,\n    },\n    {\n        Header: 'Discount',\n        accessor: 'discount',\n        sort: true,\n        Cell: (row) => {\n            return <div>{(row.row.original.discount).toFixed(2)}</div>;\n        }\n    },\n    {\n        Header: 'Total Tax',\n        accessor: 'total_tax',\n        sort: true,\n    },\n    {\n        Header: 'Total Amount',\n        accessor: 'total_amount',\n        sort: true,\n    },\n    {\n        Header: 'Status',\n        accessor: 'status',\n        sort: true,\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        Cell: ActionColumn,\n    },\n\n];\n\nconst servicesColumns = [\n\n    {\n        Header: 'Contact',\n        accessor: 'contact_id.name',\n        sort: true,\n    },\n    {\n        Header: 'Service Type',\n        accessor: 'service_type',\n        sort: true,\n    },\n    {\n        Header: 'Contact Mode',\n        accessor: 'contact_mode',\n        sort: true,\n    },\n    {\n        Header: 'Payment Terms',\n        accessor: 'payment_terms',\n        sort: true,\n    },\n    {\n        Header: 'Tax Rate',\n        accessor: 'tax_rate',\n        sort: true,\n    },\n    {\n        Header: 'Unit Price',\n        accessor: 'unit_price',\n        sort: true,\n    },\n\n];\n\n\nconst ContactDetails = () => {\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const [contactId, setContactId] = useState();\n    const [pageSize, setPageSize] = useState(10);\n    const [invoiceSetting, setInvoiceSetting] = useState({\n        \"auto_approve\": false,\n        \"auto_invoice_send\": false,\n        \"reminder_service\": false,\n        \"contact_id\": contactId,\n        \"reminder_settings\": {\n            \"is_include_public_link\": false,\n            \"is_include_pdf_link\": false,\n            \"minimum_invoice_amount\": 0,\n            \"reminder_type\": \"\",\n            \"days\": []\n        }\n    });\n    const invoice_list = useSelector(state => state.Contact.invoice_list);\n    const invoice_list_pagination_data = useSelector(state => state.Contact.invoice_list_pagination_data);\n    const contact_details = useSelector(state => state.Contact.contact_details);\n    const invoice_setting = useSelector(state => state.Contact.invoice_setting);\n    const loading = useSelector(state => state.Contact.loading);\n    const invoice_setting_error = useSelector(state => state.Contact.invoice_setting_error);\n    const invoice_setting_success = useSelector(state => state.Contact.invoice_setting_success);\n    const services = useSelector(state => state.Service.contact_services);\n\n\n    useEffect(() => {\n        const state = location.state\n        if (state) {\n            setContactId(parseInt(state));\n        }\n    }, [])\n\n\n    const visitPage = (page) => {\n        dispatch(getContactInvoice(contactId, pageSize, page));\n    };\n\n    const previous_number = () => {\n        dispatch(getContactInvoice(contactId, pageSize, invoice_list_pagination_data.previous));\n    };\n\n    const next_number = () => {\n        dispatch(getContactInvoice(contactId, pageSize, invoice_list_pagination_data.next));\n    };\n\n    // console.log(\"invoice_list_pagination_data\", invoice_list_pagination_data)\n    // console.log(\"invoice_list\", invoice_list)\n    // console.log(\"contact_details\", contact_details)\n    // console.log(\"due_in\", invoiceSetting)\n\n    useEffect(() => {\n        if (contactId !== undefined && contactId !== null) {\n            dispatch(getContactInvoice(contactId, pageSize, 1))\n            dispatch(getContactDetails(contactId))\n            dispatch(getContactInvoiceSetting(contactId))\n            dispatch(getContactService(contactId)); \n        }\n    }, [contactId])\n\n\n    useEffect(() => {\n        if (invoice_setting !== undefined) {\n            setInvoiceSetting(invoice_setting)\n        }\n    }, [invoice_setting])\n\n\n    const mystyle = {\n        width: \"12rem\"\n    };\n\n    // const myDayStyle = {\n    //     \"display\": \"inline-block\",\n    //     \"width\": \"5rem\",\n    //     \"margin\": \"0 10px 10px\",\n    //     \"boxSizing\": \"border-box\",\n    //     \"border\": \"1px solid #ddd\",\n    //     \"borderBottomColor\": \"#d1d1d1\",\n    //     \"borderRadius\": \"3px\",\n    //     \"textAlign\": \"center\",\n    //     \"backgroundColor\": \"#fff\",\n    //     \"transition\": \"all .25s\",\n    //     \"cursor\": \"pointer\"\n    // };\n\n    const invoiceSettingChange = (e) => {\n        const data = { ...invoiceSetting }\n        const target = e.target.name;\n        const value = e.target.checked;\n        data[target] = value;\n\n        // if (target === \"reminder_service\" && value === false) {\n        // const id = invoiceSetting?.reminder_settings?.id;\n        // data['reminder_settings'] = {\n        //     \"id\":id,\n        //     \"contact_id\": contactId,\n        //     \"is_include_public_link\": false,\n        //     \"is_include_pdf_link\": false,\n        //     \"minimum_invoice_amount\": 0,\n        //     \"reminder_type\": \"\",\n        //     \"days\": []\n        // }\n        // }\n        setInvoiceSetting(data);\n    }\n\n    const invoiceReminderSettingChange = (e) => {\n        const reminder_settings = { ...invoiceSetting.reminder_settings }\n        const target = e.target.name;\n        let value = null;\n        if (target === \"minimum_invoice_amount\" || target === \"reminder_type\") {\n            value = e.target.value;\n        }\n\n        else {\n            value = e.target.checked;\n        }\n\n        reminder_settings[target] = value;\n        const data = { ...invoiceSetting }\n        data['reminder_settings'] = reminder_settings;\n\n        setInvoiceSetting(data);\n    }\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [inputDate, setInputDate] = useState(\"\");\n\n\n    const daySubmit = () => {\n        if (inputDate !== \"\" && parseInt(inputDate) > 0) {\n            const reminder_settings = { ...invoiceSetting.reminder_settings }\n            const days = reminder_settings?.days\n\n            let newDays = []\n            if (days !== undefined) {\n                newDays = [...days]\n            }\n            if (!newDays.includes(inputDate)) {\n                newDays.push(inputDate)\n            }\n            reminder_settings[\"days\"] = newDays;\n            const data = { ...invoiceSetting }\n            data['reminder_settings'] = reminder_settings;\n            setInvoiceSetting(data);\n\n\n            setInputDate(\"\")\n            setShow(false);\n        }\n\n    }\n\n\n    const deleteDay = (value) => {\n        const reminder_settings = { ...invoiceSetting.reminder_settings }\n        const days = reminder_settings?.days\n\n        let newDays = [...days]\n        if (days !== undefined && newDays.includes(value)) {\n            const index = newDays.indexOf(value);\n\n            if (index !== -1) {\n                newDays.splice(index, 1);\n            }\n        }\n\n        reminder_settings[\"days\"] = newDays;\n        const data = { ...invoiceSetting }\n        data['reminder_settings'] = reminder_settings;\n        setInvoiceSetting(data);\n\n    }\n\n    const finalSubmit = () => {\n        // console.log(\"data\", invoiceSetting)\n        // console.log(\"length\", Object.keys(invoiceSetting?.reminder_settings).length)\n        const newData = { ...invoiceSetting }\n        newData[\"contact_id\"] = contactId;\n        newData['reminder_settings'][\"contact_id\"] = contactId;\n        dispatch(updateContactInvoiceSetting(newData))\n    }\n\n\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Contact', path: '/app/contact', active: false },\n                    { label: 'Contact Details', path: '/app/contact_details', active: true },\n                ]}\n                title={'Contact Report'}\n            />\n            <Row>\n                <Col md={4} xl={4}>\n                    <Card>\n                        <Card.Header>\n                            <p>Personal Details</p>\n                        </Card.Header>\n                        <Card.Body>\n                            <div className=\"container\">\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-sm\">\n                                        <h5>Name: </h5>\n                                        <p>{contact_details?.name}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Contact ID:</h5>\n                                        <p>{contact_details?.client_id}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Contact Type:</h5>\n                                        <p>{contact_details?.contact_type}</p>\n\n                                    </div>\n                                </div>\n\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Contact Person:</h5>\n                                        <p>{contact_details?.contact_person}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Phone:</h5>\n                                        <p>{contact_details?.phone}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Email:</h5>\n                                        <p>{contact_details?.email}</p>\n                                    </div>\n                                </div>\n\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Country:</h5>\n                                        <p>{contact_details?.country?.name}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>City:</h5>\n                                        <p>{contact_details?.city?.name}</p>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <h5 className='me-2'>Billing Address:</h5>\n                                        <p>{contact_details?.billing_address}</p>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col md={8} xl={8}>\n                    <Card>\n                        <Card.Header>\n                            <p style={{ marginBottom: '0px !important' }}>Services List</p>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <span className=\"text-sm mt-2 mt-sm-0\">\n                                <Link className=\"btn btn-info mb-2 me-1\" to={{ pathname: '/app/service_form', state: { 'services': services, 'contactId': contactId } }}>\n                                    <i className=\"mdi mdi-pencil me-1\"></i> Edit\n                                </Link>\n\n                            </span>\n\n                            {services.length > 0 ?\n                                <>\n                                    <Table\n                                        columns={servicesColumns}\n                                        data={services}\n                                        pageSize={pageSize}\n                                        isSortable={true}\n                                        pagination={false}\n                                        isSearchable={true}\n                                        tableClass=\"table-nowrap table-hover\"\n                                        searchBoxClass=\"\"\n                                    />\n                                    {/* <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={invoice_list_pagination_data.total_page} current_page={invoice_list_pagination_data.current_page} active={invoice_list_pagination_data.active} /> */}\n                                </>\n                                :\n                                'No data available!'}\n                        </Card.Body>\n                    </Card>\n\n                </Col>\n\n            </Row>\n\n            <Row>\n                <Col md={4} xl={4}>\n                    <Card>\n                        <Card.Header>\n                            <p>Invoice Setting</p>\n                        </Card.Header>\n                        <Card.Body>\n                            {!loading && invoice_setting_error && !invoice_setting_success && (\n                                <Alert variant=\"danger\" className=\"my-2\">\n                                    {invoice_setting_error}\n                                </Alert>\n                            )}\n\n                            {!loading && invoice_setting_success && !invoice_setting_error && (\n                                <Alert variant=\"success\" className=\"my-2\">\n                                    {invoice_setting_success}\n                                </Alert>\n                            )}\n                            <InputGroup className=\"mb-3\">\n                                <InputGroup.Text style={mystyle}>\n                                    Auto Approve</InputGroup.Text>\n                                <InputGroup.Checkbox checked={invoiceSetting?.auto_approve} name=\"auto_approve\" onChange={(e) => invoiceSettingChange(e)} />\n                            </InputGroup>\n\n                            <InputGroup className=\"mb-3\">\n                                <InputGroup.Text style={mystyle}>\n                                    Auto Invoice Send</InputGroup.Text>\n                                <InputGroup.Checkbox checked={invoiceSetting?.auto_invoice_send} name=\"auto_invoice_send\" onChange={(e) => invoiceSettingChange(e)} />\n                            </InputGroup>\n\n                            <InputGroup className=\"mb-3\">\n                                <InputGroup.Text style={mystyle}>\n                                    Reminder Service</InputGroup.Text>\n                                <InputGroup.Checkbox name=\"reminder_service\" checked={invoiceSetting?.reminder_service} onChange={(e) => invoiceSettingChange(e)} />\n                            </InputGroup>\n\n                            {invoiceSetting?.reminder_service ?\n                                (\n                                    <div style={{ marginLeft: \"1rem\" }}>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text style={mystyle}>\n                                                Is Inclued Public Link</InputGroup.Text>\n                                            <InputGroup.Checkbox name=\"is_include_public_link\" checked={invoiceSetting?.reminder_settings?.is_include_public_link} onChange={(e) => invoiceReminderSettingChange(e)} />\n                                        </InputGroup>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text style={mystyle}>\n                                                Is Inclued Pdf Link</InputGroup.Text>\n                                            <InputGroup.Checkbox name=\"is_include_pdf_link\" checked={invoiceSetting?.reminder_settings?.is_include_pdf_link} onChange={(e) => invoiceReminderSettingChange(e)} />\n                                        </InputGroup>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text style={mystyle}>\n                                                Reminder Type</InputGroup.Text>\n                                            <Form.Check\n                                                type=\"radio\"\n                                                name=\"reminder_type\" checked={invoiceSetting?.reminder_settings?.reminder_type === \"due_in\"} onChange={(e) => invoiceReminderSettingChange(e)}\n                                                label=\"Due In\"\n                                                value=\"due_in\"\n                                                style={{ \"marginRight\": \"1rem\", \"marginLeft\": \"1rem\", marginTop: \"0.5rem\" }}\n                                            />\n                                            <Form.Check\n                                                type=\"radio\"\n                                                name=\"reminder_type\" checked={invoiceSetting?.reminder_settings?.reminder_type === \"over_due\"} onChange={(e) => invoiceReminderSettingChange(e)}\n                                                label=\"Over Due\"\n                                                value=\"over_due\"\n                                                style={{ \"marginRight\": \"1rem\", marginTop: \"0.5rem\" }}\n                                            />\n                                        </InputGroup>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text style={mystyle}>\n                                                Minimum Invoice Amount</InputGroup.Text>\n                                            <Form.Control type=\"number\" name=\"minimum_invoice_amount\" value={invoiceSetting?.reminder_settings?.minimum_invoice_amount\n                                            } onChange={(e) => invoiceReminderSettingChange(e)} />\n                                        </InputGroup>\n                                        <InputGroup className=\"mb-3\">\n                                            <InputGroup.Text style={{ width: '6rem' }}>\n                                                Days</InputGroup.Text>\n                                            {invoiceSetting?.reminder_settings?.days?.map(day => (\n\n                                                <div key={day} style={{ \"margin\": \"0 5px\" }}>\n                                                    <div>\n                                                        <InputGroup.Text style={{ width: '6rem' }}>\n                                                            {day} days <i onClick={() => deleteDay(day)} style={{ marginLeft: \".8rem\", color: \"red\", cursor: \"pointer\" }} className=\"fe-delete\"></i>\n                                                        </InputGroup.Text>\n\n                                                    </div>\n                                                </div>\n\n                                            ))}\n                                            <>\n\n                                                <Button variant=\"primary\" onClick={handleShow}>\n                                                    Add\n                                                </Button>\n\n                                                {/* <MyVerticallyCenteredModal\n                                                    show={show}\n                                                    onHide={handleClose}\n                                                /> */}\n\n                                                <Modal show={show}\n\n                                                    size=\"sm\"\n                                                    aria-labelledby=\"contained-modal-title-vcenter\"\n                                                    centered\n                                                >\n                                                    <Modal.Header>\n                                                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                                                            Add Reminder Days\n                                                        </Modal.Title>\n                                                    </Modal.Header>\n                                                    <Modal.Body>\n                                                        <Form>\n                                                            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                                                                <Form.Label>Reminder Type</Form.Label>\n                                                                <Form.Select disabled aria-label=\"Default select example\">\n                                                                    <option selected={invoiceSetting?.reminder_settings?.reminder_type === \"due_in\"} value=\"due_in\">Due In</option>\n                                                                    <option selected={invoiceSetting?.reminder_settings?.reminder_type === \"over_due\"} value=\"over_due\">Over Due</option>\n                                                                </Form.Select>\n                                                            </Form.Group>\n                                                            <Form.Group\n                                                                className=\"mb-3\"\n                                                                controlId=\"exampleForm.ControlTextarea1\"\n                                                            >\n                                                                <Form.Label>Day</Form.Label>\n                                                                <Form.Control onChange={(e) => { setInputDate(e.target.value) }} type=\"number\" />\n                                                            </Form.Group>\n                                                        </Form>\n                                                    </Modal.Body>\n                                                    <Modal.Footer>\n                                                        <Button variant=\"secondary\" onClick={handleClose}>\n                                                            Close\n                                                        </Button>\n                                                        <Button variant=\"primary\" onClick={() => daySubmit()}>\n                                                            Submit\n                                                        </Button>\n                                                    </Modal.Footer>\n                                                </Modal>\n\n                                            </>\n                                        </InputGroup>\n                                    </div>\n                                ) :\n                                <></>\n                            }\n\n                            <Button variant=\"primary\" onClick={() => finalSubmit()}>\n                                Submit\n                            </Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={8} xl={8}>\n\n                    <Card>\n                        <Card.Header>\n                            <p style={{ marginBottom: '0px !important' }}>Invoice List</p>\n                        </Card.Header>\n\n                        <Card.Body>\n\n                            {invoice_list.length > 0 ?\n                                <>\n                                    <Table\n                                        columns={invoicesColumns}\n                                        data={invoice_list}\n                                        pageSize={pageSize}\n                                        isSortable={true}\n                                        pagination={false}\n                                        isSearchable={true}\n                                        tableClass=\"table-nowrap table-hover\"\n                                        searchBoxClass=\"\"\n                                    />\n                                    <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={invoice_list_pagination_data.total_page} current_page={invoice_list_pagination_data.current_page} active={invoice_list_pagination_data.active} />\n                                </>\n                                :\n                                'No data available!'}\n                        </Card.Body>\n                    </Card>\n\n                </Col>\n            </Row>\n\n\n        </>\n    );\n};\nexport default ContactDetails;\n","import React,{ useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport FeatherIcon from 'feather-icons-react';\nimport { APICore } from '../../../helpers/api/apiCore';\n// components\nimport PageTitle from '../../../components/PageTitle';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { logoutUser } from '../../../redux/actions';\n\nconst api = new APICore();\n\nconst ChangePassword = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const[old_password,setOldPassword] = useState('');\n    const[new_password,setNewPassword] = useState('');\n    const[confirm_password,setConfirmPassword] = useState('');\n    const[error,setError] = useState(null);\n\n    const handleSubmit = (e:any) =>{\n        e.preventDefault();\n        api.update(`/api/change_password`,{'old_password':old_password,'new_password':new_password})\n            .then(res=>{\n                \n                if(res.data.success){\n                    history.push('/auth/logout');\n                }else{\n                    \n                   setError(res.data.error) \n                }\n                \n            })\n            .catch(err => {\n                setError(err);\n            })\n    }\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'My Profile', path: '/app/my-profile', active: true },\n                ]}\n                title={'My Profile'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col sm={2}>\n                                    <Link to='/app/my-profile'>\n                                    <Button variant=\"white\"  style={{width:'100%',fontWeight: '100 !important', textAlign: 'start',marginBottom: '8px',border: 'none'}}>\n                                        <FeatherIcon icon=\"user\" size={15} className=\"me-2\"/>My Profile\n                                    </Button> \n                                    </Link>\n\n                                    <Link to='/app/change_password'>\n                                    <Button variant=\"primary\"  style={{width:'100%',fontWeight: '100 !important', textAlign: 'start'}}>\n                                        <FeatherIcon icon=\"lock\" size={15} className=\"me-2\"/>Change Password\n                                    </Button> \n                                    </Link>\n                                </Col>\n                                <Col sm={10} style={{display: 'flex',justifyContent: 'center'}}>\n                                    \n                                    <Form style={{width: '50%'}} onSubmit={(e)=>handleSubmit(e)}>\n                                        {error && (\n                                            <Alert variant=\"danger\" className=\"my-2\">\n                                                {error}\n                                            </Alert>\n                                        )}\n                                            \n                                        <Form.Group  className=\"mb-3\">\n                                            <Form.Label  >\n                                                Old Password\n                                            </Form.Label>\n                                            <Form.Control type=\"password\" name=\"old_password\" value={old_password}  placeholder=\"Enter Old Password\"   size='lg' onChange={(e)=>setOldPassword(e.target.value)}/>\n                                        </Form.Group>\n                                        <Form.Group  className=\"mb-3\">\n                                            <Form.Label  >\n                                                New Password\n                                            </Form.Label>\n                                            <Form.Control type=\"password\" name=\"new_password\" value={new_password}  placeholder=\"Enter New Password\"   size='lg' onChange={(e)=>setNewPassword(e.target.value)}/>\n                                            {new_password.length > 0 && new_password.length < 4 && <p style={{color: 'red'}}>Password must be minimum 4 characters</p>}\n                                        </Form.Group>\n                                        <Form.Group  className=\"mb-3\">\n                                            <Form.Label  >\n                                                Confirm Password\n                                            </Form.Label>\n                                            <Form.Control type=\"password\" name=\"confirm_password\" value={confirm_password}  placeholder=\"Confirm Password\"   size='lg' onChange={(e)=>setConfirmPassword(e.target.value)}/>\n                                            {confirm_password.length > 0 && new_password !== confirm_password && <p style={{color: 'red'}}>Password not match</p>}\n                                        </Form.Group>                                            \n                                            \n                                        {old_password.length === 0 || new_password.length < 4 || confirm_password.length < 4 ?\n                                        <Button  variant=\"primary\" type='submit'  style={{width:'35%',marginTop: '20px'}} disabled>\n                                            Save\n                                        </Button> :\n                                        <Button  variant=\"primary\" type='submit'  style={{width:'35%',marginTop: '20px'}} >\n                                            Save\n                                        </Button>}\n                                        \n                                        \n\n                                    </Form>               \n                                </Col>\n                            </Row>   \n                                      \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ChangePassword;\n","import React, { useState,useEffect } from 'react';\nimport { APICore } from '../../helpers/api/apiCore';\n\nimport { Row, Col, Card, Button,Form, Alert } from 'react-bootstrap';\nimport {useHistory, useLocation} from 'react-router-dom';\n// components\n\nimport PageTitle from '../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { getUserRole } from '../../redux/actions';\n\nconst api = new APICore();\n\n\n\nconst RoleForm = () => {\n    const dispatch = useDispatch();\n    const location = useLocation()\n    const role = location.state;\n    const[permission,setPermission] = useState([]);\n    const[error,setError] = useState(null);\n    const[role_name,setRoleName] = useState('');\n    const[role_permission,setRolePermission] = useState([]);\n    const history = useHistory();\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if(role){\n            api.updatePatch(`/api/groups/${role.id}/`,{'name':role_name,'permissions':role_permission})\n            .then(res=>{\n                \n                if(res.data.success){\n                    dispatch(getUserRole());\n                    history.push('/app/roles');\n                }else{\n                    setError(res.data.error)\n                    \n                }\n                \n            })\n            .catch(err => {\n                setError(err)\n            })\n        }else{\n            api.create(`/api/groups/`,{'name':role_name,'permissions':role_permission})\n            .then(res=>{\n                \n                if(res.data.success){\n                    dispatch(getUserRole());\n                    history.push('/app/roles');\n                }else{\n                    setError(res.data.error)\n                    \n                }\n                \n            })\n            .catch(err => {\n                setError(err)\n            })\n        }\n        \n    }\n\n    const handleChange = (e) =>{\n        const isChecked = e.target.checked;\n        \n        if(isChecked){\n            setRolePermission([...role_permission,parseInt(e.target.value)  ]);\n            \n        }else{\n            let index = role_permission.findIndex((x) => parseInt(x) === parseInt(e.target.value))\n            role_permission.splice(index,1)\n            setRolePermission([...role_permission])\n            \n        }\n    }\n    \n    useEffect(()=>{\n        api.get(`/api/permission`,{})\n        .then(res=>{\n            setPermission(res.data)\n        })\n        if (role){\n            setRoleName(role?.name)\n            const permissions = role?.permissions;\n            const permissionsId = permissions.map(permission=>{\n                return permission.id\n            })\n            setRolePermission(permissionsId)\n        }\n        \n        \n    },[])\n    \n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Roles', path: '/app/roles', active: false },\n                    { label: 'Add Role', path: '/app/add_role', active: true },\n                ]}\n                title={'Add Role'}\n            />\n\n            \n            <Card>\n                <Card.Body>\n                    \n                    \n                    \n                        <Form onSubmit={handleSubmit}>\n                        {error && (\n                            <Alert variant=\"danger\" className=\"my-2\">\n                                {error}\n                            </Alert>\n                        )}\n                            <Form.Group  className=\"mb-3\" style={{width: '20%'}}>\n                                <Form.Label  >\n                                    Role Name\n                                </Form.Label>\n                                <Form.Control type=\"text\" name=\"name\" value={role_name} placeholder=\"Enter Role Name\"   onChange={(e)=>setRoleName(e.target.value)}  required/>\n                            </Form.Group>  \n\n                            <Row>\n                                {permission.map((item)=>{\n                                    return(\n                                        <Form.Group as={Col} sm={3} className=\"mb-3\" key={item.id} onChange={(e)=>handleChange(e)}> \n                                                                       \n                                            <Form.Check label={item.name} value={item.id} checked={role_permission.includes(item.id)} />                              \n                                                                          \n                                        </Form.Group>\n                                    )\n                                })}\n                                \n                            </Row>\n                            \n                            <Link to='/app/roles'>                           \n                            <Button  variant=\"white\" type='button'  style={{width:'15%',marginTop: '20px',marginRight: 5}} >\n                                Back\n                            </Button> \n                            </Link>\n                            <Button  variant=\"primary\" type='submit'  style={{width:'15%',marginTop: '20px'}}>\n                                Save\n                            </Button> \n                            \n\n                        </Form>\n                            \n                            \n                                                    \n                </Card.Body>\n            </Card>\n                       \n\n            \n        </>\n    );\n};\n\nexport default RoleForm;\n","import React,{ useEffect, useState } from 'react';\nimport { Button, Form, Alert } from 'react-bootstrap';\nimport { APICore } from '../../helpers/api/apiCore';\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { Link, useHistory} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport AuthLayout from './AuthLayout';\nimport { useTranslation } from 'react-i18next';\nimport queryString from 'query-string';\n\nconst api = new APICore();\n\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <footer className=\"footer footer-alt\">\n            <p className=\"text-muted\">\n                {t(\"Don't have an account?\")}{' '}\n                <Link to={'#'} className=\"text-muted ms-1\">\n                    <b>{t('Sign Up')}</b>\n                </Link>\n            </p>\n        </footer>\n    );\n};\n\nconst PasswordReset = (props:any) => {\n    const history = useHistory();\n    const[new_password,setNewPassword] = useState('');\n    const[confirm_password,setConfirmPassword] = useState('');\n    const[error,setError] = useState(null);\n    const { t } = useTranslation();\n    \n    const qString = queryString.parse(props.location.search);\n    \n    const handleSubmit = (e:any) =>{\n        e.preventDefault();\n        try{\n            api.create(`/api/password_reset/confirm/`,{'token':qString.token,'password':new_password})\n            .then((res:any)=>{\n                \n                history.push('/auth/password_reset_success');        \n            })\n            .catch(err => {\n                setError(err)\n            })\n        }\n        catch(error:any){\n            setError(error);\n        }\n        \n    }\n    return (\n        <AuthLayout bottomLinks={<BottomLink />}>\n                <div className=\"\">\n                    \n                    <h3>{t('Reset your password')}</h3>\n                    <Form  onSubmit={(e)=>handleSubmit(e)}>\n                                        {error && (\n                                            <Alert variant=\"danger\" className=\"my-2\">\n                                                {error}\n                                            </Alert>\n                                        )}\n                                            \n                                       \n                                        <Form.Group  className=\"mb-3\">\n                                            <Form.Label  >\n                                                New Password\n                                            </Form.Label>\n                                            <Form.Control type=\"password\" name=\"new_password\" value={new_password}  placeholder=\"Enter New Password\"   size='lg' onChange={(e)=>setNewPassword(e.target.value)} required/>\n                                            \n                                        </Form.Group>\n                                        <Form.Group  className=\"mb-3\">\n                                            <Form.Label  >\n                                                Confirm Password\n                                            </Form.Label>\n                                            <Form.Control type=\"password\" name=\"confirm_password\" value={confirm_password}  placeholder=\"Confirm Password\"   size='lg' onChange={(e)=>setConfirmPassword(e.target.value)} required/>\n                                            {confirm_password.length > 0 && new_password !== confirm_password && <p style={{color: 'red'}}>Password not match</p>}\n                                        </Form.Group>                                            \n                                            \n                                        <div className='d-flex justify-content-between'>\n                                            {new_password !== confirm_password ?\n                                            <Button  variant=\"primary\" type='submit'  style={{width:'40%',marginTop: '20px'}} disabled>\n                                                Save\n                                            </Button> :\n                                            <Button  variant=\"primary\" type='submit'  style={{width:'40%',marginTop: '20px'}} >\n                                                Save\n                                            </Button>}\n                                            <Link to=\"/auth/login\" className=\"btn btn-primary waves-effect waves-light\" style={{width:'40%',marginTop: '20px'}}>\n                                                {t('Back to Home')}{' '}\n                                            </Link>\n                                        </div>\n                                        \n                                        \n                                        \n\n                                    </Form>               \n                    \n                </div>\n            </AuthLayout>\n    );\n};\n\nexport default PasswordReset;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\n// components\nimport AuthLayout from './AuthLayout';\n\n\n\n/* bottom link */\nconst BottomLink = () => {\n    const { t } = useTranslation();\n\n    return (\n        <footer className=\"footer footer-alt\">\n            <p className=\"text-muted\">\n                {t('2018 - ' + new Date().getFullYear() + ' © UBold theme by')}{' '}\n                <Link to=\"#\" className=\"text-muted\">\n                    {t('Coderthemes')}\n                </Link>\n            </p>\n        </footer>\n    );\n};\n\nconst PasswordResetSuccess = (state:any) => {\n    const { t } = useTranslation();\n    return (\n        <>\n            <AuthLayout bottomLinks={<BottomLink />}>\n                <div className=\"text-center\">\n                    \n                    <h3>{t('Success !')}</h3>\n                    <p className=\"text-muted font-14 mt-2\">\n                        {t('Password has been Reseted Successfully')}\n                        {/* <b>{state.location.state.email} </b> */}\n                    </p>\n                    <Link to=\"/auth/login\" className=\"btn w-100 btn-primary waves-effect waves-light mt-3\">\n                        {t('Back to Home')}{' '}\n                    </Link>\n                </div>\n            </AuthLayout>\n        </>\n    );\n};\n\nexport default PasswordResetSuccess;\n","import React from 'react';\nimport { Route, Redirect, RouteProps, RouteComponentProps } from 'react-router-dom';\n\nimport { APICore } from '../helpers/api/apiCore';\n\ninterface PrivateRouteProps {\n    component: React.FunctionComponent<RouteProps>;\n    roles?: string;\n}\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ component: Component, roles, ...rest }: PrivateRouteProps) => {\n    const api = new APICore();\n\n    return (\n        <Route\n            {...rest}\n            render={(props: RouteComponentProps) => {\n                if (api.isUserAuthenticated() === false) {\n                    // not logged in so redirect to login page with the return url\n                    return (\n                        <Redirect\n                            to={{\n                                pathname: '/auth/login',\n                                state: { from: props['location'] },\n                            }}\n                        />\n                    );\n                }\n\n                const loggedInUser = api.getLoggedInUser();\n\n                // check if route is restricted by role\n                if (roles && roles.indexOf(loggedInUser.role) === -1) {\n                    // role not authorised so redirect to home page\n                    return <Redirect to={{ pathname: '/' }} />;\n                }\n                // authorised so return component\n                return <Component {...props} />;\n            }}\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\n// import { APICore } from '../helpers/api/apiCore';\n\nconst Root = () => {\n    // const api = new APICore();\n\n    const getRootUrl = () => {\n        let url: string = 'dashboard';\n\n        // // check if user logged in or not and return url accordingly\n        // if (api.isUserAuthenticated() === false) {\n        //     url = 'landing';\n        // } else {\n        //     url = 'dashboard-1';\n        // }\n        return url;\n    };\n\n    const url = getRootUrl();\n\n    return <Redirect to={`/${url}`} />;\n};\n\nexport default Root;\n","import React, { useEffect, useState } from 'react';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { Row, Col, Card, Form, Alert } from 'react-bootstrap';\nimport { useLocation } from 'react-router-dom';\n// components\nimport Table from '../../components/Table';\nimport PageTitle from '../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContactService } from '../../redux/actions';\n\n\n\n// const ExcelFile = ReactExport.ExcelFile;\n// const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n// const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst api = new APICore();\n\n\n// // action column render\n// const ActionColumn = withSwal(({ row, swal }) => {\n//     /*\n//      *   modal handeling\n//      */\n//     const dispatch = useDispatch();\n//     const user_role = useSelector((state)=> state.Role.user_role);\n    \n\n//     /*\n//     handle form submission\n//     */\n//     const onSubmit = (formData) => {\n        \n//         api.updatePatch(`/api/service/${row.original.id}/`,formData)\n//         .then(res=>{\n            \n//             if(res.data.success){\n                \n//             }else{\n//                 swal.fire({\n//                     title: res.data.error,\n//                 }) \n                \n//             }\n            \n//         })\n//         .catch(err => {\n//             swal.fire({\n//                 title: err,\n//             })\n//         })\n       \n//     };\n\n//     const onDelete = () => {\n//         swal.fire({\n//                 title: 'Are you sure?',\n//                 text: \"You won't be able to revert this!\",\n//                 icon: 'warning',\n//                 showCancelButton: true,\n//                 confirmButtonColor: '#28bb4b',\n//                 cancelButtonColor: '#f34e4e',\n//                 confirmButtonText: 'Yes, delete it!',\n//             })\n//             .then(function(result){\n//                 if(result.value){\n//                     // dispatch(deleteContact(row.original.id))\n//                     api.delete(`/api/service/${row.original.id}/`)\n//                 .then(res=>{\n                    \n//                     swal.fire(\n//                         'Deleted!',\n//                         'Account has been deleted.',\n//                         'success'\n//                     );            \n//                 })\n//                 .catch(err => {\n//                     swal.fire({\n//                         title: err,\n//                     }\n//                     );\n//                 })\n//                 }else if(result.dismiss === 'cancel'){\n                    \n//                 }\n//             })        \n//     }\n\n//     return (\n//         <>\n\n//             { user_role.includes('change_service') ?\n//                 <Link to=\"#\" className=\"action-icon\" >\n//                     <i className=\"mdi mdi-square-edit-outline\"></i>\n//                 </Link>:\n//                 <Link to=\"#\" className=\"action-icon\"  style={{pointerEvents: 'none'}}>\n//                     <i className=\"mdi mdi-square-edit-outline\"></i>\n//                 </Link>\n//             }\n            \n//             { user_role.includes('delete_service') ?\n//                 <Link to=\"#\" className=\"action-icon\" onClick={()=>onDelete()}>\n//                     <i className=\"mdi mdi-delete\"></i>\n//                 </Link>:\n//                 <Link to=\"#\" className=\"action-icon\" style={{pointerEvents: 'none'}}>\n//                     <i className=\"mdi mdi-delete\"></i>\n//                 </Link>\n//             }\n            \n//         </>\n//     );\n// });\n\nconst columns = [\n    \n    {\n        Header: 'Contact',\n        accessor: 'contact_id.name',\n        sort: true,\n    },\n    {\n        Header: 'Service Type',\n        accessor: 'service_type',\n        sort: true,\n    },\n    {\n        Header: 'Contact Mode',\n        accessor: 'contact_mode',\n        sort: true,\n    },\n    {\n        Header: 'Payment Terms',\n        accessor: 'payment_terms',\n        sort: true,\n    },\n    {\n        Header: 'Tax Rate',\n        accessor: 'tax_rate',\n        sort: true,\n    },\n    {\n        Header: 'Unit Price',\n        accessor: 'unit_price',\n        sort: true,\n    },\n    \n];\n\nconst Service = () => {\n    const dispatch = useDispatch();\n    const location = useLocation();\n    const [contact,setContact] = useState({});\n    const services = useSelector(state => state.Service.contact_services);\n    // const previous = useSelector(state => state.Service.previous);\n    // const next = useSelector(state => state.Service.next);\n    // const current_page = useSelector(state => state.Service.current_page);\n    // const total_page = useSelector(state => state.Service.total_page);\n    // const active = useSelector(state => state.Service.active);\n    const user_role = useSelector((state)=> state.Role.user_role);\n    const loading = useSelector(state => state.Service.loading);\n    const error = useSelector(state => state.Service.error);\n    const [pageSize,setPageSize] = useState(10);\n    /*\n     *   modal handeling\n     */\n  \n\n    // const visitPage = (page) => {\n    //     dispatch(getService(pageSize,page));\n    // };\n\n    // const previous_number = () => {\n    //     dispatch(getService(pageSize,previous));\n    // };\n\n    // const next_number = () => {\n    //     dispatch(getService(pageSize,next));\n    // };\n\n    /*\n    handle form submission\n    */\n    \n\n\n    useEffect(()=>{ \n        const state = location.state;\n        setContact(state);\n        dispatch(getContactService(state.id));   \n    },[pageSize])\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Service', path: '/app/service', active: false },\n                    { label: 'Contact Service', path: '/app/service_by_contact', active: true },\n                ]}\n                title={`Service of ${contact.name}`}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                        {!loading && error && (\n                            <Alert variant=\"danger\" className=\"my-2\">\n                                {error}\n                            </Alert>\n                        )}\n                            <Row className=\"mb-2\">\n                                <Col sm={4}>\n                                    <div style={{display: 'flex',flexDirection: 'row',alignItems: 'center'}}>\n                                        <span className='me-2'>Show:</span>\n                                        <Form.Select style={{width: '40%'}} onChange={(e)=>{setPageSize(e.target.value)}}>\n                                            <option value='10'>10</option>\n                                            <option value='15'>20</option>\n                                            <option value='20'>30</option>\n                                        </Form.Select>\n                                    </div>\n                                </Col>\n\n                                <Col sm={8}>\n                                    <div className=\"text-sm-end mt-2 mt-sm-0\">\n                                        { user_role.includes('change_service') ?\n                                            <Link className=\"btn btn-info mb-2 me-1\" to={{pathname:'/app/service_form',state: {'services':services,'contactId':contact.id}}}>\n                                            <i className=\"mdi mdi-pencil me-1\"></i> Edit\n                                            </Link>:\n                                            <>\n                                            </>\n                                        }\n                                        \n                                        {/* <ExcelFile element={<Button className=\"btn btn-light mb-2\">Export</Button>}>\n                                            <ExcelSheet data={users} name=\"Users\">\n                                                <ExcelColumn label=\"Name\" value=\"name\"/>\n                                                <ExcelColumn label=\"Phone\" value=\"phone\"/>\n                                                <ExcelColumn label=\"Email\" value=\"email\"/>\n                                                <ExcelColumn label=\"Role\" value={(col)=> col.groups[0].name}/>                                            \n                                            </ExcelSheet>\n                                        </ExcelFile> */}\n  \n                                    </div>\n                                </Col>\n                            </Row>\n                            \n                            {loading ? <p>Loading...</p>:\n                            <>\n                            {services.length > 0 ?\n                            <>\n                            <Table\n                                columns={columns}\n                                data={services}\n                                pageSize={pageSize}\n                                isSortable={true}\n                                pagination={true}\n                                isSearchable={true}\n                                tableClass=\"table-nowrap table-hover\"\n                                searchBoxClass=\"\"\n                            />\n                            {/* <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={total_page} current_page={current_page} active={active}/> */}\n                            </>\n                            :\n                            'No data available!'}</>}\n                            \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add contact modal */}\n            \n            \n            \n            \n            \n        </>\n    );\n};\n\nexport default Service;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { Link, } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { useLocation, useHistory } from 'react-router-dom';\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getAllContact } from '../../redux/actions';\n\nconst api = new APICore()\n\n\n\n\nconst ServiceForm = () => {\n    const location = useLocation();\n    const history = useHistory();\n    const [oldItems, setOldItems] = useState([]);\n    const [contactId, setContactId] = useState('');\n    const [deletedItems, setDeletedItems] = useState([]);\n    // const[isEdit,setIsEdit] = useState(false);\n    // const user_role = useSelector((state:RootState)=> state.Role.user_role);\n    // const { user } = useSelector((state: RootState) => ({\n        //     user: state.Auth.user,\n        // }));\n        \n\n    const [items, setItems] = useState({\n        contact_id: contactId ? contactId : '',\n        service_type: '',\n        contact_mode: '',\n        payment_terms: '',\n        tax_rate: '',\n        unit_price: ''\n    });\n    const [newItems, setNewItems] = useState([]);\n\n    const dispatch = useDispatch();\n    const contacts = useSelector((state) => state.Contact.all_contact);\n    const cloading = useSelector((state) => state.Contact.loading);\n    const [rloading, setRloading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(null);\n\n    const ContactChange = (e) => {\n        let items = [...newItems];\n        items.forEach((item) => {\n            item.contact_id = e.target.value;\n        })\n        setNewItems(items);\n    }\n\n    const onNewItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...newItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        items[index] = item;\n        setNewItems(items);\n    }\n\n    const onOldItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...oldItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        items[index] = item;\n        setOldItems(items);\n    }\n\n\n    useEffect(() => {\n        const state = location.state\n        if (state) {\n            setContactId(state.contactId);\n            const allItems = state.services.map((item) => {\n                return {\n                    id: item.id,\n                    contact_id: item.contact_id.id,\n                    service_type: item.service_type,\n                    contact_mode: item.contact_mode,\n                    payment_terms: item.payment_terms,\n                    tax_rate: item.tax_rate,\n                    unit_price: item.unit_price,\n                }\n            })\n            setOldItems(allItems);\n            setItems({ ...items, contact_id: state.contactId })\n\n\n        } else {\n            setNewItems([items])\n        }\n        dispatch(getAllContact());\n    }, [])\n\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        api.create(`/api/service/`, newItems)\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Saved Successfully');\n                    setRloading(false);\n                    setTimeout(() => {\n                        history.goBack()\n                    }, 1000);\n                } else {\n                    setError(res.data.error)\n                    setRloading(false);\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n            })\n    }\n\n    const onUpdate = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        api.updatePatch(`/api/service/`, { 'updated_items': oldItems, 'new_items': newItems, 'deleted_items': deletedItems })\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Updated Successfully');\n                    setRloading(false);\n                    setTimeout(() => {\n                        history.goBack()\n                    }, 1000);\n                } else {\n                    setError(res.data.error)\n                    setRloading(false);\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n            })\n    }\n\n\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Service', path: '/app/service', active: false },\n                    { label: 'Service Form', path: '/app/service_form', active: true },\n                ]}\n                title={'Service Form'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {error && (\n                                <Alert variant=\"danger\" className=\"my-2\" onClose={() => setError(null)} dismissible>\n                                    {error}\n                                </Alert>\n                            )}\n                            {success && (\n                                <Alert variant=\"success\" className=\"my-2\" onClose={() => setSuccess(null)} dismissible>\n                                    {success}\n                                </Alert>\n                            )}\n                            <Form onSubmit={(e) => { oldItems ? onUpdate(e) : onSubmit(e) }}>\n\n                                <Form.Group className='mb-3' style={{ width: '20%' }}>\n                                    <Form.Label >Contact</Form.Label>\n                                    {contactId ?\n\n                                        <Form.Select\n                                            aria-label=\"Default select example\"\n                                            required\n                                            onChange={(e) => ContactChange(e)}\n                                            disabled={contactId}\n                                            value={contactId}\n                                        >\n                                            {cloading ? <option value=\"\" disabled>Loading...</option> :\n                                                <>\n\n                                                    <option value=\"\" disabled>Select Contact ...</option>\n                                                    {contacts.length > 0 && contacts?.map((item) => {\n                                                        return (\n                                                            <option key={'scontact' + item.id} value={item.id} >{item.name}</option>\n                                                        )\n                                                    })}\n\n                                                </>\n                                            }\n                                        </Form.Select> :\n                                        <Form.Select\n                                            aria-label=\"Default select example\"\n                                            required\n                                            onChange={(e) => ContactChange(e)}\n                                            defaultValue=\"\"\n                                        >\n                                            {cloading ? <option value=\"\" disabled>Loading...</option> :\n                                                <>\n\n                                                    <option value=\"\" >Select Contact ...</option>\n                                                    {contacts.length > 0 && contacts?.map((item) => {\n                                                        return (\n                                                            <option key={'scontact' + item.id} value={item.id} >{item.name}</option>\n                                                        )\n                                                    })}\n\n                                                </>\n                                            }\n                                        </Form.Select>}\n\n                                </Form.Group>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th className='required'>Service Type</th>\n                                            <th className='required'>Contact Mode</th>\n                                            <th className='required'>Payment Terms</th>\n                                            <th className='required'>Govt VAT (%)</th>\n                                            <th className='required'>Total</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {oldItems && oldItems.length > 0 && oldItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='service_type'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.service_type}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='contact_mode'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.contact_mode}\n                                                            >\n\n                                                                <option value=\"\" disabled>Select Contact Mode ...</option>\n                                                                <option value=\"pre-paid\" >Pre-Paid</option>\n                                                                <option value=\"post-paid\" >Post-Paid</option>\n\n                                                            </Form.Select>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='payment_terms'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.payment_terms}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='tax_rate'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n                                                            oldItems.splice(index, 1);\n                                                            setOldItems([...oldItems]);\n                                                            deletedItems.push(item.id)\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n                                        {newItems.length > 0 && newItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='service_type'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item.service_type}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='contact_mode'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.contact_mode}\n                                                            >\n\n                                                                <option value=\"\" disabled>Select Contact Mode ...</option>\n                                                                <option value=\"pre-paid\" >Pre-Paid</option>\n                                                                <option value=\"post-paid\" >Post-Paid</option>\n\n                                                            </Form.Select>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='payment_terms'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item.payment_terms}\n\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='tax_rate'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n\n                                                            newItems.splice(index, 1);\n                                                            setNewItems([...newItems])\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n\n\n                                    </tbody>\n                                </Table>\n                                <div className=\"d-flex justify-content-between\">\n\n                                    <Button variant=\"info\" type=\"button\" className=\"waves-effect waves-light me-1\" onClick={() => setNewItems([...newItems, items])}>\n                                        Add a new line\n                                    </Button>\n                                    <div>\n                                        <Button variant=\"success\" type=\"submit\" className=\"waves-effect waves-light me-1\" disabled={rloading}>\n                                            {rloading ? 'Loaidng...' : 'Save'}\n                                        </Button>\n                                        <Link\n                                            to='/app/'\n                                            onClick={() => history.goBack()}\n                                            className=\" btn waves-effect waves-light\"\n                                        >\n                                            Cancel\n                                        </Link>\n                                    </div>\n                                </div>\n\n\n                            </Form>\n\n\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ServiceForm;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { useLocation } from 'react-router-dom';\nimport { format } from 'date-fns'\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getAllContact, getChartAccount, getContactService, getInvoiceDetails } from '../../redux/actions';\n\n\nconst api = new APICore()\n\n\n\n\nconst InvoiceForm = () => {\n    const location = useLocation();\n    const history = useHistory();\n\n    const dispatch = useDispatch();\n    const contacts = useSelector((state) => state.Contact.all_contact);\n    const accounts = useSelector((state) => state.ChartAccount.accounts);\n    const cloading = useSelector((state) => state.Contact.loading);\n    const chloading = useSelector((state) => state.ChartAccount.loading);\n    const [rloading, setRloading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(null);\n\n\n    const [oldItems, setOldItems] = useState([]);\n    const invoice_details = useSelector((state) => state.Invoice.invoice_details);\n    const contact_services = useSelector((state) => state.Service.contact_services);\n    const [contactId, setContactId] = useState('');\n    const [invoiceNo, setInvoiceNo] = useState('');\n    const [invoiceId, setInvoiceId] = useState(null);\n    const [date, setDate] = useState('');\n    const [due_date, setDueDate] = useState('');\n    const [reference, setReference] = useState('');\n    const [currency, setCurrency] = useState('1');\n    const [tax_type, setTaxType] = useState('inclusive');\n    const [sub_total, setSubTotal] = useState('');\n    const [discount, setDiscount] = useState('');\n    const [total_tax, setTotalTax] = useState('');\n    const [status, setStatus] = useState('draft');\n    const [total_amount, setTotalAmount] = useState('');\n    const [deletedItems, setDeletedItems] = useState([]);\n    const [taxGroup, setTaxGroup] = useState({});\n\n    const [items, setItems] = useState({\n        item: '',\n        description: '',\n        qty: 1,\n        unit_price: 0,\n        discount: 0,\n        account_id: null,\n        tax_rate: 0,\n        tax_amount: 0,\n        sub_total: 0,\n        total_amount: 0\n    });\n    const [newItems, setNewItems] = useState([]);\n\n    const onContactChange = (e) => {\n        setNewItems([])\n        setContactId(e.target.value);\n        dispatch(getContactService(e.target.value));\n    }\n\n    useEffect(() => {\n        if (contact_services.length > 0) {\n            const allItems = contact_services.map((item) => {\n                return {\n                    item: item.service_type,\n                    description: '',\n                    qty: 1,\n                    unit_price: item.unit_price,\n                    discount: '0',\n                    account_id: '',\n                    tax_rate: item.tax_rate,\n                    tax_amount: (tax_type === 'inclusive' ?\n                        ((((1 * item.unit_price) * (item.tax_rate && parseInt(item.tax_rate))) / (100 + (item.tax_rate && parseInt(item.tax_rate)))).toFixed(2))\n                        : tax_type === 'exclusive' ?\n                            (((1 * item.unit_price) / 100) * (item.tax_rate && parseInt(item.tax_rate)))\n                            : 0\n                    ),\n                    sub_total: 1 * item.unit_price,\n                    total_amount: 1 * item.unit_price\n                }\n            });\n\n            setNewItems(allItems);\n        }\n        else {\n            setNewItems([items])\n        }\n\n\n    }, [contact_services])\n\n    const onNewItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...newItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        if (name === 'qty' || name === 'unit_price' || name === 'discount' || name === 'tax_rate') {\n\n            item['sub_total'] = parseFloat(item['qty'] !== '' ? item['qty'] : 0) * parseFloat(item['unit_price'] !== '' ? item['unit_price'] : 0)\n            item['sub_total'] -= ((parseFloat(item['sub_total']) * parseFloat(item['discount'] !== '' ? item['discount'] : 0)) / 100)\n\n            if (tax_type === 'inclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)) / (100 + parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)))\n            } else if (tax_type === 'exclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) / 100) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0))\n            } else {\n                item['tax_amount'] = 0\n            }\n\n            item['total_amount'] = parseFloat((item['sub_total']))\n        }\n        items[index] = item;\n        setNewItems(items);\n    }\n\n    const onOldItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...oldItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        if (name === 'qty' || name === 'unit_price' || name === 'discount' || name === 'tax_rate') {\n\n            item['sub_total'] = parseFloat(item['qty'] !== '' ? item['qty'] : 0) * parseFloat(item['unit_price'] !== '' ? item['unit_price'] : 0)\n            item['sub_total'] -= ((parseFloat(item['sub_total']) * parseFloat(item['discount'] !== '' ? item['discount'] : 0)) / 100)\n\n            if (tax_type === 'inclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)) / (100 + parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)))\n            } else if (tax_type === 'exclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) / 100) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0))\n            } else {\n                item['tax_amount'] = 0\n            }\n\n            item['total_amount'] = parseFloat((item['sub_total']))\n        }\n        items[index] = item;\n        setOldItems(items);\n    }\n\n    useEffect(() => {\n        const groupOfTax = {}\n        let total_discount = 0\n        let total_subTotal = 0.00\n        let total_taxAmount = 0\n        newItems.forEach((item) => {\n            total_discount += parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.discount));\n            total_subTotal += parseFloat(item.total_amount);\n            var item_tax_amount = 0;\n            if (tax_type === 'inclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)) / (100 + parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)))\n            } else if (tax_type === 'exclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0))\n            } else {\n                item_tax_amount = 0\n            }\n            total_taxAmount += parseFloat(item_tax_amount);\n\n            if ((item.tax_rate).toString() in groupOfTax) {\n                groupOfTax[(item.tax_rate).toString()] += parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n            else {\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n        })\n\n\n        oldItems.forEach((item) => {\n            total_discount += parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.discount));\n            total_subTotal += parseFloat(item.total_amount);\n\n            var item_tax_amount = 0;\n            if (tax_type === 'inclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)) / (100 + parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)))\n            } else if (tax_type === 'exclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0))\n            } else {\n                item_tax_amount = 0\n            }\n            total_taxAmount += parseFloat(item_tax_amount);\n\n            if ((item.tax_rate).toString() in groupOfTax) {\n                groupOfTax[(item.tax_rate).toString()] += parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n            else {\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n        })\n        setDiscount(parseFloat(parseFloat(total_discount).toFixed(2)));\n        setSubTotal(parseFloat(parseFloat(total_subTotal).toFixed(2)));\n        setTotalTax(parseFloat(parseFloat(total_taxAmount).toFixed(2)));\n        let totalAmount = parseFloat(parseFloat(parseFloat(total_subTotal) + (tax_type === 'exclusive' && parseFloat(total_taxAmount))).toFixed(2));\n        setTotalAmount(totalAmount)\n        setTaxGroup(groupOfTax)\n    }, [newItems, oldItems, tax_type])\n\n    useEffect(() => {\n        const state = location.state\n        dispatch(getAllContact());\n        dispatch(getChartAccount());\n        if (state) {\n            dispatch(getInvoiceDetails(state));\n            setInvoiceId(state);\n            setNewItems([]);\n\n        } else {\n            setNewItems([items]);\n            setOldItems([]);\n            setInvoiceId(null);\n        }\n\n    }, [])\n\n    useEffect(() => {\n        if (invoiceId) {\n            setNewItems([]);\n            setInvoiceNo(invoice_details?.invoice_no);\n            setContactId(invoice_details?.contact_id?.id);\n            setTaxType(invoice_details?.tax_type);\n            setDate(invoice_details?.date);\n            setDueDate(invoice_details?.due_date);\n            setReference(invoice_details?.reference);\n            setStatus(invoice_details?.status);\n            if (invoice_details?.items?.length > 0) {\n                const allItems = invoice_details.items.map((item) => {\n                    return {\n                        id: item.id,\n                        item: item.item,\n                        description: item.description,\n                        qty: item.qty,\n                        unit_price: item.unit_price,\n                        discount: item.discount,\n                        account_id: item.account_id.id,\n                        tax_rate: item.tax_rate,\n                        tax_amount: item.tax_amount,\n                        sub_total: item.sub_total,\n                        total_amount: item.total_amount\n                    }\n\n                });\n                setOldItems(allItems)\n            }\n\n        }\n\n    }, [invoice_details])\n\n\n    // console.log(\"newItems\", newItems)\n    // console.log(\"oldItems\", oldItems)\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        let formatDate = format(new Date(date), 'yyyy-MM-dd');\n        let formatDueDate = format(new Date(due_date), 'yyyy-MM-dd');\n        api.create(`/api/invoice/`, { 'invoice_no': invoiceNo, 'contact_id': contactId, 'date': formatDate, 'due_date': formatDueDate, 'reference': reference, 'currency': currency, 'tax_type': tax_type, 'sub_total': sub_total, 'discount': discount, 'total_tax': total_tax, 'status': status, 'total_amount': total_amount, 'items': newItems })\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Saved Successfully');\n                    setRloading(false);\n                    setTimeout(() => {\n                        history.goBack()\n                    }, 1000);\n                } else {\n                    setError(res.data.error)\n                    setRloading(false);\n\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n            })\n    }\n\n    const onUpdate = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        let formatDate = format(new Date(date), 'yyyy-MM-dd');\n        let formatDueDate = format(new Date(due_date), 'yyyy-MM-dd');\n        api.updatePatch(`/api/invoice/${invoiceId}/`, { 'invoice_no': invoiceNo, 'contact_id': contactId, 'date': formatDate, 'due_date': formatDueDate, 'reference': reference, 'currency': currency, 'tax_type': tax_type, 'sub_total': sub_total, 'discount': discount, 'total_tax': total_tax, 'status': status, 'total_amount': total_amount, 'items': oldItems, 'new_items': newItems, 'deleted_items': deletedItems })\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Updated Successfully');\n                    setRloading(false);\n                    setTimeout(() => {\n                        history.goBack()\n                    }, 1000);\n                } else {\n                    setError(res.data.error)\n                    setRloading(false);\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n            })\n    }\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Invoice', path: '/app/invoice', active: false },\n                    { label: 'Invoice Form', path: '/app/invoice_form', active: true },\n                ]}\n                title={'Invoice Form'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {error && (\n                                <Alert variant=\"danger\" className=\"my-2\" onClose={() => setError(null)} dismissible>\n                                    {error}\n                                </Alert>\n                            )}\n                            {success && (\n                                <Alert variant=\"success\" className=\"my-2\" onClose={() => setSuccess(null)} dismissible>\n                                    {success}\n                                </Alert>\n                            )}\n                            <Form onSubmit={(e) => { oldItems.length > 0 ? onUpdate(e) : onSubmit(e) }}>\n                                <div className='mb-4'>\n                                    <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Contact</Form.Label>\n\n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                disabled={invoiceId ? true : false}\n                                                required\n                                                onChange={(e) => onContactChange(e)}\n                                                value={contactId}\n                                            >\n                                                {cloading ? <option value=\"\" disabled>Loading...</option> :\n                                                    <>\n\n                                                        <option value=\"\" disabled>Select Contact ...</option>\n                                                        {contacts.length > 0 && contacts?.map((item) => {\n                                                            return (\n                                                                <option key={'scontact' + item.id} value={item.id} >{item.name}</option>\n                                                            )\n                                                        })}\n\n                                                    </>\n                                                }\n                                            </Form.Select>\n\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Invoice No</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='invoice_no'\n                                                onChange={(e) => setInvoiceNo(e.target.value)}\n                                                defaultValue={invoiceId && invoice_details?.invoice_no}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Date</Form.Label>\n                                            <Form.Control\n                                                type='date'\n                                                required\n                                                name='date'\n                                                onChange={(e) => setDate(e.target.value)}\n                                                defaultValue={invoiceId && invoice_details?.date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Due Date</Form.Label>\n                                            <Form.Control\n                                                type='date'\n                                                required\n                                                name='due_date'\n                                                onChange={(e) => setDueDate(e.target.value)}\n                                                defaultValue={invoiceId && invoice_details?.due_date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Reference</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                \n                                                name='reference'\n                                                onChange={(e) => setReference(e.target.value)}\n                                                defaultValue={invoiceId && invoice_details?.reference}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Tax Type</Form.Label>\n\n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                required\n                                                onChange={(e) => setTaxType(e.target.value)}\n                                                value={tax_type}\n                                            >\n                                                <option value=\"inclusive\">Inclusive</option>\n                                                <option value=\"exclusive\">Exclusive</option>\n                                                <option value=\"no_tax\">No Tax</option>\n                                            </Form.Select>\n\n                                        </Form.Group>\n                                    </Row>\n\n\n\n                                </div>\n                                <Form.Label>Items:</Form.Label>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th className='required'>Item</th>\n                                            <th >Description</th>\n                                            <th className='required'>Quantity</th>\n                                            <th className='required'>Unit Price</th>\n                                            <th >Discount %</th>\n                                            <th className='required'>Account</th>\n                                            <th >Tax Rate %</th>\n\n                                            <th >Total</th>\n\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {oldItems && oldItems.length > 0 && oldItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='item'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.item}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                as='textarea'\n                                                                rows='1'\n                                                                name='description'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.description}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='qty'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.qty}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                            \n                                                                name='discount'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.discount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group as={Col}>\n\n\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='account_id'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.account_id}\n                                                            >\n                                                                {chloading ? <option value=\"\" disabled>Loading...</option> :\n                                                                    <>\n\n                                                                        <option value=\"\" disabled>Select Chart Account ...</option>\n                                                                        {accounts.length > 0 && accounts?.map((item) => {\n                                                                            return (\n                                                                                <option key={'aco' + item.id} value={item.id} >{item.account_name}</option>\n                                                                            )\n                                                                        })}\n\n                                                                    </>\n                                                                }\n                                                            </Form.Select>\n\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='tax_rate'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                readOnly={true}\n                                                                value={item?.total_amount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n                                                            oldItems.splice(index, 1);\n                                                            setOldItems([...oldItems]);\n                                                            deletedItems.push(item.id)\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n                                        {newItems.length > 0 && newItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='item'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.item}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                as='textarea'\n                                                                rows='1'\n                                                                \n                                                                name='description'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.description}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='qty'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.qty}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='discount'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.discount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group as={Col}>\n\n\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='account_id'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.account_id}\n                                                            >\n                                                                {chloading ? <option value=\"\" disabled>Loading...</option> :\n                                                                    <>\n\n                                                                        <option value=\"\">Select Chart Account ...</option>\n                                                                        {accounts.length > 0 && accounts?.map((item) => {\n                                                                            return (\n                                                                                <option key={'acn' + item.id} value={item.id} >{item.account_name}</option>\n                                                                            )\n                                                                        })}\n\n                                                                    </>\n                                                                }\n                                                            </Form.Select>\n\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='tax_rate'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                readOnly={true}\n                                                                value={item?.total_amount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n                                                            newItems.splice(index, 1);\n                                                            setNewItems([...newItems])\n\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n\n\n                                    </tbody>\n                                </Table>\n                                {/* <Card key={'tr2'+index}>\n                                        <Card.Header>\n                                            <div className='d-flex justify-content-between'>\n                                                <p>item: {++itemCount}</p>\n                                                <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{backgroundColor: '#1299dd',color: '#fff',height:'30px',width:'30px'}} onClick={()=>{newItems.splice(index,1)}}>\n                                                    <i className=\"mdi mdi-close\"></i>\n                                                </Link>\n                                            </div>\n                                        </Card.Header>\n                                        <Card.Body>\n                                        <Row className='mb-3'>\n                                        \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Item:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='item'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.item}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                                                                \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Quantity:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='qty'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.qty}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Unit Price:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='unit_price'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.unit_price}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Discount:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='discount'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.discount}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        </Row>\n                                        <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Chart Account:</Form.Label>                                                    \n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                required \n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                                                    \n                                            >\n                                                {chloading ? <option value=\"\" disabled>Loading...</option>: \n                                                <>\n                                                \n                                                    <option value=\"\" disabled>Select Chart Account ...</option>  \n                                                    {accounts.length > 0 && accounts?.map((item)=>{\n                                                        return(\n                                                            <option key={'aco'+item.id} value={item.id} >{item.account_name}</option>\n                                                        )\n                                                    })} \n                                                \n                                                </>\n                                                }\n                                            </Form.Select>                                        \n                                            \n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Rate:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='tax_rate'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.tax_rate}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Amount:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='tax_amount'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.tax_amount}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Sub Total:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='sub_total'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.sub_total}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        </Row>\n                                        <Row>\n                                        \n\n                                        <Form.Group as={Col} xs={6}>\n                                            <Form.Label >Description:</Form.Label>\n                                            <Form.Control\n                                                as='textarea'\n                                                rows={3}\n                                                required\n                                                name='description'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.description}\n                                            >\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                        <Form.Label >Total Amount:</Form.Label>\n                                        <Form.Control\n                                            type='text'\n                                            required\n                                            name='total_amount'\n                                            onChange={(e)=>onNewItemsChange(e,index)}\n                                            defaultValue={item?.total_amount}\n                                        >\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                        <Form.Group as={Col}>\n\n                                        </Form.Group>\n                                        </Row>\n                                        </Card.Body>\n                                        \n                                        \n                                    </Card>                                    */}\n                                <div className=\"d-flex justify-content-between\">\n\n                                    <Link to=\"#\" className=\"btn-primary waves-effect waves-light\" onClick={() => setNewItems([...newItems, items])} style={{ maxHeight: '25px', padding: '3px' }}>\n                                        Add a new line\n                                    </Link>\n                                    <div >\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Subtotal</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{sub_total}</p>\n                                        </div>\n                                        {/* {newItems?.map((item)=>{\n                                                if(item.tax_rate > 0)\n                                                return(\n\n                                                <div className=\"d-flex justify-content-between\">\n                                                    <p style={{fontSize: '20px'}}>Total Tax {item.tax_rate}%</p>\n                                                    <p style={{fontSize: '20px',paddingLeft: '50px'}}>{item.tax_amount}</p>\n                                                </div>\n                                                )\n                                            })} */}\n                                        {/* {oldItems?.map((item)=>{\n                                                if(item.tax_rate > 0)\n                                                return (\n                                                <div className=\"d-flex justify-content-between\" >\n                                                    <p style={{fontSize: '20px'}}>Total Tax {item.tax_rate}%</p>\n                                                    <p style={{fontSize: '20px',paddingLeft: '50px'}}>{item.tax_amount}</p>\n                                                </div>\n                                                )\n                                            })} */}\n                                        {Object.entries(taxGroup).map(item => {\n                                            if (item[0] > 0) {\n                                                return (\n                                                    <div className=\"d-flex justify-content-between\" >\n                                                        <p style={{ fontSize: '20px' }}>Total Tax {item[0]}%</p>\n                                                        <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{item[1]}</p>\n\n                                                    </div>)\n                                            }\n                                        })}\n                                        <hr></hr>\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{total_amount}</p>\n                                        </div>\n                                        <hr></hr><hr></hr>\n                                    </div>\n                                </div>\n                                <div className=\"d-flex justify-content-between\">\n\n                                    <Button variant=\"info\" type=\"submit\" className=\"waves-effect waves-light me-1\" >\n                                        Save\n                                    </Button>\n                                    <div>\n                                        <Button variant=\"success\" type=\"submit\" className=\"waves-effect waves-light me-1\" disabled={rloading} onClick={() => setStatus('approve')}>\n                                            {rloading ? 'Loaidng...' : 'Approve'}\n                                        </Button>\n                                        <Link\n                                            to='/app/service'\n                                            className=\" btn btn-secondary waves-effect waves-light\"\n                                        >\n                                            Cancel\n                                        </Link>\n                                    </div>\n                                </div>\n\n\n                            </Form>\n\n\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default InvoiceForm;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { useLocation } from 'react-router-dom';\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getInvoiceDetails } from '../../redux/actions';\n\n\nconst api = new APICore()\n\n\n\n\nconst InvoiceDetails = () => {\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const [invoiceId, setInvoiceId] = useState({});\n    const invoiceDetails = useSelector(state => state.Invoice.invoice_details);\n    const loading = useSelector(state => state.Invoice.loading);\n\n    useEffect(() => {\n        const state = location.state\n        setInvoiceId(state);\n    }, [])\n\n    useEffect(() => {\n        dispatch(getInvoiceDetails(invoiceId))\n    }, [invoiceId])\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Invoice', path: '/app/invoice', active: false },\n                    { label: 'Invoice Details', path: '/app/invoice_details', active: true },\n                ]}\n                title={'Invoice Details'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n\n                            <Form>\n                                <div className='mb-4'>\n                                    <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Contact</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.contact_id?.name}\n                                            >\n\n                                            </Form.Control>\n\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Invoice No</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.invoice_no}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Date</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Due Date</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.due_date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Reference</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.reference}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Type</Form.Label>\n\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={invoiceDetails?.tax_type}\n                                            >\n                                            </Form.Control>\n\n\n                                        </Form.Group>\n                                    </Row>\n\n\n\n                                </div>\n                                <Form.Label>Items:</Form.Label>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th>Item</th>\n                                            <th>Description</th>\n                                            <th>Quantity</th>\n                                            <th>Unit Price</th>\n                                            <th>Discount %</th>\n                                            <th>Account</th>\n                                            <th>Tax Rate %</th>\n\n                                            <th>Total</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {invoiceDetails && invoiceDetails.items ?  <>\n                                            {invoiceDetails.items.map((item, index)=>{\n                                                return (<>\n                                                    <tr key={'tr'+ index}>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.item}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.description}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.qty}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.unit_price}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.discount}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group as={Col}>\n\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.account_id.account_name}\n                                                                >\n\n                                                                </Form.Control>\n\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.tax_rate}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    value={item.total_amount}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                    </tr>\n\n                                                </>)\n                                            })}\n                                        </>: null}\n\n                                    </tbody>\n                                </Table>\n                                <div className=\"d-flex justify-content-between\">\n                                    <div></div>\n                                    <div >\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Subtotal (discount {invoiceDetails?.discount} )</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{invoiceDetails?.sub_total}</p>\n                                        </div>\n\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total Tax</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{invoiceDetails?.total_tax}</p>\n                                        </div>\n\n                                        <hr></hr>\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{invoiceDetails?.total_amount}</p>\n                                        </div>\n                                        <hr></hr><hr></hr>\n                                    </div>\n                                </div>\n\n                            </Form>\n\n\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default InvoiceDetails;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { useLocation } from 'react-router-dom';\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getRepeatingInvoiceDetails } from '../../redux/actions';\n\n\nconst api = new APICore()\n\n\n\n\nconst RepeatingInvoiceDetails = () => {\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const [invoiceId, setInvoiceId] = useState({});\n    const repeating_invoice_details = useSelector((state) => state.RepeatingInvoice.repeating_invoice_details);\n    const loading = useSelector(state => state.Invoice.loading);\n\n    useEffect(() => {\n        const state = location.state\n        setInvoiceId(state);\n    }, [])\n\n    useEffect(() => {\n        dispatch(getRepeatingInvoiceDetails(invoiceId))\n    }, [invoiceId])\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Invoice', path: '/app/invoice', active: false },\n                    { label: 'Invoice Details', path: '/app/invoice_details', active: true },\n                ]}\n                title={'Repeating Invoice Details'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n\n                            <Form>\n                                <div className='mb-4'>\n                                    <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Contact</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.contact_id?.name}\n                                            >\n\n                                            </Form.Control>\n\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Invoice No</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.invoice_no}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Date</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Due Date</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.due_date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Repeat Date</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.repeat_date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Reference</Form.Label>\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.reference}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Type</Form.Label>\n\n                                            <Form.Control\n                                                readOnly={true}\n                                                defaultValue={repeating_invoice_details?.tax_type}\n                                            >\n                                            </Form.Control>\n\n\n                                        </Form.Group>\n                                    </Row>\n\n\n\n                                </div>\n                                <Form.Label>Items:</Form.Label>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th>Item</th>\n                                            <th>Description</th>\n                                            <th>Quantity</th>\n                                            <th>Unit Price</th>\n                                            <th>Discount %</th>\n                                            <th>Account</th>\n                                            <th>Tax Rate %</th>\n\n                                            <th>Total</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {repeating_invoice_details && repeating_invoice_details.items ?  <>\n                                            {repeating_invoice_details.items.map((item, index)=>{\n                                                return (<>\n                                                    <tr key={'tr'+ index}>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.item}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.description}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.qty}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.unit_price}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.discount}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group as={Col}>\n\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.account_id.account_name}\n                                                                >\n\n                                                                </Form.Control>\n\n                                                            </Form.Group>\n                                                        </td>\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    defaultValue={item.tax_rate}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n\n                                                        <td>\n                                                            <Form.Group>\n                                                                <Form.Control\n                                                                    readOnly={true}\n                                                                    value={item.total_amount}\n                                                                >\n\n                                                                </Form.Control>\n                                                            </Form.Group>\n                                                        </td>\n                                                    </tr>\n\n                                                </>)\n                                            })}\n                                        </>: null}\n\n                                    </tbody>\n                                </Table>\n                                <div className=\"d-flex justify-content-between\">\n                                    <div></div>\n                                    <div >\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Subtotal (discount {repeating_invoice_details?.discount} )</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{repeating_invoice_details?.sub_total}</p>\n                                        </div>\n\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total Tax</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{repeating_invoice_details?.total_tax}</p>\n                                        </div>\n\n                                        <hr></hr>\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{repeating_invoice_details?.total_amount}</p>\n                                        </div>\n                                        <hr></hr><hr></hr>\n                                    </div>\n                                </div>\n\n                            </Form>\n\n\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default RepeatingInvoiceDetails;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Button, Form, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Table from 'react-bootstrap/Table';\nimport { useLocation } from 'react-router-dom';\nimport { format } from 'date-fns'\n// components\nimport PageTitle from '../../components/PageTitle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { getAllContact, getChartAccount, getContactService, getRepeatingInvoiceDetails } from '../../redux/actions';\n\n\nconst api = new APICore()\n\n\n\n\nconst RepeatingInvoiceForm = () => {\n    const location = useLocation();\n\n    const dispatch = useDispatch();\n    const contacts = useSelector((state) => state.Contact.all_contact);\n    const accounts = useSelector((state) => state.ChartAccount.accounts);\n    const cloading = useSelector((state) => state.Contact.loading);\n    const chloading = useSelector((state) => state.ChartAccount.loading);\n    const [rloading, setRloading] = useState(false);\n    const [error, setError] = useState(null);\n    const [success, setSuccess] = useState(null);\n\n\n    const [oldItems, setOldItems] = useState([]);\n    const repeating_invoice_details = useSelector((state) => state.RepeatingInvoice.repeating_invoice_details);\n    const contact_services = useSelector((state) => state.Service.contact_services);\n    const [contactId, setContactId] = useState('');\n    const [invoiceNo, setInvoiceNo] = useState('');\n    const [invoiceId, setInvoiceId] = useState(null);\n    const [date, setDate] = useState('');\n    const [due_date, setDueDate] = useState('');\n    const [repeat_date, setRepeatDate] = useState('');\n    const [reference, setReference] = useState('');\n    const [currency, setCurrency] = useState('1');\n    const [tax_type, setTaxType] = useState('inclusive');\n    const [sub_total, setSubTotal] = useState('');\n    const [discount, setDiscount] = useState('');\n    const [total_tax, setTotalTax] = useState('');\n    const [status, setStatus] = useState('draft');\n    const [total_amount, setTotalAmount] = useState('');\n    const [deletedItems, setDeletedItems] = useState([]);\n    const [taxGroup, setTaxGroup] = useState({});\n\n    const [items, setItems] = useState({\n        item: '',\n        description: '',\n        qty: 1,\n        unit_price: 0,\n        discount: 0,\n        account_id: null,\n        tax_rate: 0,\n        tax_amount: 0,\n        sub_total: 0,\n        total_amount: 0\n    });\n    const [newItems, setNewItems] = useState([]);\n\n    const onContactChange = (e) => {\n        setNewItems([])\n        setContactId(e.target.value);\n        dispatch(getContactService(e.target.value));\n    }\n    useEffect(() => {\n        let tempData = [];\n        if (contact_services.length > 0) {\n\n            contact_services?.forEach((item) => {\n                tempData.push(\n                    {\n                        item: item.service_type,\n                        description: '0',\n                        qty: 1,\n                        unit_price: item.unit_price,\n                        discount: '0',\n                        account_id: '',\n                        tax_rate: item.tax_rate,\n                        tax_amount: (tax_type === 'inclusive' ?\n                            ((((1 * item.unit_price) * (item.tax_rate && parseInt(item.tax_rate))) / (100 + (item.tax_rate && parseInt(item.tax_rate)))).toFixed(2))\n                            : tax_type === 'exclusive' ?\n                                (((1 * item.unit_price) / 100) * (item.tax_rate && parseInt(item.tax_rate)))\n                                : 0\n                        ),\n                        sub_total: 1 * item.unit_price,\n                        total_amount: 1 * item.unit_price\n                    })\n\n\n            })\n            setNewItems(tempData);\n\n        } else {\n            setNewItems([items])\n        }\n\n\n    }, [contact_services])\n\n    const onNewItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...newItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        if (name === 'qty' || name === 'unit_price' || name === 'discount' || name === 'tax_rate') {\n\n            item['sub_total'] = parseFloat(item['qty'] !== '' ? item['qty'] : 0) * parseFloat(item['unit_price'] !== '' ? item['unit_price'] : 0)\n            item['sub_total'] -= ((parseFloat(item['sub_total']) * parseFloat(item['discount'] !== '' ? item['discount'] : 0)) / 100)\n\n            if (tax_type === 'inclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)) / (100 + parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)))\n            } else if (tax_type === 'exclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) / 100) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0))\n            } else {\n                item['tax_amount'] = 0\n            }\n\n            item['total_amount'] = parseFloat((item['sub_total']))\n        }\n        items[index] = item;\n        setNewItems(items);\n    }\n\n    const onOldItemsChange = (e, index) => {\n        let name = e.target.name;\n        let items = [...oldItems];\n        let item = { ...items[index] };\n        item[name] = e.target.value;\n        if (name === 'qty' || name === 'unit_price' || name === 'discount' || name === 'tax_rate') {\n\n            item['sub_total'] = parseFloat(item['qty'] !== '' ? item['qty'] : 0) * parseFloat(item['unit_price'] !== '' ? item['unit_price'] : 0)\n            item['sub_total'] -= ((parseFloat(item['sub_total']) * parseFloat(item['discount'] !== '' ? item['discount'] : 0)) / 100)\n\n            if (tax_type === 'inclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)) / (100 + parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0)))\n            } else if (tax_type === 'exclusive') {\n                item['tax_amount'] = parseFloat((parseFloat(item['sub_total']) / 100) * parseFloat(item['tax_rate'] !== '' ? item['tax_rate'] : 0))\n            } else {\n                item['tax_amount'] = 0\n            }\n\n            item['total_amount'] = parseFloat((item['sub_total']))\n        }\n        items[index] = item;\n        setOldItems(items);\n    }\n\n    useEffect(() => {\n        const groupOfTax = {}\n        let total_discount = 0\n        let total_subTotal = 0.00\n        let total_taxAmount = 0\n        newItems.forEach((item) => {\n            total_discount += parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.discount));\n            total_subTotal += parseFloat(item.total_amount);\n\n            var item_tax_amount = 0;\n            if (tax_type === 'inclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)) / (100 + parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)))\n            } else if (tax_type === 'exclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0))\n            } else {\n                item_tax_amount = 0\n            }\n            total_taxAmount += parseFloat(item_tax_amount);\n\n            if ((item.tax_rate).toString() in groupOfTax) {\n                groupOfTax[(item.tax_rate).toString()] += parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n            else {\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n\n        })\n\n\n        oldItems.forEach((item) => {\n            total_discount += parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.discount));\n            total_subTotal += parseFloat(item.total_amount);\n\n            var item_tax_amount = 0;\n            if (tax_type === 'inclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)) / (100 + parseFloat(item.tax_rate !== '' ? item.tax_rate : 0)))\n            } else if (tax_type === 'exclusive') {\n                item_tax_amount = parseFloat((parseFloat(item.sub_total) / 100) * parseFloat(item.tax_rate !== '' ? item.tax_rate : 0))\n            } else {\n                item_tax_amount = 0\n            }\n            total_taxAmount += parseFloat(item_tax_amount);\n            \n            if ((item.tax_rate).toString() in groupOfTax) {\n                groupOfTax[(item.tax_rate).toString()] += parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n            else {\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(item_tax_amount).toFixed(2));\n                groupOfTax[(item.tax_rate).toString()] = parseFloat(parseFloat(groupOfTax[(item.tax_rate).toString()]).toFixed(2))\n            }\n\n\n        })\n        setDiscount(parseFloat(parseFloat(total_discount).toFixed(2)));\n        setSubTotal(parseFloat(parseFloat(total_subTotal).toFixed(2)));\n        setTotalTax(parseFloat(parseFloat(total_taxAmount).toFixed(2)));\n        let totalAmount = parseFloat(parseFloat(parseFloat(total_subTotal) + (tax_type === 'exclusive' && parseFloat(total_taxAmount))).toFixed(2));\n        setTotalAmount(totalAmount)\n        setTaxGroup(groupOfTax)\n    }, [newItems, oldItems, tax_type])\n\n    useEffect(() => {\n        const state = location.state\n        dispatch(getAllContact());\n        dispatch(getChartAccount());\n        if (state) {\n            dispatch(getRepeatingInvoiceDetails(state));\n            setInvoiceId(state);\n            setNewItems([]);\n\n        } else {\n            setNewItems([items]);\n            setOldItems([]);\n            setInvoiceId(null);\n        }\n\n    }, [])\n\n    useEffect(() => {\n        if (invoiceId) {\n            setNewItems([]);\n            setInvoiceNo(repeating_invoice_details?.invoice_no);\n            setContactId(repeating_invoice_details?.contact_id?.id);\n            setTaxType(repeating_invoice_details?.tax_type);\n            setDate(repeating_invoice_details?.date);\n            setDueDate(repeating_invoice_details?.due_date);\n            setRepeatDate(repeating_invoice_details?.repeat_date);\n            setReference(repeating_invoice_details?.reference);\n            setStatus(repeating_invoice_details?.status);\n            if (repeating_invoice_details?.items?.length > 0) {\n                const allItems = repeating_invoice_details.items.map((item) => {\n                    return {\n                        id: item.id,\n                        item: item.item,\n                        description: item.description,\n                        qty: item.qty,\n                        unit_price: item.unit_price,\n                        discount: item.discount,\n                        account_id: item.account_id.id,\n                        tax_rate: item.tax_rate,\n                        tax_amount: item.tax_amount,\n                        sub_total: item.sub_total,\n                        total_amount: item.total_amount\n                    }\n\n                });\n                setOldItems(allItems)\n            }\n\n        }\n\n    }, [repeating_invoice_details])\n\n\n    // console.log(\"newItems\", newItems)\n    // console.log(\"oldItems\", oldItems)\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        api.create(`/api/repeating-invoice/`, { 'invoice_no': invoiceNo, 'contact_id': contactId, 'date': date, 'due_date': due_date, 'repeat_date': repeat_date, 'reference': reference, 'currency': currency, 'tax_type': tax_type, 'sub_total': sub_total, 'discount': discount, 'total_tax': total_tax, 'status': status, 'total_amount': total_amount, 'items': newItems })\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Saved Successfully');\n                    setRloading(false);\n                } else {\n                    setError(res.data.error)\n\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n                setRloading(false);\n            })\n    }\n\n    const onUpdate = (e) => {\n        e.preventDefault();\n        setRloading(true);\n        api.updatePatch(`/api/repeating-invoice/${invoiceId}/`, { 'invoice_no': invoiceNo, 'contact_id': contactId, 'date': date, 'due_date': due_date, 'repeat_date': repeat_date, 'reference': reference, 'currency': currency, 'tax_type': tax_type, 'sub_total': sub_total, 'discount': discount, 'total_tax': total_tax, 'status': status, 'total_amount': total_amount, 'items': oldItems, 'new_items': newItems, 'deleted_items': deletedItems })\n            .then(res => {\n\n                if (res.data.success) {\n                    setSuccess('Data Updated Successfully');\n                    setRloading(false);\n                } else {\n                    setError(res.data.error)\n\n                }\n\n            })\n            .catch(err => {\n                setError(err)\n            })\n    }\n\n    return (\n        <>\n\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Repeating Invoice', path: '/app/repeating_invoice', active: false },\n                    { label: 'Repeating Invoice Form', path: '/app/repeating_invoice_form', active: true },\n                ]}\n                title={'Repeating Invoice Form'}\n            />\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            {!rloading && error && (\n                                <Alert variant=\"danger\" className=\"my-2\" onClose={() => setError(null)} dismissible>\n                                    {error}\n                                </Alert>\n                            )}\n                            {!rloading && success && (\n                                <Alert variant=\"success\" className=\"my-2\" onClose={() => setSuccess(null)} dismissible>\n                                    {success}\n                                </Alert>\n                            )}\n                            <Form onSubmit={(e) => { oldItems.length > 0 ? onUpdate(e) : onSubmit(e) }}>\n                                <div className='mb-4'>\n                                    <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Contact</Form.Label>\n\n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                disabled={invoiceId ? true : false}\n                                                required\n                                                onChange={(e) => onContactChange(e)}\n                                                value={contactId}\n                                            >\n                                                {cloading ? <option value=\"\" disabled>Loading...</option> :\n                                                    <>\n\n                                                        <option value=\"\" disabled>Select Contact ...</option>\n                                                        {contacts.length > 0 && contacts?.map((item) => {\n                                                            return (\n                                                                <option key={'scontact' + item.id} value={item.id} >{item.name}</option>\n                                                            )\n                                                        })}\n\n                                                    </>\n                                                }\n                                            </Form.Select>\n\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Invoice No</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='invoice_no'\n                                                onChange={(e) => setInvoiceNo(e.target.value)}\n                                                defaultValue={invoiceId && repeating_invoice_details?.invoice_no}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Day</Form.Label>\n                                            <Form.Control\n                                                type='number'\n                                                required\n                                                name='date'\n                                                max='31'\n                                                min='1'\n                                                onChange={(e) => setDate(e.target.value)}\n                                                defaultValue={invoiceId && repeating_invoice_details?.date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Due Day</Form.Label>\n                                            <Form.Control\n                                                type='number'\n                                                required\n                                                max='31'\n                                                min='1'\n                                                name='due_date'\n                                                onChange={(e) => setDueDate(e.target.value)}\n                                                defaultValue={invoiceId && repeating_invoice_details?.due_date}\n                                            >\n\n\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Repeat Day</Form.Label>\n                                            <Form.Control\n                                                type='number'\n                                                required\n                                                max='31'\n                                                min='1'\n                                                name='repeat_date'\n                                                onChange={(e) => setRepeatDate(e.target.value)}\n                                                defaultValue={invoiceId && repeating_invoice_details?.repeat_date}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Reference</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                \n                                                name='reference'\n                                                onChange={(e) => setReference(e.target.value)}\n                                                defaultValue={invoiceId && repeating_invoice_details?.reference}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className='required'>Tax Type</Form.Label>\n\n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                required\n                                                onChange={(e) => setTaxType(e.target.value)}\n                                                value={tax_type}\n                                            >\n                                                <option value=\"inclusive\">Inclusive</option>\n                                                <option value=\"exclusive\">Exclusive</option>\n                                                <option value=\"no_tax\">No Tax</option>\n                                            </Form.Select>\n\n                                        </Form.Group>\n                                    </Row>\n\n\n\n                                </div>\n                                <Form.Label>Items:</Form.Label>\n                                <Table striped bordered hover>\n                                    <thead>\n                                        <tr>\n                                            <th className='required'>Item</th>\n                                            <th>Description</th>\n                                            <th className='required'>Quantity</th>\n                                            <th className='required'>Unit Price</th>\n                                            <th>Discount %</th>\n                                            <th className='required'>Account</th>\n                                            <th>Tax Rate %</th>\n\n                                            <th>Total</th>\n\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {oldItems && oldItems.length > 0 && oldItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='item'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.item}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                as='textarea'\n                                                                rows='1'\n                                                                \n                                                                name='description'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.description}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='qty'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.qty}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='discount'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.discount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group as={Col}>\n\n\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='account_id'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.account_id}\n                                                            >\n                                                                {chloading ? <option value=\"\" disabled>Loading...</option> :\n                                                                    <>\n\n                                                                        <option value=\"\" disabled>Select Chart Account ...</option>\n                                                                        {accounts.length > 0 && accounts?.map((item) => {\n                                                                            return (\n                                                                                <option key={'aco' + item.id} value={item.id} >{item.account_name}</option>\n                                                                            )\n                                                                        })}\n\n                                                                    </>\n                                                                }\n                                                            </Form.Select>\n\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='tax_rate'\n                                                                onChange={(e) => onOldItemsChange(e, index)}\n                                                                value={item?.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                readOnly={true}\n                                                                value={item?.total_amount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n                                                            oldItems.splice(index, 1);\n                                                            setOldItems([...oldItems]);\n                                                            deletedItems.push(item.id)\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n                                        {newItems.length > 0 && newItems.map((item, index) => {\n                                            return (\n                                                <tr key={'tr' + index}>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='text'\n                                                                required\n                                                                name='item'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.item}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                as='textarea'\n                                                                rows='1'\n                                                                \n                                                                name='description'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.description}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='qty'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.qty}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                required\n                                                                name='unit_price'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.unit_price}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='discount'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.discount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group as={Col}>\n\n\n                                                            <Form.Select\n                                                                aria-label=\"Default select example\"\n                                                                required\n                                                                name='account_id'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.account_id}\n                                                            >\n                                                                {chloading ? <option value=\"\" disabled>Loading...</option> :\n                                                                    <>\n\n                                                                        <option value=\"\">Select Chart Account ...</option>\n                                                                        {accounts.length > 0 && accounts?.map((item) => {\n                                                                            return (\n                                                                                <option key={'acn' + item.id} value={item.id} >{item.account_name}</option>\n                                                                            )\n                                                                        })}\n\n                                                                    </>\n                                                                }\n                                                            </Form.Select>\n\n                                                        </Form.Group>\n                                                    </td>\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                type='number'\n                                                                \n                                                                name='tax_rate'\n                                                                onChange={(e) => onNewItemsChange(e, index)}\n                                                                value={item?.tax_rate}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Form.Group>\n                                                            <Form.Control\n                                                                readOnly={true}\n                                                                value={item?.total_amount}\n                                                            >\n\n                                                            </Form.Control>\n                                                        </Form.Group>\n                                                    </td>\n\n                                                    <td>\n                                                        <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{ backgroundColor: '#1299dd', color: '#fff', height: '30px' }} onClick={() => {\n                                                            newItems.splice(index, 1);\n                                                            setNewItems([...newItems])\n\n                                                        }}>\n                                                            <i className=\"mdi mdi-close\"></i>\n                                                        </Link>\n                                                    </td>\n                                                </tr>)\n                                        })}\n\n\n                                    </tbody>\n                                </Table>\n                                {/* <Card key={'tr2'+index}>\n                                        <Card.Header>\n                                            <div className='d-flex justify-content-between'>\n                                                <p>item: {++itemCount}</p>\n                                                <Link to=\"#\" className=\"d-flex justify-content-center align-items-center \" style={{backgroundColor: '#1299dd',color: '#fff',height:'30px',width:'30px'}} onClick={()=>{newItems.splice(index,1)}}>\n                                                    <i className=\"mdi mdi-close\"></i>\n                                                </Link>\n                                            </div>\n                                        </Card.Header>\n                                        <Card.Body>\n                                        <Row className='mb-3'>\n                                        \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Item:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='item'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.item}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                                                                \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Quantity:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='qty'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.qty}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Unit Price:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='unit_price'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.unit_price}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Discount:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='discount'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.discount}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        </Row>\n                                        <Row className='mb-3'>\n                                        <Form.Group as={Col}>\n                                            <Form.Label >Chart Account:</Form.Label>                                                    \n                                            <Form.Select\n                                                aria-label=\"Default select example\"\n                                                required \n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                                                    \n                                            >\n                                                {chloading ? <option value=\"\" disabled>Loading...</option>: \n                                                <>\n                                                \n                                                    <option value=\"\" disabled>Select Chart Account ...</option>  \n                                                    {accounts.length > 0 && accounts?.map((item)=>{\n                                                        return(\n                                                            <option key={'aco'+item.id} value={item.id} >{item.account_name}</option>\n                                                        )\n                                                    })} \n                                                \n                                                </>\n                                                }\n                                            </Form.Select>                                        \n                                            \n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Rate:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='tax_rate'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.tax_rate}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Tax Amount:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='tax_amount'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.tax_amount}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                    \n                                        <Form.Group as={Col}>\n                                            <Form.Label >Sub Total:</Form.Label>\n                                            <Form.Control\n                                                type='text'\n                                                required\n                                                name='sub_total'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.sub_total}\n                                            >\n\n                                            </Form.Control>\n                                        </Form.Group>\n                                        </Row>\n                                        <Row>\n                                        \n\n                                        <Form.Group as={Col} xs={6}>\n                                            <Form.Label >Description:</Form.Label>\n                                            <Form.Control\n                                                as='textarea'\n                                                rows={3}\n                                                required\n                                                name='description'\n                                                onChange={(e)=>onNewItemsChange(e,index)}\n                                                defaultValue={item?.description}\n                                            >\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                        <Form.Label >Total Amount:</Form.Label>\n                                        <Form.Control\n                                            type='text'\n                                            required\n                                            name='total_amount'\n                                            onChange={(e)=>onNewItemsChange(e,index)}\n                                            defaultValue={item?.total_amount}\n                                        >\n\n                                        </Form.Control>\n                                    </Form.Group>\n                                        <Form.Group as={Col}>\n\n                                        </Form.Group>\n                                        </Row>\n                                        </Card.Body>\n                                        \n                                        \n                                    </Card>                                    */}\n                                <div className=\"d-flex justify-content-between\">\n\n                                    <Link to=\"#\" className=\"btn-primary waves-effect waves-light\" onClick={() => setNewItems([...newItems, items])} style={{ maxHeight: '25px', padding: '3px' }}>\n                                        Add a new line\n                                    </Link>\n                                    <div >\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Subtotal</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{sub_total}</p>\n                                        </div>\n                                        {/* {newItems?.map((item)=>{\n                                                if(item.tax_rate > 0)\n                                                return(\n\n                                                <div className=\"d-flex justify-content-between\">\n                                                    <p style={{fontSize: '20px'}}>Total Tax {item.tax_rate}%</p>\n                                                    <p style={{fontSize: '20px',paddingLeft: '50px'}}>{item.tax_amount}</p>\n                                                </div>\n                                                )\n                                            })} */}\n                                        {/* {oldItems?.map((item)=>{\n                                                if(item.tax_rate > 0)\n                                                return (\n                                                <div className=\"d-flex justify-content-between\" >\n                                                    <p style={{fontSize: '20px'}}>Total Tax {item.tax_rate}%</p>\n                                                    <p style={{fontSize: '20px',paddingLeft: '50px'}}>{item.tax_amount}</p>\n                                                </div>\n                                                )\n                                            })} */}\n                                        {Object.entries(taxGroup).map(item => {\n                                            if (item[0] > 0) {\n                                                return (\n                                                    <div className=\"d-flex justify-content-between\" >\n                                                        <p style={{ fontSize: '20px' }}>Total Tax {item[0]}%</p>\n                                                        <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{item[1]}</p>\n\n                                                    </div>)\n                                            }\n                                        })}\n                                        <hr></hr>\n                                        <div className=\"d-flex justify-content-between\">\n                                            <p style={{ fontSize: '20px' }}>Total</p>\n                                            <p style={{ fontSize: '20px', paddingLeft: '50px' }}>{total_amount}</p>\n                                        </div>\n                                        <hr></hr><hr></hr>\n                                    </div>\n                                </div>\n                                <div className=\"d-flex justify-content-between\">\n\n                                    <Button variant=\"info\" type=\"submit\" className=\"waves-effect waves-light me-1\" >\n                                        Save\n                                    </Button>\n                                    <div>\n                                        <Button variant=\"success\" type=\"submit\" className=\"waves-effect waves-light me-1\" disabled={rloading} onClick={() => setStatus('approve')}>\n                                            {rloading ? 'Loaidng...' : 'Approve'}\n                                        </Button>\n                                        <Link\n                                            to='/app/service'\n                                            className=\" btn btn-secondary waves-effect waves-light\"\n                                        >\n                                            Cancel\n                                        </Link>\n                                    </div>\n                                </div>\n\n\n                            </Form>\n\n\n\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RepeatingInvoiceForm;\n","import React, { useEffect, useState } from 'react';\nimport { APICore } from '../../helpers/api/apiCore';\nimport { Row, Col, Card, Form, Alert, Tab, Nav} from 'react-bootstrap';\nimport { withSwal } from 'react-sweetalert2';\n\n// components\nimport Table from '../../components/Table';\nimport PageTitle from '../../components/PageTitle';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getRepeatingInvoice } from '../../redux/actions';\nimport Pagination from '../../components/CustomPagination';\n\n\n\n// const ExcelFile = ReactExport.ExcelFile;\n// const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n// const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nconst api = new APICore();\n\n\n// // action column render\nconst ActionColumn = withSwal(({ row, swal }) => {\n    /*\n     *   modal handeling\n     */\n    const dispatch = useDispatch();\n    const user_role = useSelector((state)=> state.Role.user_role);\n    \n\n    /*\n    handle form submission\n    */\n    \n    const onDelete = () => {\n        swal.fire({\n                title: 'Are you sure?',\n                text: \"You won't be able to revert this!\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#28bb4b',\n                cancelButtonColor: '#f34e4e',\n                confirmButtonText: 'Yes, delete it!',\n            })\n            .then(function(result){\n                if(result.value){\n                    // dispatch(deleteContact(row.original.id))\n                    api.delete(`/api/repeating-invoice/${row.original.id}/`)\n                .then(res=>{\n                    dispatch(getRepeatingInvoice(10,1));\n                    swal.fire(\n                        'Deleted!',\n                        'Invoice has been deleted.',\n                        'success'\n                    );            \n                })\n                .catch(err => {\n                    swal.fire({\n                        title: err,\n                    }\n                    );\n                })\n                }else if(result.dismiss === 'cancel'){\n                    \n                }\n            })        \n    }\n\n    return (\n        <>\n            <Link to={{pathname: '/app/repeating_invoice_details',state: row.original.id}} className=\"action-icon\" >\n                <i className=\"mdi mdi-eye\"></i>\n            </Link>\n\n            { user_role.includes('change_repeatinginvoice') ?\n                <Link to={{ pathname: '/app/repeating_invoice_form',state: row.original.id}} className=\"action-icon\" >\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link>:\n                <Link to=\"#\" className=\"action-icon\"  style={{pointerEvents: 'none'}}>\n                    <i className=\"mdi mdi-square-edit-outline\"></i>\n                </Link>\n            }\n            \n            { user_role.includes('delete_repeatinginvoice') ?\n                <Link to=\"#\" className=\"action-icon\" onClick={()=>onDelete()}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link>:\n                <Link to=\"#\" className=\"action-icon\" style={{pointerEvents: 'none'}}>\n                    <i className=\"mdi mdi-delete\"></i>\n                </Link>\n            }\n\n            \n            \n        </>\n    );\n});\n\n\nexport const StatusColumn = withSwal(({ row, swal }) => {\n    /*\n     *   modal handeling\n     */\n    const dispatch = useDispatch();\n    const user_role = useSelector((state) => state.Role.user_role);\n\n    /*\n    handle form submission\n    */\n    const draftsOptions =\n        <>\n            <option selected={row.original.status === 'draft'} value='draft'>Draft</option>\n            <option selected={row.original.status === 'approve'} value='approve'>Approved</option>\n        </>\n\n    const approvesOptions =\n        <>\n            <option selected={row.original.status === 'approve'} value='approve'>Approved</option>\n        </>\n\n\n    var dropDown = (<div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n        <Form.Select style={{ width: '70%' }} onChange={(e) => handleShow(row, e)}>\n            {row.original.status === \"draft\" ? (draftsOptions) : null}\n            {row.original.status === \"approve\" ? (approvesOptions) : null}\n        </Form.Select>\n    </div>)\n\n    const handleShow = (row, e) => {\n        const value = e.target.value;\n        const data = {\n            \"status\": value\n        }\n        swal.fire({\n            title: 'Are you sure?',\n            text: \"You won't be able to revert this!\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Yes, change it!',\n        })\n            .then(function (result) {\n\n                if (result.value) {\n                    api.update(`/api/change-repeating-invoice-status/?id=${row.original.id}`, data)\n                        .then(res => {\n                            if (res) {\n                                swal.fire(\n                                    'Updated!',\n                                    'Repeating Invoice Status has been Updated.',\n                                    'success'\n                                );\n                            }\n                            else {\n                                swal.fire(\n                                    'Updated!',\n                                    'Repeating Invoice Status has not Updated.',\n                                    'warning'\n                                );\n                            }\n                            // setTimeout(() => {\n                            //     refreshPage();\n                            // }, 600);\n                            dispatch(getRepeatingInvoice(10, 1));\n                        })\n                        .catch(err => {\n                            console.log('err', err)\n                            dispatch(getRepeatingInvoice(10, 1));\n                            swal.fire({\n                                title: err,\n                            }\n                            );\n                        })\n                } else if (result.dismiss === 'cancel') {\n                    dispatch(getRepeatingInvoice(10, 1));\n                }\n            })\n            .catch(err => {\n                console.log('swal fire err', err)\n            })\n    };\n\n    return (\n        <>\n            {dropDown}\n\n        </>\n    );\n});\n\n\n\nconst columns = [\n    {\n        Header: 'Invoice No',\n        accessor: 'invoice_no',\n        sort: true,\n    },\n    {\n        Header: 'Contact',\n        accessor: 'contact_id.name',\n        sort: true,\n    },\n    {\n        Header: 'Day',\n        accessor: 'date',\n        sort: true,\n    },\n    {\n        Header: 'Due Day',\n        accessor: 'due_date',\n        sort: true,\n    },\n    {\n        Header: 'Repeat Day',\n        accessor: 'repeat_date',\n        sort: true,\n    },\n    {\n        Header: 'Tax Type',\n        accessor: 'tax_type',\n        sort: true,\n    },\n    {\n        Header: 'Sub Total',\n        accessor: 'sub_total',\n        sort: true,\n    },\n    {\n        Header: 'Discount',\n        accessor: 'discount',\n        sort: true,\n        Cell: (row) => {\n            return <div>{(row.row.original.discount).toFixed(2)}</div>;\n        }\n    },\n    {\n        Header: 'Total Tax',\n        accessor: 'total_tax',\n        sort: true,\n    },\n    {\n        Header: 'Total Amount',\n        accessor: 'total_amount',\n        sort: true,\n    },\n    {\n        Header: 'Status',\n        accessor: 'status',\n        sort: true,\n        Cell: StatusColumn,\n    },\n    {\n        Header: 'Action',\n        accessor: 'action',\n        sort: false,\n        Cell: ActionColumn,\n    },\n    \n];\n\nconst RepeatingInvoice = () => {\n    const dispatch = useDispatch();\n    const [filteredIncoices,setFilteredInvoices] = useState([]);\n    const invoices = useSelector(state => state.RepeatingInvoice.repeating_invoices);\n    const previous = useSelector(state => state.RepeatingInvoice.previous);\n    const next = useSelector(state => state.RepeatingInvoice.next);\n    const current_page = useSelector(state => state.RepeatingInvoice.current_page);\n    const total_page = useSelector(state => state.RepeatingInvoice.total_page);\n    const active = useSelector(state => state.RepeatingInvoice.active);\n    const user_role = useSelector((state)=> state.Role.user_role);\n    const loading = useSelector(state => state.RepeatingInvoice.loading);\n    const error = useSelector(state => state.RepeatingInvoice.error);\n    const [pageSize,setPageSize] = useState(10);\n    const [activePage, setActivePage] = useState('all');\n\n    /*\n     *   modal handeling\n     */\n  \n\n    const visitPage = (page) => {\n        dispatch(getRepeatingInvoice(pageSize,page));\n    };\n\n    const previous_number = () => {\n        dispatch(getRepeatingInvoice(pageSize,previous));\n    };\n\n    const next_number = () => {\n        dispatch(getRepeatingInvoice(pageSize,next));\n    };\n\n    /*\n    handle form submission\n    */\n    \n    const onClickEvent = (value) => {\n        if (value === 'all') {\n            setActivePage('all');\n            setFilteredInvoices(invoices)\n        } else if (value === 'draft') {\n            setActivePage('draft');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'draft'))\n\n        }else if (value === 'approve') {\n            setActivePage('approve');\n            setFilteredInvoices(invoices.filter((item) => item.status === 'approve'))\n        }\n        else {\n            setFilteredInvoices(invoices)\n        }\n    }\n    \n\n    useEffect(()=>{ \n        dispatch(getRepeatingInvoice(pageSize,1));   \n    },[pageSize])\n\n    useEffect(()=>{\n        setFilteredInvoices(invoices);\n        setActivePage('all');\n    },[invoices])\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Repeating Invoice', path: '/app/repeating_invoice', active: false },\n                ]}\n                title={`Repeating Invoice`}\n            />\n            <Tab.Container defaultActiveKey=\"all\">\n                <Nav as=\"ul\" variant=\"tabs\">                    \n                    <Nav.Item as=\"li\" key='all'>\n                        <Nav.Link active={activePage === \"all\"} className=\"cursor-pointer\" href=\"#\" eventKey='all' onClick={() => onClickEvent('all')}>\n                            All\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='draft'>\n                        <Nav.Link active={activePage === \"draft\"} className=\"cursor-pointer\" href=\"#\" eventKey='draft' onClick={() => onClickEvent('draft')}>\n                            Draft\n                        </Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item as=\"li\" key='approve'>\n                        <Nav.Link active={activePage === \"approve\"} className=\"cursor-pointer\" href=\"#\" eventKey='approve' onClick={() => onClickEvent('approve')}>\n                            Approved\n                        </Nav.Link>\n                    </Nav.Item>\n                </Nav>\n\n               \n            </Tab.Container>\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                        {!loading && error && (\n                            <Alert variant=\"danger\" className=\"my-2\">\n                                {error}\n                            </Alert>\n                        )}\n                            <Row className=\"mb-2\">\n                                <Col sm={4}>\n                                    <div style={{display: 'flex',flexDirection: 'row',alignItems: 'center'}}>\n                                        <span className='me-2'>Show:</span>\n                                        <Form.Select style={{width: '40%'}} onChange={(e)=>{setPageSize(e.target.value);getRepeatingInvoice(pageSize,1)}}>\n                                            <option value='10'>10</option>\n                                            <option value='15'>20</option>\n                                            <option value='20'>30</option>\n                                        </Form.Select>\n                                    </div>\n                                </Col>\n\n                                <Col sm={8}>\n                                    <div className=\"text-sm-end mt-2 mt-sm-0\">\n                                        { user_role.includes('add_repeatinginvoice') ?\n                                            <Link className=\"btn btn-success mb-2 me-1\" to='/app/repeating_invoice_form'>\n                                            <i className=\"mdi mdi-plus-circle me-1\"></i> Add\n                                            </Link>:\n                                            <>\n                                            </>\n                                        }\n                                        \n                                        {/* <ExcelFile element={<Button className=\"btn btn-light mb-2\">Export</Button>}>\n                                            <ExcelSheet data={users} name=\"Users\">\n                                                <ExcelColumn label=\"Name\" value=\"name\"/>\n                                                <ExcelColumn label=\"Phone\" value=\"phone\"/>\n                                                <ExcelColumn label=\"Email\" value=\"email\"/>\n                                                <ExcelColumn label=\"Role\" value={(col)=> col.groups[0].name}/>                                            \n                                            </ExcelSheet>\n                                        </ExcelFile> */}\n  \n                                    </div>\n                                </Col>\n                            </Row>\n                            \n                            {loading ? <p>Loading...</p>:\n                            <>\n                            {filteredIncoices.length > 0 ?\n                            <>\n                            <Table\n                                columns={columns}\n                                data={filteredIncoices}\n                                pageSize={pageSize}\n                                isSortable={true}\n                                pagination={false}\n                                isSearchable={true}\n                                tableClass=\"table-nowrap table-hover\"\n                                searchBoxClass=\"\"\n                            />\n                            <Pagination visitPage={visitPage} previous_number={previous_number} next_number={next_number} total_page={total_page} current_page={current_page} active={active}/>\n                            </>\n                            :\n                            'No data available!'}</>}\n                            \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add contact modal */}\n            \n            \n            \n            \n            \n        </>\n    );\n};\n\nexport default RepeatingInvoice;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { APICore } from '../../helpers/api/apiCore';\n\n// components\nimport PageTitle from '../../components/PageTitle';\n\nconst api = new APICore();\n\n\n// invoice component\nconst PublicInvoice = () => {\n    \n        \n    const [invoice_details,setInvoiceDetails] = useState({});\n    const urlParams = new URLSearchParams(window.location.search);\n    let unique_id = urlParams.get('unique_id');\n    \n    useEffect(()=>{\n        api.get(`/api/public-invoice?unique_id=${unique_id}`)\n        .then(res => {\n            console.log(res)\n            if(res.data.success){\n                setInvoiceDetails(res.data.result)\n            }\n        })\n        .catch(err => {\n            console.log(err)\n        })\n    },[])\n    return (\n        <React.Fragment>\n            <div className='m-2'>\n            <PageTitle\n                breadCrumbItems={[\n                   \n                ]}\n                title={'Public Invoice'}\n                \n            />\n            </div>\n            \n\n            <Row >\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            \n\n                            \n\n                       \n                                \n\n                            <Row className=\"mt-3\">\n                                <Col sm={6}>\n                                <div >\n                                        <p>\n                                            <strong>Contact : </strong>{' '}\n                                            <span > &nbsp;&nbsp;&nbsp; {invoice_details?.contact_id?.name} </span>\n                                        </p>\n                                        <p>\n                                            <strong>Invoice No : </strong>{' '}\n                                            <span >\n                                                {' '}\n                                                <span >{invoice_details?.invoice_no}</span>\n                                            </span>\n                                        </p>\n                                        <p>\n                                            <strong>Date : </strong>\n                                            <span >\n                                                {' '}\n                                                <span >{invoice_details?.date}</span>\n                                            </span>\n                                        </p>\n                                        <p>\n                                            <strong>Due Date : </strong>\n                                            <span >\n                                                {' '}\n                                                <span >{invoice_details?.due_date}</span>\n                                            </span>\n                                        </p>\n                                        <p>\n                                            <strong>Reference : </strong>\n                                            <span >\n                                                {' '}\n                                                <span >{invoice_details?.reference}</span>\n                                            </span>\n                                        </p>\n                                        <p>\n                                            <strong>Tax Type : </strong>\n                                            <span >\n                                                {' '}\n                                                <span >{invoice_details?.tax_type}</span>\n                                            </span>\n                                        </p>\n                                    </div>\n                                </Col>\n                                <Col sm={6}>\n                                    <h6>Address</h6>\n                                    <address>\n                                        {invoice_details?.contact_id?.city?.name}, {invoice_details?.contact_id?.country?.name}\n                                        <br />\n                                        {invoice_details?.contact_id?.email}\n                                    </address>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col xs={12}>\n                                    <div className=\"table-responsive\">\n                                        <table className=\"table mt-4 table-centered\">\n                                        <thead>\n                                                <tr>\n                                                    <th>#</th>\n                                                    <th>Item</th>\n                                                    <th >Quantity</th>\n                                                    <th >Unit Price</th>\n                                                    <th >Discount</th>\n                                                    <th >Account</th>\n                                                    <th >Tax Rate</th>\n                                                    <th className=\"text-end\">Total</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {(invoice_details.items || []).map((item, idx) => {\n                                                    return (\n                                                        <tr key={idx}>\n                                                            <td>{idx + 1}</td>\n                                                            <td>\n                                                                <b>{item.item}</b> <br />\n                                                                {item.description}\n                                                            </td>\n                                                            <td>{item.qty}</td>\n                                                            <td>{item.unit_price}</td>\n                                                            <td>{item.discount}</td>\n                                                            <td>{item.account_id.account_name}</td>\n                                                            <td>{item.tax_rate}</td>\n                                                            <td className=\"text-end\">{item.total_amount}</td>\n                                                        </tr>\n                                                    );\n                                                })}\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col sm={6}>\n                                    \n                                </Col>\n                                <Col sm={6}>\n                                    <div className=\"float-end\">\n                                        <p>\n                                            <b>Sub-total:</b> <span className=\"float-end\">{invoice_details.sub_total}</span>\n                                        </p>\n                                        <p>\n                                            <b>Total Tax:</b>{' '}\n                                            <span className=\"float-end\"> &nbsp;&nbsp;&nbsp; {invoice_details.total_tax}</span>\n                                        </p>\n                                        <h3>{invoice_details.total_amount}</h3>\n                                    </div>\n                                    <div className=\"clearfix\"></div>\n                                </Col>\n                            </Row>\n\n                            \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default PublicInvoice;\n","import React from 'react';\nimport { Route, RouteProps } from 'react-router-dom';\nimport Contact from '../pages/app/Contact';\nimport ContactDetails from '../pages/app/ContactDetails';\n\nimport ChangePassword from '../pages/app/user-management/ChangePassword';\nimport RoleForm from '../pages/Form/RoleForm';\nimport PasswordReset from '../pages/auth/PasswordReset';\nimport PasswordResetSuccess from '../pages/auth/PasswordResetSuccess';\n\n// components\nimport PrivateRoute from './PrivateRoute';\nimport Root from './Root';\nimport Service from '../pages/app/service';\nimport ServiceForm from '../pages/Form/ServiceForm';\nimport ContactCard from '../pages/app/ContactCard';\nimport Invoice from '../pages/app/invoice';\nimport InvoiceForm from '../pages/Form/InvoiceForm';\nimport InvoiceDetails from '../pages/app/InvoiceDetails';\nimport RepeatingInvoiceDetails from '../pages/app/RepeatingInvoiceDetails';\nimport RepeatingInvoiceForm from '../pages/Form/RepeatingInvoiceForm';\nimport RepeatingInvoice from '../pages/app/RepeatingInvoice';\nimport PublicInvoice from '../pages/app/PublicInvoice';\n\n// lazy load all the views\n\n// auth\nconst Login = React.lazy(() => import('../pages/auth/Login'));\nconst Logout = React.lazy(() => import('../pages/auth/Logout'));\nconst Confirm = React.lazy(() => import('../pages/auth/Confirm'));\nconst ForgetPassword = React.lazy(() => import('../pages/auth/ForgetPassword'));\nconst Register = React.lazy(() => import('../pages/auth/Register'));\n\n  \n// dashboard\nconst Dashboard = React.lazy(() => import('../pages/dashboard'));\n\n//apps\nconst MyProfile = React.lazy(() => import('../pages/app/user-management/MyProfile'));\nconst Users = React.lazy(() => import('../pages/app/user-management/Users'));\nconst Role = React.lazy(() => import('../pages/app/user-management/Role'));\n\n\n\n//others\nconst SearchResults = React.lazy(() => import('../pages/other/SearchResults/'));\nconst Error404Alt = React.lazy(() => import('../pages/error/Error404Alt'));\nconst Error500Two = React.lazy(() => import('../pages/error/Error500Two'));\n\n\n\n\nexport interface RoutesProps {\n    path: RouteProps['path'];\n    name?: string;\n    component?: RouteProps['component'];\n    route?: any;\n    exact?: RouteProps['exact'];\n    icon?: string;\n    header?: string;\n    roles?: string[];\n    children?: RoutesProps[];\n}\n\n// root routes\nconst rootRoute: RoutesProps = {\n    path: '/',\n    exact: true,\n    component: () => <Root />,\n    route: Route,\n};\n\n// dashboards\nconst dashboardRoutes: RoutesProps = {\n    path: '/dashboard',\n    name: 'Dashboards',\n    component: Dashboard,\n    route: PrivateRoute,\n};\n\n//apps\nconst AppRoutes = {\n    path: '/app',\n    name: 'App',\n    route: PrivateRoute,\n    \n    children: [\n        \n        {\n            path: '/app/my-profile',\n            name: 'My Profile',\n            component: MyProfile,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/change_password',\n            name: 'Change Password',\n            component: ChangePassword,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/add_role',\n            name: 'Add Role',\n            component: RoleForm,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/users',\n            name: 'Users',\n            component: Users,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/roles',\n            name: 'Roles',\n            component: Role,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/contact',\n            name: 'Contact',\n            component: Contact,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/contact_details',\n            name: 'Contact Details',\n            component: ContactDetails,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/service',\n            name: 'Service',\n            component: ServiceForm,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/service_by_contact',\n            name: 'Service',\n            component: Service,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/service_form',\n            name: 'Service Form',\n            component: ServiceForm,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/invoice',\n            name: 'Invoice',\n            component: Invoice,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/invoice_form',\n            name: 'Invoice Form',\n            component: InvoiceForm,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/repeating_invoice',\n            name: 'Repeating Invoice',\n            component: RepeatingInvoice,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/repeating_invoice_form',\n            name: 'Repeating Invoice Form',\n            component: RepeatingInvoiceForm,\n            route: PrivateRoute,\n        },\n        {\n            path: '/app/invoice_details',\n            name: 'Invoice Details',\n            component: InvoiceDetails,\n            route: PrivateRoute,\n        },\n        \n        {\n            path: '/app/repeating_invoice_details',\n            name: 'Repeating Invoice Details',\n            component: RepeatingInvoiceDetails,\n            route: PrivateRoute,\n        },\n        \n        \n    ],\n};\n\n// pages\nconst extrapagesRoutes = {\n    path: '/pages',\n    name: 'Pages',\n    children: [\n        \n        {\n            path: '/pages/serach-results',\n            name: 'Search Results',\n            component: SearchResults,\n            route: PrivateRoute,\n        },\n        {\n            path: '/pages/error-404-alt',\n            name: 'Error - 404-alt',\n            component: Error404Alt,\n            route: PrivateRoute,\n        },\n        {\n            path: '/pages/error-500',\n            name: 'Error - 500',\n            component: Error500Two,\n            route: PrivateRoute,\n        }\n    ],\n};\n\n\n// auth\nconst authRoutes: RoutesProps[] = [\n    {\n        path: '/auth/login',\n        name: 'Login',\n        component: Login,\n        route: Route,\n    },\n    {\n        path: '/public_invoice',\n        name: 'public invoice',\n        component: PublicInvoice,\n        route: Route,\n    },\n    {\n        path: '/auth/register',\n        name: 'Register',\n        component: Register,\n        route: Route,\n    },\n    {\n        path: '/auth/confirm',\n        name: 'Confirm',\n        component: Confirm,\n        route: Route,\n    },\n    {\n        path: '/auth/forget-password',\n        name: 'Forget Password',\n        component: ForgetPassword,\n        route: Route,\n    },\n    {\n        path: '/auth/password_reset',\n        name: 'Password Reset',\n        component: PasswordReset,\n        route: Route,\n    },\n    {\n        path: '/auth/password_reset_success',\n        name: 'Forget Password',\n        component: PasswordResetSuccess,\n        route: Route,\n    },\n    {\n        path: '/auth/logout',\n        name: 'Logout',\n        component: Logout,\n        route: Route,\n    },\n    \n];\n\n\n\n// flatten the list of all nested routes\nconst flattenRoutes = (routes: RoutesProps[]) => {\n    let flatRoutes: RoutesProps[] = [];\n\n    routes = routes || [];\n    routes.forEach((item: RoutesProps) => {\n        flatRoutes.push(item);\n\n        if (typeof item.children !== 'undefined') {\n            flatRoutes = [...flatRoutes, ...flattenRoutes(item.children)];\n        }\n    });\n    return flatRoutes;\n};\n\n// All routes\nconst authProtectedRoutes = [rootRoute, dashboardRoutes,extrapagesRoutes,AppRoutes];\nconst publicRoutes = [...authRoutes];\n\nconst authProtectedFlattenRoutes = flattenRoutes([...authProtectedRoutes]);\nconst publicProtectedFlattenRoutes = flattenRoutes([...publicRoutes]);\nexport { publicRoutes, authProtectedRoutes, authProtectedFlattenRoutes, publicProtectedFlattenRoutes };\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\n// layout constants\nimport { LayoutTypes } from '../constants/layout';\n\n// strore\nimport { RootState } from '../redux/store';\n\n// All layouts containers\nimport DefaultLayout from '../layouts/Default';\nimport VerticalLayout from '../layouts/Vertical';\nimport DetachedLayout from '../layouts/Detached';\nimport HorizontalLayout from '../layouts/Horizontal';\nimport TwoColumnLayout from '../layouts/TwoColumn/';\n\nimport { authProtectedFlattenRoutes, publicProtectedFlattenRoutes } from './index';\n\ninterface RoutesProps {}\n\nconst Routes = (props: RoutesProps) => {\n    const { layout } = useSelector((state: RootState) => ({\n        layout: state.Layout,\n    }));\n\n    const getLayout = () => {\n        let layoutCls = TwoColumnLayout;\n\n        switch (layout.layoutType) {\n            case LayoutTypes.LAYOUT_HORIZONTAL:\n                layoutCls = HorizontalLayout;\n                break;\n            case LayoutTypes.LAYOUT_DETACHED:\n                layoutCls = DetachedLayout;\n                break;\n            case LayoutTypes.LAYOUT_VERTICAL:\n                layoutCls = VerticalLayout;\n                break;\n            default:\n                layoutCls = TwoColumnLayout;\n                break;\n        }\n        return layoutCls;\n    };\n\n    let Layout = getLayout();\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path={publicProtectedFlattenRoutes.map((r: any) => r['path'])}>\n                    <DefaultLayout {...props} layout={layout}>\n                        <Switch>\n                            {publicProtectedFlattenRoutes.map((route: any, index: number) => {\n                                return (\n                                    !route.children && (\n                                        <route.route\n                                            key={index}\n                                            path={route.path}\n                                            roles={route.roles}\n                                            exact={route.exact}\n                                            component={route.component}\n                                        />\n                                    )\n                                );\n                            })}\n                            \n                        </Switch>\n                    </DefaultLayout>\n                </Route>\n\n                <Route path={authProtectedFlattenRoutes.map((r: any) => r['path'])}>\n                    <Layout {...props}>\n                        <Switch>\n                            {authProtectedFlattenRoutes.map((route: any, index: number) => {\n                                return (\n                                    !route.children && (\n                                        <route.route\n                                            key={index}\n                                            path={route.path}\n                                            roles={route.roles}\n                                            exact={route.exact}\n                                            component={route.component}\n                                        />\n                                    )\n                                );\n                            })}\n                            \n                            <Redirect to=\"/pages/error-404-alt\" />\n                        </Switch>\n                    </Layout>\n                </Route>\n                \n            </Switch>\n        </BrowserRouter>\n    );\n};\n\nexport default Routes;\n","import React, { useEffect } from 'react';\n\nimport Routes from './routes/Routes';\n\n// Themes\n\n// For Default import Default.scss\nimport './assets/scss/Default.scss';\n\n\n// For Saas import Saas.scss\n// import './assets/scss/Saas.scss';\n\n// For Modern demo import Modern.scss\n// import './assets/scss/Modern.scss';\n\n// For Creative demo import Creative.scss\n// import './assets/scss/Creative.scss';\n\n// For Purple demo import Purple.scss\n// import './assets/scss/Purple.scss';\n\n// For Material demo import Material.scss\n// import './assets/scss/Material.scss';\n\n\n\nconst App = () => {\n    \n    return (\n        <>\n            <Routes></Routes>\n        </>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","// apicore\nimport { APICore } from '../../helpers/api/apiCore';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\nconst api = new APICore();\n\nconst INIT_STATE = {\n    user: api.getLoggedInUser(),\n    loading: false,\n};\n\ninterface UserData {\n    id: number;\n    email: string;\n    phone: string;\n    password: string;\n    first_name: string;\n    last_name: string;\n    role: string;\n    token: string;\n}\n\ninterface AuthActionType {\n    type:\n        | AuthActionTypes.API_RESPONSE_SUCCESS\n        | AuthActionTypes.API_RESPONSE_ERROR\n        | AuthActionTypes.LOGIN_USER\n        | AuthActionTypes.LOGOUT_USER\n        | AuthActionTypes.RESET;\n    payload: {\n        actionType?: string;\n        data?: UserData | {};\n        key?: any;\n        error?: string;\n        success?: string;\n    };\n}\n\ninterface State {\n    user?: UserData | {};\n    loading?: boolean;\n    value?: boolean;\n}\n\nconst Auth = (state: State = INIT_STATE, action: AuthActionType): any => {\n    switch (action.type) {\n        case AuthActionTypes.API_RESPONSE_SUCCESS:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        user: action.payload.data,\n                        userLoggedIn: true,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        loading: false,\n                        userSignUp: true,\n                    };\n                }\n                case AuthActionTypes.LOGOUT_USER: {\n                    return {\n                        ...state,\n                        user: null,\n                        loading: false,\n                        userLogout: true,\n                    };\n                }\n                \n                case AuthActionTypes.UPDATE_PROFILE: {\n                    return {\n                        ...state,\n                        user: api.getLoggedInUser(),\n                        loading: false,\n                        success: \"Profile Updated Successfully\"\n                    };\n                }\n                case AuthActionTypes.UPDATE_PROFILE_IMAGE: {\n                    return {\n                        ...state,\n                        user: api.getLoggedInUser(),\n                        loading: false,\n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.API_RESPONSE_ERROR:\n            switch (action.payload.actionType) {\n                case AuthActionTypes.LOGIN_USER: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        userLoggedIn: false,\n                        loading: false,\n                    };\n                }\n                case AuthActionTypes.SIGNUP_USER: {\n                    return {\n                        ...state,\n                        registerError: action.payload.error,\n                        userSignUp: false,\n                        loading: false,\n                    };\n                }\n                \n                case AuthActionTypes.UPDATE_PROFILE: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        loading: false,\n                        \n                    };\n                }\n                case AuthActionTypes.UPDATE_PROFILE_IMAGE: {\n                    return {\n                        ...state,\n                        error: action.payload.error,\n                        loading: false,\n                        \n                    };\n                }\n                default:\n                    return { ...state };\n            }\n\n        case AuthActionTypes.LOGIN_USER:\n            return { ...state, loading: true, userLoggedIn: false };\n        case AuthActionTypes.LOGOUT_USER:\n            return { ...state, loading: true, userLogout: false };\n        case AuthActionTypes.RESET:\n            return {\n                ...state,\n                loading: false,\n                error: false,\n                userSignUp: false,\n                userLoggedIn: false,\n                passwordReset: false,\n                passwordChange: false,\n                resetPasswordSuccess: null,\n            };\n        default:\n            return { ...state };\n    }\n};\n\nexport default Auth;\n","// action constants\nimport { LayoutActionTypes, LayoutStateTypes } from './constants';\n\n// app constants\nimport {\n    LayoutTypes,\n    LayoutColor,\n    LayoutWidth,\n    MenuPositions,\n    SideBarTheme,\n    SideBarTypes,\n    TopbarTheme,\n} from '../../constants/layout';\n\n// actions\nimport { LayoutActionType } from './actions';\n\n// utils\nimport { getLayoutConfigs } from '../../utils';\n\nconst INIT_STATE = {\n    layoutType: LayoutTypes.LAYOUT_HORIZONTAL,\n    layoutColor: LayoutColor.LAYOUT_COLOR_LIGHT,\n    layoutWidth: LayoutWidth.LAYOUT_WIDTH_FLUID,\n    menuPosition: MenuPositions.MENU_POSITION_FIXED,\n    leftSideBarTheme: SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT,\n    leftSideBarType: SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT,\n    showTwoToneIcons: false,\n    showSidebarUserInfo: false,\n    topbarTheme: TopbarTheme.TOPBAR_THEME_DARK,\n    isOpenRightSideBar: false,\n};\n\nconst Layout = (state: LayoutStateTypes = INIT_STATE, action: LayoutActionType<string | boolean | null>) => {\n    switch (action.type) {\n        case LayoutActionTypes.CHANGE_LAYOUT:\n            return {\n                ...state,\n                layoutType: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_LAYOUT_COLOR:\n            return {\n                ...state,\n                layoutColor: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_LAYOUT_WIDTH:\n            const layoutConfig = getLayoutConfigs(action.payload! && action.payload);\n            return {\n                ...state,\n                layoutWidth: action.payload,\n                ...layoutConfig,\n            };\n        case LayoutActionTypes.CHANGE_MENU_POSITIONS:\n            return {\n                ...state,\n                menuPosition: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_SIDEBAR_THEME:\n            return {\n                ...state,\n                leftSideBarTheme: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_SIDEBAR_TYPE:\n            return {\n                ...state,\n                leftSideBarType: action.payload,\n            };\n        case LayoutActionTypes.TOGGLE_SIDEBAR_USER_INFO:\n            return {\n                ...state,\n                showSidebarUserInfo: action.payload,\n            };\n        case LayoutActionTypes.CHANGE_TOPBAR_THEME:\n            return {\n                ...state,\n                topbarTheme: action.payload,\n            };\n        case LayoutActionTypes.TOGGLE_TWO_TONE_ICONS:\n            return {\n                ...state,\n                showTwoToneIcons: action.payload,\n            };\n        case LayoutActionTypes.SHOW_RIGHT_SIDEBAR:\n            return {\n                ...state,\n                isOpenRightSideBar: true,\n            };\n        case LayoutActionTypes.HIDE_RIGHT_SIDEBAR:\n            return {\n                ...state,\n                isOpenRightSideBar: false,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default Layout;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    users: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\n\n\nconst User = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_USER_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_USER_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                users: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_USER_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.ADD_USER_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.ADD_USER_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                users: [...state.users,action.user]\n                \n            };\n        }\n        case type.ADD_USER_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n        \n        default:\n            return state;\n    }\n};\n\nexport default User;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    roles: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    user_role: [],\n    loading: false,\n    error: null,\n};\n\n\n\nconst Role = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_ROLE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_ROLE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                roles: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_ROLE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.GET_USERROLE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_USERROLE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                user_role: action.user_role,\n            };\n        }\n        case type.GET_USERROLE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        \n        default:\n            return state;\n    }\n};\n\nexport default Role;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    contact: [],\n    invoice_list: [],\n    invoice_list_pagination_data: {},\n    invoice_setting: [],\n    contact_details: [],\n    all_contact: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_object: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n    success:null,\n    invoice_setting_error: null,\n    invoice_setting_success:null,\n};\n\n\n\nconst Contact = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_CONTACT_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CONTACT_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                contact: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_object: action.data.total_object,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n                \n            };\n        }\n        case type.GET_CONTACT_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.GET_CONTACT_INVOICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CONTACT_INVOICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                invoice_list: action.data.results,\n                invoice_list_pagination_data: {\n                    previous: action.data.previous,\n                    next: action.data.next,\n                    current_page: action.data.current_page,\n                    total_page: action.data.total_page,\n                    active: action.data.current_page\n                }\n            };\n        }\n        case type.GET_CONTACT_INVOICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n\n        case type.GET_CONTACT_INVOICE_SETTING_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CONTACT_INVOICE_SETTING_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                invoice_setting: action.data.results,\n            };\n        }\n        case type.GET_CONTACT_INVOICE_SETTING_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n\n\n        case type.UPDATE_CONTACT_INVOICE_SETTING_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.UPDATE_CONTACT_INVOICE_SETTING_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                invoice_setting: action.data,\n                invoice_setting_error: null,\n                invoice_setting_success:\"Contact Updated Successfully\"\n            };\n        }\n        case type.UPDATE_CONTACT_INVOICE_SETTING_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                invoice_setting_error: action.error,\n                invoice_setting_success: null,\n            };\n        }\n\n\n        case type.GET_CONTACT_DETAILS_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CONTACT_DETAILS_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                contact_details: action.data,\n            };\n        }\n        case type.GET_CONTACT_DETAILS_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.GET_ALLCONTACT_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_ALLCONTACT_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                all_contact: action.data,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_ALLCONTACT_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.ADD_CONTACT_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.ADD_CONTACT_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                contact: [action.contact,...state.contact],\n                success:'Contact Created Successfully'\n                \n            };\n        }\n        case type.ADD_CONTACT_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.DELETE_CONTACT_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.DELETE_CONTACT_SUCCESS: {\n            const newContact = state.contact.filter(({i}) => i !== action.id)\n            return {\n                ...state,\n                loading: false,\n                contact: newContact\n                \n            };\n        }\n        case type.DELETE_CONTACT_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n       \n                \n        default:\n            return state;\n    }\n};\n\nexport default Contact;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    country: [],\n    city: [],\n    loading: false,\n    error: null,\n};\n\n\n\nconst Location = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_COUNTRY_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_COUNTRY_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                country: action.data,\n            };\n        }\n        case type.GET_COUNTRY_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.GET_CITY_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CITY_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                city: action.data,\n            };\n        }\n        case type.GET_CITY_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                city: [],\n                error: action.error,\n            };\n        }\n\n               \n                \n        default:\n            return state;\n    }\n};\n\nexport default Location;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    services: [],\n    contact_services: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\nconst Service = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_SERVICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_SERVICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                services: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_SERVICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.GET_CONTACTSERVICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CONTACTSERVICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                contact_services: action.data,\n                \n            };\n        }\n        case type.GET_CONTACTSERVICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        case type.ADD_SERVICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.ADD_SERVICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                services: [action.data,...state.services]\n                \n            };\n        }\n        case type.ADD_SERVICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        \n       \n                \n        default:\n            return state;\n    }\n};\n\nexport default Service;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    invoices: [],\n    invoice_details: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\nconst Invoice = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_INVOICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_INVOICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                invoices: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_INVOICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n        \n        case type.GET_INVOICEDETAILS_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_INVOICEDETAILS_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                invoice_details: action.data.result,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_INVOICEDETAILS_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default Invoice;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    repeating_invoices: [],\n    repeating_invoice_details: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\nconst RepeatingInvoice = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_REPEATINGINVOICE_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_REPEATINGINVOICE_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                repeating_invoices: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_REPEATINGINVOICE_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n        \n        case type.GET_REPEATINGINVOICEDETAILS_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_REPEATINGINVOICEDETAILS_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                repeating_invoice_details: action.data.result,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_REPEATINGINVOICEDETAILS_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default RepeatingInvoice;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    currencies: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\nconst Currency = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_CURRENCY_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CURRENCY_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                currencies: action.data,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_CURRENCY_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n        \n        \n\n        default:\n            return state;\n    }\n};\n\nexport default Currency;\n","import * as type from './types';\n\nconst INIT_STATE = {\n    accounts: [],\n    previous: '',\n    next: '',\n    current_page: '',\n    total_page: '',\n    active: '',\n    loading: false,\n    error: null,\n};\n\n\n\nconst ChartAccount = (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        case type.GET_CHARTACCOUNT_REQUESTED: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case type.GET_CHARTACCOUNT_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                accounts: action.data.results,\n                previous: action.data.previous,\n                next: action.data.next,\n                current_page: action.data.current_page,\n                total_page: action.data.total_page,\n                active: action.data.current_page,\n            };\n        }\n        case type.GET_CHARTACCOUNT_FAILED: {\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n        }\n        \n        \n\n        default:\n            return state;\n    }\n};\n\nexport default ChartAccount;\n","import { combineReducers } from 'redux';\n\nimport Auth from './auth/reducers';\nimport Layout from './layout/reducers';\nimport User from './user/reducers';\nimport Role from './roles/reducers';\nimport Contact from './contact/reducers';\nimport Location from './location/reducers';\nimport Service from './service/reducers';\nimport Invoice from './invoice/reducers';\nimport RepeatingInvoice from './repeating-invoice/reducers';\nimport Currency from './currency/reducers';\nimport ChartAccount from './chart-account/reducers';\n\n\nexport default combineReducers({\n    Auth,\n    Layout,\n    User,\n    Role,\n    Contact,\n    Location,\n    Service,\n    Invoice,\n    RepeatingInvoice,\n    Currency,\n    ChartAccount\n    \n});\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n// account\nfunction login(params: { email: string; password: string }) {\n    const baseUrl = '/api/auth/';\n    return api.create(`${baseUrl}`, params);\n}\n\n\n\nfunction signup(params: { first_name: string;last_name: string; email: string; phone: string; password: string }) {\n    const baseUrl = '/register/';\n    return api.create(`${baseUrl}`, params);\n}\n\n\n\nfunction updateProfile(params: { first_name: string;last_name: string; email: string; phone: string }) {\n    const baseUrl = '/api/update_profile';\n    return api.updatePatch(`${baseUrl}`, params);\n}\n\nfunction updateProfileImage(params: { profile_image: File }) {\n    const baseUrl = '/api/update_profile';\n    return api.updateWithFile(`${baseUrl}`, params);\n}\n\nexport { login, signup, updateProfile, updateProfileImage };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getUser(params: {limit: number,page:number}) {\n    const baseUrl = '/api/users/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction addUser(params: { first_name:string;last_name:string;email:string;password:string;phone:string;groups:number[];is_active:boolean }) {\n    const baseUrl = '/api/users/';\n    return api.create(`${baseUrl}`,params);\n}\n\n\nexport { getUser, addUser };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getRole(params: {limit: number,page:number}) {\n    const baseUrl = '/api/groups';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getUserRole() {\n    const baseUrl = '/api/user_role';\n    return api.get(`${baseUrl}`,{});\n}\n\n\n\nexport { getRole,getUserRole };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getContact(params: {limit: number,page:number}) {\n    const baseUrl = '/api/contact/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getContactDetails(params:any) {\n    const baseUrl = `/api/contact/${params.payload}`;\n    return api.get(`${baseUrl}`,null);\n}\n\nfunction getContactInvoice(params:any) {\n    const baseUrl = `/api/invoice?contact_id=${params.id}&limit=${params.limit}&page=${params.page}`;\n    return api.get(`${baseUrl}`,null);\n}\n\nfunction getContactInvoiceSetting(params:any) {\n    const baseUrl = `/api/invoice-setting?contact_id=${params.payload}`;\n    return api.get(`${baseUrl}`,null);\n}\n\nfunction updateContactInvoiceSetting(params:any) {\n    const baseUrl = `/api/invoice-setting/`;\n    return api.create(`${baseUrl}`,params.payload);\n}\n\nfunction getAllContact() {\n    const baseUrl = '/api/contact/';\n    return api.get(`${baseUrl}`,{});\n}\n\nfunction addContact(params: { name:string,client_id:string,contact_type:string,contact_person:string,phone:string,email:string,city:string,country:string,billing_address:string }) {\n    const baseUrl = '/api/contact/';\n    return api.create(`${baseUrl}`,params);\n}\n\nfunction deleteContact(id:number) {\n    const baseUrl = `/api/contact/${id}/`;\n    return api.delete(`${baseUrl}`);\n}\n\n\nexport { getContact, addContact,deleteContact,getAllContact, getContactInvoice, getContactDetails, getContactInvoiceSetting, updateContactInvoiceSetting };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getCountry(params: {}) {\n    const baseUrl = '/api/countries/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getCity(params: {country:number}) {\n    const baseUrl = '/api/cities';\n    return api.get(`${baseUrl}`,params);\n}\n\n\n\n\nexport { getCountry,getCity };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getService(params: {limit: number,page:number}) {\n    const baseUrl = '/api/service/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getContactService(params: {contact_id:number}) {\n    const baseUrl = '/api/service/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction addService(params: { service: any[] }) {\n    const baseUrl = '/api/service/';\n    return api.create(`${baseUrl}`,params);\n}\n\n\n\nexport { getService, getContactService, addService };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getInvoice(params: {limit: number,page:number}) {\n    const baseUrl = '/api/invoice/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getInvoiceDetails(params:any) {\n    const baseUrl = `/api/invoice/${params.payload}/`;\n    return api.get(`${baseUrl}`,{});\n}\n\nexport { getInvoice,getInvoiceDetails };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getRepeatingInvoice(params: {limit: number,page:number}) {\n    const baseUrl = '/api/repeating-invoice/';\n    return api.get(`${baseUrl}`,params);\n}\n\nfunction getRepeatingInvoiceDetails(params:any) {\n    const baseUrl = `/api/repeating-invoice/${params.payload}/`;\n    return api.get(`${baseUrl}`,{});\n}\n\nexport { getRepeatingInvoice, getRepeatingInvoiceDetails };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getCurrency() {\n    const baseUrl = '/api/currency/';\n    return api.get(`${baseUrl}`,{});\n}\n\n\nexport { getCurrency };\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\n\nfunction getChartAccount() {\n    const baseUrl = '/api/account/';\n    return api.get(`${baseUrl}`,{});\n}\n\n\nexport { getChartAccount };\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\nimport config from '../../config';\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore';\n\n// helpers\nimport {\n    login as loginApi,\n    signup as signupApi,\n    updateProfile as updateProfileApi,\n    updateProfileImage as updateProfileImageApi,\n} from '../../helpers/';\n\n// actions\nimport { authApiResponseSuccess, authApiResponseError } from './actions';\n\n// constants\nimport { AuthActionTypes } from './constants';\n\ninterface UserData {\n    payload: {\n        email: string;\n        phone: string;\n        password: string;\n        first_name: string;\n        last_name: string;\n        profile_image: File;\n    };\n    type: string;\n}\n\nconst api = new APICore();\n\n/**\n * Login the user\n * @param {*} payload - username and password\n */\nfunction* login({ payload: { email, password }, type }: UserData): SagaIterator {\n    try {\n        const response = yield call(loginApi, { email, password });\n        const result = response.data;\n        // NOTE - You can change this according to response format from your api\n        \n        if(result.success){\n            api.setLoggedInUser(result.data);\n            setAuthorization(result.data.access);\n            yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, result.data));\n        }else{\n            yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, result.error));\n            api.setLoggedInUser(null);\n            setAuthorization(null);\n        }\n        \n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\n/**\n * Logout the user\n */\nfunction* logout(): SagaIterator {\n    try {\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n    }\n}\n\nfunction* signup({ payload: { first_name,last_name, email, phone, password } }: UserData): SagaIterator {\n    try {\n        const response = yield call(signupApi, { first_name,last_name, email, phone, password });\n        const user = response.data;\n        // api.setLoggedInUser(user);\n        // setAuthorization(user['token']);\n        yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n        api.setLoggedInUser(null);\n        setAuthorization(null);\n    }\n}\n\n\nfunction* updateProfile({ payload: { first_name,last_name, email, phone } }: UserData): SagaIterator {\n    try {\n        const response = yield call(updateProfileApi, { first_name,last_name, email, phone });\n        const result = response.data\n        if(result.success){\n            const profile = JSON.parse(localStorage.getItem('ccl_user') || '{}');\n            Object.keys({ first_name,last_name, email, phone }).forEach((key) => {\n                profile[key] = { first_name,last_name, email, phone }[key];\n            });\n            localStorage.setItem('ccl_user', JSON.stringify(profile));\n            yield put(authApiResponseSuccess(AuthActionTypes.UPDATE_PROFILE, response.data));\n        }else{\n            yield put(authApiResponseError(AuthActionTypes.UPDATE_PROFILE, result.error));\n        }\n        \n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.UPDATE_PROFILE, error));\n    }\n}\n\nfunction* updateProfileImage({ payload: { profile_image } }: UserData): SagaIterator {\n    try {\n        const response = yield call(updateProfileImageApi, { profile_image });\n        const result = response.data;\n        if(result.success){\n            const profile = JSON.parse(localStorage.getItem('ccl_user') || '{}');\n            profile['profile_image'] = config.API_URL+result.data.profile_image\n            localStorage.setItem('ccl_user', JSON.stringify(profile));\n            yield put(authApiResponseSuccess(AuthActionTypes.UPDATE_PROFILE_IMAGE, response.data));\n        }else{\n            yield put(authApiResponseError(AuthActionTypes.UPDATE_PROFILE_IMAGE, result.error));\n        }\n        \n    } catch (error: any) {\n        yield put(authApiResponseError(AuthActionTypes.UPDATE_PROFILE_IMAGE, error));\n    }\n}\nexport function* watchLoginUser() {\n    yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\n\nexport function* watchLogout() {\n    yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\n\nexport function* watchSignup(): any {\n    yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\n\n\n\nexport function* watchUpdateProfile(): any {\n    yield takeEvery(AuthActionTypes.UPDATE_PROFILE, updateProfile);\n}\n\nexport function* watchUpdateProfileImage(): any {\n    yield takeEvery(AuthActionTypes.UPDATE_PROFILE_IMAGE, updateProfileImage);\n}\n\nfunction* authSaga() {\n    yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchUpdateProfile),fork(watchUpdateProfileImage)]);\n}\n\nexport default authSaga;\n","import { all, call, fork, takeEvery } from 'redux-saga/effects';\n\n// constants\nimport { LayoutActionTypes } from './constants';\n\n/**\n * Toggle the class on body\n * @param {*} cssClass\n */\nfunction manageBodyClass(cssClass: string, action = 'toggle') {\n    switch (action) {\n        case 'add':\n            if (document.body) document.body.classList.add(cssClass);\n            break;\n        case 'remove':\n            if (document.body) document.body.classList.remove(cssClass);\n            break;\n        default:\n            if (document.body) document.body.classList.toggle(cssClass);\n            break;\n    }\n\n    return true;\n}\n\n/**\n * ---------------------------------------------------------------------------------------------------------------------------\n * Note: Following are the functions which allows you to save the user prefrences on backend side by making an api request.\n * For now, we are just applying the required logic on frontend side\n * ----------------------------------------------------------------------------------------------------------------------------\n */\n\n/**\n * Show the rightsidebar\n */\nfunction* showRightSidebar() {\n    try {\n        yield call(manageBodyClass, 'right-bar-enabled', 'add');\n    } catch (error) {}\n}\n\n/**\n * Hides the rightsidebar\n */\nfunction* hideRightSidebar() {\n    try {\n        yield call(manageBodyClass, 'right-bar-enabled', 'remove');\n    } catch (error) {}\n}\n\nexport function* watchShowRightSidebar(): any {\n    yield takeEvery(LayoutActionTypes.SHOW_RIGHT_SIDEBAR, showRightSidebar);\n}\n\nexport function* watchHideRightSidebar(): any {\n    yield takeEvery(LayoutActionTypes.HIDE_RIGHT_SIDEBAR, hideRightSidebar);\n}\n\nfunction* LayoutSaga(): any {\n    yield all([fork(watchShowRightSidebar), fork(watchHideRightSidebar)]);\n}\n\nexport default LayoutSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getUser as getUserApi,\n    addUser as addUserApi\n    \n} from '../../helpers';\n\ninterface UserData {\n    payload: {\n        id: number;\n        first_name: string;\n        last_name: string;\n        email: string;\n        password: string;\n        phone: string;\n        groups: number[];\n        is_active: boolean;\n        limit: number;\n        page: number;\n    };\n    type: string;\n}\n\nfunction* getUser({ payload: {limit,page}}:UserData):SagaIterator {\n    try {\n        const response = yield call(getUserApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_USER_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_USER_FAILED', error: error});\n        \n    }\n}\n\nfunction* addUser({ payload: {first_name,last_name,email,password,phone,groups,is_active} }: UserData):SagaIterator {\n    \n    try {\n        const response = yield call(addUserApi,{first_name,last_name,email,password,phone,groups,is_active});\n        const result = response.data;\n        \n        if(result.success){\n            yield put({type: 'ADD_USER_SUCCESS' , user: result.data});\n        }else{\n            yield put({type: 'ADD_USER_FAILED', error: result.error});\n        }\n        \n    } catch (error) {\n        yield put({type: 'ADD_USER_FAILED', error: error});\n        \n    }\n}\n\n\nexport function* watchGetUser() {\n    yield takeEvery('GET_USER_REQUESTED', getUser);\n}\n\nexport function* watchAddUser() {\n    yield takeEvery('ADD_USER_REQUESTED', addUser);\n}\n\n\n\nfunction* userSaga() {\n    yield all([fork(watchGetUser),fork(watchAddUser)]);\n}\n\nexport default userSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getRole as getRoleApi,\n    getUserRole as getUserRoleApi,\n        \n} from '../../helpers';\n\ninterface RoleData {\n    payload: {\n        limit: number;\n        page: number;\n    };\n    type: string;\n}\n\nfunction* getRole({ payload: {limit,page}}:RoleData):SagaIterator {\n    try {\n        const response = yield call(getRoleApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_ROLE_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_ROLE_FAILED', error: error});\n        \n    }\n}\n\nfunction* getUserRole():SagaIterator {\n    try {\n        const response = yield call(getUserRoleApi);\n        const roles = response.data;\n        yield put({type: 'GET_USERROLE_SUCCESS' , user_role: roles.permissions});\n    } catch (error) {\n        yield put({type: 'GET_USERROLE_FAILED', error: error});\n        \n    }\n}\n\n\n\n\nexport function* watchGetRole() {\n    yield takeEvery('GET_ROLE_REQUESTED', getRole);\n}\n\nexport function* watchGetUserRole() {\n    yield takeEvery('GET_USERROLE_REQUESTED', getUserRole);\n}\n\n\n\nfunction* roleSaga() {\n    yield all([fork(watchGetRole),fork(watchGetUserRole)]);\n}\n\nexport default roleSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getContact as getContactApi,\n    getContactInvoice as getContactInvoiceApi,\n    getContactInvoiceSetting as getContactInvoiceSettingApi,\n    updateContactInvoiceSetting as updateContactInvoiceSettingApi,\n    getContactDetails as getContactDetailsApi,\n    getAllContact as getAllContactApi,\n    addContact as addContactApi,\n    deleteContact as deleteContactApi\n    \n} from '../../helpers';\n\ninterface ContactData {\n    payload: {\n        id: number;\n        name: string;\n        client_id: string;\n        contact_type: string;\n        contact_person: string;\n        phone: string;\n        email: string;\n        city: string;\n        country: string;\n        billing_address: string;\n        limit: number;\n        page: number;\n    };\n    type: string;\n}\n\nfunction* getContact({ payload: {limit,page}}:ContactData):SagaIterator {\n    try {\n        const response = yield call(getContactApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_CONTACT_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CONTACT_FAILED', error: error});\n        \n    }\n}\n\n\nfunction* getContactInvoice({ payload }:any):SagaIterator {\n    try {\n        const response = yield call(getContactInvoiceApi,{...payload});\n        const data = response.data;\n        // console.log(\"data\",data)\n\n        yield put({type: 'GET_CONTACT_INVOICE_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CONTACT_INVOICE_FAILED', error: error});\n        \n    }\n}\n\n\nfunction* getContactInvoiceSetting({ payload }:ContactData):SagaIterator {\n    try {\n        const response = yield call(getContactInvoiceSettingApi,{payload});\n        const data = response.data;\n        yield put({type: 'GET_CONTACT_INVOICE_SETTING_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CONTACT_INVOICE_SETTING_FAILED', error: error});\n        \n    }\n}\n\n\nfunction* updateContactInvoiceSetting({ payload }:any):SagaIterator {\n    try {\n        const response = yield call(updateContactInvoiceSettingApi,{payload});\n        const data = response.data;\n        if(data.success){\n            yield put({type: 'UPDATE_CONTACT_INVOICE_SETTING_SUCCESS' , data: data.data});\n        }else{\n            yield put({type: 'UPDATE_CONTACT_INVOICE_SETTING_FAILED', error: data.error});\n        }\n    } catch (error) {\n        console.log(\"error\",error)\n        yield put({type: 'UPDATE_CONTACT_INVOICE_SETTING_FAILED', error: error});\n        \n    }\n}\n\n\nfunction* getContactDetails({ payload }:ContactData):SagaIterator {\n    try {\n        const response = yield call(getContactDetailsApi,{payload});\n        const data = response.data;\n        yield put({type: 'GET_CONTACT_DETAILS_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CONTACT_DETAILS_FAILED', error: error});\n        \n    }\n}\n\n\n\nfunction* getAllContact():SagaIterator {\n    try {\n        const response = yield call(getAllContactApi);\n        const data = response.data;\n        yield put({type: 'GET_ALLCONTACT_SUCCESS' , data: data.results});\n    } catch (error) {\n        yield put({type: 'GET_ALLCONTACT_FAILED', error: error});\n        \n    }\n}\n\n\n\nfunction* addContact({ payload: {name,client_id,contact_type,contact_person,phone,email,city,country,billing_address} }: ContactData):SagaIterator {\n    \n    try {\n        const response = yield call(addContactApi,{name,client_id,contact_type,contact_person,phone,email,city,country,billing_address});\n        const result = response.data;\n        if(result.success){\n            yield put({type: 'ADD_CONTACT_SUCCESS' , contact: result.data});\n        }else{\n            yield put({type: 'ADD_CONTACT_FAILED', error: result.error});\n        }\n        \n    } catch (error) {\n        yield put({type: 'ADD_CONTACT_FAILED', error: error});\n        \n    }\n}\n\nfunction* deleteContact({ payload: {id} }: ContactData):SagaIterator {\n    try {\n        console.log(id)\n        const response = yield call(deleteContactApi,id);\n        const result = response.data;\n        if(result.success){\n            yield put({type: 'DELETE_CONTACT_SUCCESS' , id: id});\n        }else{\n            yield put({type: 'DELETE_CONTACT_FAILED', error: result.error});\n        }\n        \n    } catch (error) {\n        yield put({type: 'DELETE_CONTACT_FAILED', error: error});\n        \n    }\n}\n\n\nexport function* watchGetContact() {\n    yield takeEvery('GET_CONTACT_REQUESTED', getContact);\n}\n\n\nexport function* watchGetContactInvoice() {\n    yield takeEvery('GET_CONTACT_INVOICE_REQUESTED', getContactInvoice);\n}\n\nexport function* watchGetContactInvoiceSetting() {\n    yield takeEvery('GET_CONTACT_INVOICE_SETTING_REQUESTED', getContactInvoiceSetting);\n}\n\nexport function* watchUpdateContactInvoiceSetting() {\n    yield takeEvery('UPDATE_CONTACT_INVOICE_SETTING_REQUESTED', updateContactInvoiceSetting);\n}\n\nexport function* watchGetContactDetails() {\n    yield takeEvery('GET_CONTACT_DETAILS_REQUESTED', getContactDetails);\n}\n\n\nexport function* watchGetAllContact() {\n    yield takeEvery('GET_ALLCONTACT_REQUESTED', getAllContact);\n}\n\n\n\nexport function* watchAddContact() {\n    yield takeEvery('ADD_CONTACT_REQUESTED', addContact);\n}\n\nexport function* watchDeleteContact() {\n    yield takeEvery('DELETE_CONTACT_REQUESTED', deleteContact);\n}\n\n\n\nfunction* contactSaga() {\n    yield all([fork(watchGetContact),fork(watchAddContact),fork(watchDeleteContact),fork(watchGetAllContact), fork(watchGetContactInvoice), fork(watchGetContactDetails), fork(watchGetContactInvoiceSetting), fork(watchUpdateContactInvoiceSetting)]);\n}\n\nexport default contactSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getCountry as getCountryApi,    \n    getCity as getCityApi,    \n} from '../../helpers';\n\ninterface LocationData {\n    payload: {\n        id: number;\n        name: string;\n        country: any;\n    };\n    type: string;\n}\n\nfunction* getCountry({ payload: {}}:LocationData):SagaIterator {\n    try {\n        const response = yield call(getCountryApi,{});\n        const data = response.data;\n        yield put({type: 'GET_COUNTRY_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_COUNTRY_FAILED', error: error});\n        \n    }\n}\n\nfunction* getCity({ payload: {country}}:LocationData):SagaIterator {\n    try {\n        if (country!=='' && country!==null){\n            const response = yield call(getCityApi,{country});\n            const data = response.data;\n            yield put({type: 'GET_CITY_SUCCESS' , data: data});\n        }\n        else{\n            yield put({type: 'GET_CITY_FAILED', error: \"No country selected\"});\n        }\n    } catch (error) {\n        yield put({type: 'GET_CITY_FAILED', error: error});\n        \n    }\n}\n\n\n\nexport function* watchGetCountry() {\n    yield takeEvery('GET_COUNTRY_REQUESTED', getCountry);\n}\n\nexport function* watchGetCity() {\n    yield takeEvery('GET_CITY_REQUESTED', getCity);\n}\n\n\nfunction* locationSaga() {\n    yield all([fork(watchGetCountry),fork(watchGetCity)]);\n}\n\n\n\nexport default locationSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getService as getServiceApi,\n    getContactService as getContactServiceApi,\n    addService as addServiceApi,\n    \n} from '../../helpers';\n\ninterface ServiceData {\n    payload: {\n        id: number;\n        service: any[];\n        limit: number;\n        page: number;\n        contact_id: number;\n    };\n    type: string;\n}\n\nfunction* getService({ payload: {limit,page}}:ServiceData):SagaIterator {\n    try {\n        const response = yield call(getServiceApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_SERVICE_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_SERVICE_FAILED', error: error});\n        \n    }\n}\n\nfunction* getContactService({ payload: {contact_id}}:ServiceData):SagaIterator {\n    try {\n        const response = yield call(getContactServiceApi,{contact_id});\n        const data = response.data;\n        yield put({type: 'GET_CONTACTSERVICE_SUCCESS' , data: data.results});\n    } catch (error) {\n        yield put({type: 'GET_CONTACTSERVICE_FAILED', error: error});\n        \n    }\n}\n\n\n\nfunction* addService({ payload: {service} }: ServiceData):SagaIterator {\n    console.log(service)\n    try {\n        const response = yield call(addServiceApi,{service});\n        const result = response.data;\n        \n        if(result.success){\n            yield put({type: 'ADD_SERVICE_SUCCESS' , contact: result.data});\n        }else{\n            yield put({type: 'ADD_SERVICE_FAILED', error: result.error});\n        }\n        \n    } catch (error) {\n        yield put({type: 'ADD_SERVICE_FAILED', error: error});\n        \n    }\n}\n\n\n\nexport function* watchGetService() {\n    yield takeEvery('GET_SERVICE_REQUESTED', getService);\n}\n\nexport function* watchGetContactService() {\n    yield takeEvery('GET_CONTACTSERVICE_REQUESTED', getContactService);\n}\n\n\n\nexport function* watchAddService() {\n    yield takeEvery('ADD_SERVICE_REQUESTED', addService);\n}\n\n\n\nfunction* serviceSaga() {\n    yield all([fork(watchGetService),fork(watchAddService),fork(watchGetContactService)]);\n}\n\nexport default serviceSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getInvoice as getInvoiceApi,    \n    getInvoiceDetails as getInvoiceDetailsApi,    \n} from '../../helpers';\n\ninterface InvoiceData {\n    payload: {\n        id: number;\n        limit: number;\n        page: number;\n    };\n    type: string;\n}\n\nfunction* getInvoice({ payload: {limit,page}}:InvoiceData):SagaIterator {\n    try {\n        const response = yield call(getInvoiceApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_INVOICE_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_INVOICE_FAILED', error: error});\n        \n    }\n}\n\nfunction* getInvoiceDetails({ payload }:InvoiceData):SagaIterator {\n    try {\n        const response = yield call(getInvoiceDetailsApi,{payload});\n        const data = response.data;\n        yield put({type: 'GET_INVOICEDETAILS_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_INVOICEDETAILS_FAILED', error: error});\n        \n    }\n}\n\n\nexport function* watchGetInvoice() {\n    yield takeEvery('GET_INVOICE_REQUESTED', getInvoice);\n}\n\nexport function* watchGetInvoiceDetails() {\n    yield takeEvery('GET_INVOICEDETAILS_REQUESTED', getInvoiceDetails);\n}\n\n\n\nfunction* invoiceSaga() {\n    yield all([fork(watchGetInvoice),fork(watchGetInvoiceDetails)]);\n}\n\nexport default invoiceSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getRepeatingInvoice as getRepeatingInvoiceApi,    \n    getRepeatingInvoiceDetails as getRepeatingInvoiceDetailsApi,    \n} from '../../helpers';\n\ninterface InvoiceData {\n    payload: {\n        id: number;\n        limit: number;\n        page: number;\n    };\n    type: string;\n}\n\nfunction* getRepeatingInvoice({ payload: {limit,page}}:InvoiceData):SagaIterator {\n    try {\n        const response = yield call(getRepeatingInvoiceApi,{limit,page});\n        const data = response.data;\n        yield put({type: 'GET_REPEATINGINVOICE_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_REPEATINGINVOICE_FAILED', error: error});\n        \n    }\n}\n\nfunction* getRepeatingInvoiceDetails({ payload }:InvoiceData):SagaIterator {\n    try {\n        const response = yield call(getRepeatingInvoiceDetailsApi,{payload});\n        const data = response.data;\n        yield put({type: 'GET_REPEATINGINVOICEDETAILS_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_REPEATINGINVOICEDETAILS_FAILED', error: error});\n        \n    }\n}\n\n\nexport function* watchGetRepeatingInvoice() {\n    yield takeEvery('GET_REPEATINGINVOICE_REQUESTED', getRepeatingInvoice);\n}\n\nexport function* watchGetRepeatingInvoiceDetails() {\n    yield takeEvery('GET_REPEATINGINVOICEDETAILS_REQUESTED', getRepeatingInvoiceDetails);\n}\n\n\n\nfunction* repeatingInvoiceSaga() {\n    yield all([fork(watchGetRepeatingInvoice),fork(watchGetRepeatingInvoiceDetails)]);\n}\n\nexport default repeatingInvoiceSaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getCurrency as getCurrencyApi,        \n} from '../../helpers';\n\n\n\nfunction* getCurrency():SagaIterator {\n    try {\n        const response = yield call(getCurrencyApi);\n        const data = response.data;\n        yield put({type: 'GET_CURRENCY_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CURRENCY_FAILED', error: error});\n        \n    }\n}\n\n\n\n\nexport function* watchGetCurrency() {\n    yield takeEvery('GET_CURRENCY_REQUESTED', getCurrency);\n}\n\n\n\n\n\nfunction* currencySaga() {\n    yield all([fork(watchGetCurrency)]);\n}\n\nexport default currencySaga;\n","import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\n// helpers\nimport {\n    getChartAccount as getChartAccountApi,        \n} from '../../helpers';\n\n\n\nfunction* getChartAccount():SagaIterator {\n    try {\n        const response = yield call(getChartAccountApi);\n        const data = response.data;\n        yield put({type: 'GET_CHARTACCOUNT_SUCCESS' , data: data});\n    } catch (error) {\n        yield put({type: 'GET_CHARTACCOUNT_FAILED', error: error});\n        \n    }\n}\n\n\n\n\nexport function* watchGetChartAccount() {\n    yield takeEvery('GET_CHARTACCOUNT_REQUESTED', getChartAccount);\n}\n\n\n\n\n\nfunction* charAccountSaga() {\n    yield all([fork(watchGetChartAccount)]);\n}\n\nexport default charAccountSaga;\n","import { all } from 'redux-saga/effects';\n\nimport authSaga from './auth/saga';\nimport layoutSaga from './layout/saga';\nimport userSaga from './user/saga';\nimport roleSaga from './roles/saga';\nimport contactSaga from './contact/saga';\nimport locationSaga from './location/saga';\nimport serviceSaga from './service/saga';\nimport invoiceSaga from './invoice/saga';\nimport repeatingInvoiceSaga from './repeating-invoice/saga';\nimport currencySaga from './currency/saga';\nimport chartAccountSaga from './chart-account/saga';\n\n\n\nexport default function* rootSaga() {\n    yield all([authSaga(), layoutSaga(), userSaga(),roleSaga(),contactSaga(),locationSaga(),serviceSaga(),invoiceSaga(),currencySaga(),chartAccountSaga(),repeatingInvoiceSaga()]);\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport rootSaga from './sagas';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nlet store: any;\n\nexport function configureStore(initialState: {}) {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    const localstore = createStore(reducers, initialState, composeEnhancers(applyMiddleware(...middlewares)));\n    sagaMiddleware.run(rootSaga);\n    store = localstore;\n    return localstore;\n}\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './i18n';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\n\nReactDOM.render(\n    <Provider store={configureStore({})}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const GET_USER_REQUESTED ='GET_USER_REQUESTED'\nexport const GET_USER_SUCCESS ='GET_USER_SUCCESS'\nexport const GET_USER_FAILED ='GET_USER_FAILED'\n\nexport const ADD_USER_REQUESTED ='ADD_USER_REQUESTED'\nexport const ADD_USER_SUCCESS ='ADD_USER_SUCCESS'\nexport const ADD_USER_FAILED ='ADD_USER_FAILED'\n\nexport const UPDATE_USER_REQUESTED ='UPDATE_USER_REQUESTED'\nexport const UPDATE_USER_SUCCESS ='UPDATE_USER_SUCCESS'\nexport const UPDATE_USER_FAILED ='UPDATE_USER_FAILED'\n\nexport const DELETE_USER_REQUESTED ='DELETE_USER_REQUESTED'\nexport const DELETE_USER_SUCCESS ='DELETE_USER_SUCCESS'\nexport const DELETE_USER_FAILED ='DELETE_USER_FAILED'","export const GET_ROLE_REQUESTED ='GET_ROLE_REQUESTED'\nexport const GET_ROLE_SUCCESS ='GET_ROLE_SUCCESS'\nexport const GET_ROLE_FAILED ='GET_ROLE_FAILED'\n\nexport const GET_USERROLE_REQUESTED ='GET_USERROLE_REQUESTED'\nexport const GET_USERROLE_SUCCESS ='GET_USERROLE_SUCCESS'\nexport const GET_USERROLE_FAILED ='GET_USERROLE_FAILED'\n\n\n\n","export const GET_COUNTRY_REQUESTED ='GET_COUNTRY_REQUESTED'\nexport const GET_COUNTRY_SUCCESS ='GET_COUNTRY_SUCCESS'\nexport const GET_COUNTRY_FAILED ='GET_COUNTRY_FAILED'\n\nexport const GET_CITY_REQUESTED ='GET_CITY_REQUESTED'\nexport const GET_CITY_SUCCESS ='GET_CITY_SUCCESS'\nexport const GET_CITY_FAILED ='GET_CITY_FAILED'\n\n\n\n\n\n","export const GET_INVOICE_REQUESTED ='GET_INVOICE_REQUESTED'\nexport const GET_INVOICE_SUCCESS ='GET_INVOICE_SUCCESS'\nexport const GET_INVOICE_FAILED ='GET_INVOICE_FAILED'\n\nexport const GET_INVOICEDETAILS_REQUESTED ='GET_INVOICEDETAILS_REQUESTED'\nexport const GET_INVOICEDETAILS_SUCCESS ='GET_INVOICEDETAILS_SUCCESS'\nexport const GET_INVOICEDETAILS_FAILED ='GET_INVOICEDETAILS_FAILED'\n\n\n\n\n\n\n","export const GET_REPEATINGINVOICE_REQUESTED ='GET_REPEATINGINVOICE_REQUESTED'\nexport const GET_REPEATINGINVOICE_SUCCESS ='GET_REPEATINGINVOICE_SUCCESS'\nexport const GET_REPEATINGINVOICE_FAILED ='GET_REPEATINGINVOICE_FAILED'\n\nexport const GET_REPEATINGINVOICEDETAILS_REQUESTED ='GET_REPEATINGINVOICEDETAILS_REQUESTED'\nexport const GET_REPEATINGINVOICEDETAILS_SUCCESS ='GET_REPEATINGINVOICEDETAILS_SUCCESS'\nexport const GET_REPEATINGINVOICEDETAILS_FAILED ='GET_REPEATINGINVOICEDETAILS_FAILED'\n\n\n\n\n\n\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler } from 'react-hook-form';\n\ninterface VerticalFromProps<TFormValues> {\n    defaultValues?: any;\n    resolver?: Resolver<TFormValues>;\n    children?: any;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n}\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n    // if(errors){\n    //     console.log(errors)\n    // }\n    \n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate >\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n\n                \n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ninterface PasswordInputProps {\n    name: string;\n    placeholder?: string;\n    refCallback?: any;\n    errors: FieldErrors;\n    control?: Control<any>;\n    register?: any;\n    className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n}: PasswordInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n        </>\n    );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    label?: string;\n    type?: string;\n    name: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    refCallback?: any;\n    children?: any;\n    rows?: string;\n}\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    return (\n        <>\n            \n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'password' ? (\n                        <>\n                            <Form.Group className={containerClass}>\n                                {label ? (\n                                    <>\n                                        {' '}\n                                        <Form.Label className={labelClassName} >{label}</Form.Label> {children}{' '}\n                                    </>\n                                ) : null}\n                                <PasswordInput\n                                    name={name}\n                                    placeholder={placeholder}\n                                    refCallback={refCallback}\n                                    errors={errors!}\n                                    register={register}\n                                    className={className}\n                                />\n\n                                {errors && errors[name] ? (\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                                        {errors[name]['message']}\n                                    </Form.Control.Feedback>\n                                ) : null}\n                            </Form.Group>\n                        </>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <>\n                                    <Form.Group className={containerClass}>\n                                        <Form.Check\n                                            type={type}\n                                            label={label}\n                                            name={name}\n                                            id={name}\n                                            ref={(r: HTMLInputElement) => {\n                                                if (refCallback) refCallback(r);\n                                            }}\n                                            className={className}\n                                            isInvalid={errors && errors[name] ? true : false}\n                                            {...(register ? register(name) : {})}\n                                            {...otherProps}\n                                        />\n\n                                        {errors && errors[name] ? (\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors[name]['message']}\n                                            </Form.Control.Feedback>\n                                        ) : null}\n                                    </Form.Group>\n                                </>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\n\n                                    <Form.Control\n                                        type={type}\n                                        placeholder={placeholder}\n                                        name={name}\n                                        id={name}\n                                        as={comp}\n                                        ref={(r: HTMLInputElement) => {\n                                            if (refCallback) refCallback(r);\n                                        }}\n                                        className={className}\n                                        isInvalid={errors && errors[name] ? true : false}\n                                        {...(register ? register(name) : {})}\n                                        rows={rows}\n                                        {...otherProps}\n                                        autoComplete={name}\n                                        \n                                    >\n                                        {children ? children : null}\n                                    </Form.Control>\n\n                                    {errors && errors[name] ? (\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            {errors[name]['message']}\n                                        </Form.Control.Feedback>\n                                    ) : null}\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n\nconst Pagination = ({visitPage, previous_number ,next_number ,total_page ,current_page ,active}) => {\n    \n    const filterPages = useCallback(\n        (visiblePages, totalPages) => {\n            return visiblePages.filter((page) => page <= totalPages);\n        },\n        [total_page]\n    );\n\n    const getVisiblePages = useCallback(\n        (page, total) => {\n            if (total < 7) {\n                return filterPages([1, 2, 3, 4, 5, 6], total);\n            } else {\n                if (page % 5 >= 0 && page > 4 && page + 2 < total) {\n                    return [1, page - 1, page, page + 1, total];\n                } else if (page % 5 >= 0 && page > 4 && page + 2 >= total) {\n                    return [1, total - 3, total - 2, total - 1, total];\n                } else {\n                    return [1, 2, 3, 4, 5, total];\n                }\n            }\n        },\n        [filterPages]\n    );\n\n    const changePage = (page) => {\n        const active = page + 1;\n\n        if (page === active) {\n            return;\n        }\n\n        const visiblePages = getVisiblePages(page, total_page);\n        setVisiblePages(filterPages(visiblePages, total_page));\n        visitPage(page);\n    };\n    \n    const [visiblePages, setVisiblePages] = useState(getVisiblePages(null, total_page));\n\n    \n    \n    useEffect(()=>{ \n        const visiblePages = getVisiblePages(null, total_page);\n        setVisiblePages(visiblePages);\n    },[getVisiblePages])\n\n    return (\n        <>\n            <div className=\"d-lg-flex align-items-center text-center pb-1\">\n                \n\n                <span className=\"me-3\">\n                    Page{' '}\n                    <strong>\n                        {current_page} of {total_page}\n                    </strong>{' '}\n                </span>\n\n                <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0\">\n                    <li\n                        key=\"prevpage\"\n                        className={classNames('page-item', 'paginate_button', 'previous', {\n                            disabled: active === 1,\n                        })}\n                        onClick={() => {\n                            previous_number();\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-left\"></i>\n                        </Link>\n                    </li>\n                    \n                    {(visiblePages || []).map((page, index, array) => {\n                        return array[index - 1] + 1 < page ? (\n                            <React.Fragment key={page}>\n                                <li className=\"page-item disabled d-none d-xl-inline-block\">\n                                    <Link to=\"#\" className=\"page-link\">\n                                        ...\n                                    </Link>\n                                </li>\n                                <li\n                                    className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                        active: active === page,\n                                    })}\n                                    onClick={(e) => changePage(page)}\n                                >\n                                    <Link to=\"#\" className=\"page-link\">\n                                        {page}\n                                    </Link>\n                                </li>\n                            </React.Fragment>\n                        ) : (\n                            <li\n                                key={page}\n                                className={classNames('page-item', 'd-none', 'd-xl-inline-block', {\n                                    active: active === page,\n                                })}\n                                onClick={(e) => changePage(page)}\n                            >\n                                <Link to=\"#\" className=\"page-link\">\n                                    {page}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                    <li\n                        key=\"nextpage\"\n                        className={classNames('page-item', 'paginate_button', 'next', {\n                            disabled: active === total_page,\n                        })}\n                        onClick={() => {\n                            next_number();\n                        }}\n                    >\n                        <Link to=\"#\" className=\"page-link\">\n                            <i className=\"mdi mdi-chevron-right\"></i>\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default Pagination;\n","import * as type from './types';\n\n\n\nexport const getCountry = () => ({\n    type: type.GET_COUNTRY_REQUESTED,\n    payload: {},\n});\n\nexport const getCity = (country:number) => ({\n    type: type.GET_CITY_REQUESTED,\n    payload: {country},\n});\n\n"],"sourceRoot":""}